using Socrates.Helpers;
using Socrates.UserControls;
using Socrates.Views.Charts.Widgets;
using Socrates.Views.Messages;
using Socrates.Web.DataAccess;
using Socrates.Web.DomainLogic;
using Stimulsoft.Report;
using Stimulsoft.Report.Viewer;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.ServiceModel.DomainServices.Client;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Media;
using Telerik.Windows.Controls;
using Telerik.Windows.Controls.GridView;

namespace Socrates.Views.Billing
{
    public partial class PostCharges : BaseChildWindow
    {
        private DomainContextLoadBatch loadBatchPostCharges;
        PostBillingDomainContext postBillingDomainContext = new PostBillingDomainContext();
        ObservableCollection<postCharges> postChargesColln = new ObservableCollection<postCharges>();
        private CustomFormattedAppointmentsToBePosted cfAppointment;
        private ObservableCollection<icd9_category> icd9Categories;
        private Telerik.Windows.Controls.RadComboBox DdlDxCodeCategories;
        private List<CustomFormattedCPTDiagnosisAssociation> lstcurrent_custom_cpt_diagnosis_association = new List<CustomFormattedCPTDiagnosisAssociation>();
        private List<CustomFormattedCPTDiagnosisAssociation> lstPast_custom_cpt_diagnosis_association = new List<CustomFormattedCPTDiagnosisAssociation>();
        private IEnumerable<CustomFormattedPOS> enumPOS;
        private IEnumerable<string> enumModifier;
        //private IEnumerable<CustomFormattedPersonMinimumDetails> activePhysicians;
        private bool isIcdCollectionChanged;
        private bool isCptCollectionChanged;
        private bool isFacilityChanged;
        private readonly int encounterId;
        private string computedLevelOfService = string.Empty;
        ICD9Codes icdWidget = new ICD9Codes();
        CPTCodes cptWidget = new CPTCodes(null);
        private mr_patient_encounter mrPatientEncounter;
        private scheduled_slot patientScheduledSlot;
        //private mr_template billingTempate;
        private readonly int defaultBillingTemplateGroupId;
        private bool isButonApproveAndSubmittedClicked;
        private bool isButonSaveApproveNotSubmitClaimClicked;
        private bool isButonSaveClicked;
        private bool isButonSaveOnlyClicked;
        private bool isButtonSaveAndPrintHCFAClicked;
        private StiSLViewerControl viewerControl;
        private readonly CustomFormattedPatient patientObject;
        private visit visitObject;
        private calendar_date calenderObject;
        private appointment appointmentObject;
        private scheduled_slot scheduledSlotObject;
        private string priorAuthorizationNumber = string.Empty;
        private string HCFAPrintInsuranceType = string.Empty;
        private bool HCFAPrintOnlyFields = false;
        private bool flagSelfPay;
        private bool skipLevelOfService;
        private List<patient_insurance_provider> lstPIP = new List<patient_insurance_provider>();
        private int? ccId, cptId, icdId, ccFFId, ppFFId, adFFId = null;
        AdditionalBillingDetailsDomainContext abdDomainContext;
        private additional_billing_details abdOject;
        List<string> dictionaryofPointers = new List<string>();
        int superBillId;
        int billHeaderId;
        public bool isRePostToBilling = false;
        // public ObservableCollection<CustomFormattedICDCrossmapSelected> _selectedCodes = new ObservableCollection<CustomFormattedICDCrossmapSelected>();
        private bool saveIcd10 = false;
        public PostCharges(CustomFormattedAppointmentsToBePosted cfAppt, int billingTemplateGroupId, int ccId, int cptId, int icdId, int ccFFId, int ppFFId, int adFFId)
        {
            InitializeComponent();
            loadBatchPostCharges = new DomainContextLoadBatch(DataLoadComplete);
            this.ccId = ccId; this.cptId = cptId; this.icdId = icdId; this.ccFFId = ccFFId; this.ppFFId = ppFFId; this.adFFId = adFFId;
            defaultBillingTemplateGroupId = cfAppt.templateGroupId != null ? cfAppt.templateGroupId.Value : billingTemplateGroupId;
            RdpDateOfService.SelectableDateEnd = DateTime.Now;
            cfAppointment = cfAppt;
            ButtonDisable();
            encounterId = cfAppointment.encounterId == null ? 0 : cfAppointment.encounterId.Value;
            flagSelfPay = cfAppt.flagSelfPay == null ? false : cfAppt.flagSelfPay.Value;
            if (cfAppt.skipLevelOfService != null)
                skipLevelOfService = cfAppt.skipLevelOfService.Value;
            if (cfAppt.computedLevelOfService != null)
                computedLevelOfService = cfAppt.computedLevelOfService;
            //icdWidget._selectedCodes.CollectionChanged += new System.Collections.Specialized.NotifyCollectionChangedEventHandler(mrICDxCollection_CollectionChanged);
            BindPageData(encounterId);
            icdWidget.isFromBilling = true;
            icdWidget.mrDxCollectionCustomObjects.CollectionChanged += new System.Collections.Specialized.NotifyCollectionChangedEventHandler(mrDxCollection_CollectionChanged);
            cptWidget.DdlDxCPTCodeCategories.Width = 250;
            cptWidget.LboxCPTCodesSelected.Width = cptWidget.LBoxCPTResult.Width = 300;
            cptWidget.mrDxCPTCollection.CollectionChanged += new System.Collections.Specialized.NotifyCollectionChangedEventHandler(mrDxCPTCollection_CollectionChanged);
            cptWidget.Margin = new Thickness(0, 10, 0, 0);
            TextBlock lblICD = new TextBlock();
            lblICD.Text = "Use ICD9 Codes";
            lblICD.FontWeight = FontWeights.Bold;
            lblICD.Margin = new Thickness(10, 10, 0, 0);
            lblICD.Height = 22;
            SpCpt.Children.Add(cptWidget);
            SpIcd.Children.Add(lblICD);
            SpIcd.Children.Add(icdWidget);
            icdWidget.patientId = patientObject == null ? cfAppt.patientId : patientObject.patientId;
            if (cfAppt.dateOfService != null)
            {
                RdpDateOfService.SelectedDate = cfAppt.dateOfService;
                tbPatientDateOfService.Text = cfAppt.dateOfService.Value.Month.ToString("00") + "/" + cfAppt.dateOfService.Value.Day.ToString("00") + "/" + cfAppt.dateOfService.Value.Year.ToString("0000");
            }
            else
            {
                RdpDateOfService.SelectedDate = cfAppt.date;
                tbPatientDateOfService.Text = cfAppt.date.Month.ToString("00") + "/" + cfAppt.date.Day.ToString("00") + "/" + cfAppt.date.Year.ToString("0000");
            }


            System.ServiceModel.DomainServices.Client.InvokeOperation getICD10EffectiveLoad = new ICDCodeDomainContext().IsICD10Effective(encounterId, cfAppointment.patientId);
            getICD10EffectiveLoad.Completed += new EventHandler(getICD10EffectiveLoad_Completed);
        }

        public PostCharges(CustomFormattedPatient patientObj, int billingTemplateGroupId, int ccId, int cptId, int icdId, int ccFFId, int ppFFId, int adFFId)
        {
            InitializeComponent();
            loadBatchPostCharges = new DomainContextLoadBatch(DataLoadComplete);
            defaultBillingTemplateGroupId = billingTemplateGroupId;
            this.ccId = ccId; this.cptId = cptId; this.icdId = icdId; this.ccFFId = ccFFId; this.ppFFId = ppFFId; this.adFFId = adFFId;
            RdpDateOfService.SelectableDateEnd = DateTime.Now;
            RdpDateOfService.SelectedDate = DateTime.Now;
            tbPatientDateOfService.Text = DateTime.Now.Month.ToString("00") + "/" + DateTime.Now.Day.ToString("00") + "/" + DateTime.Now.Year.ToString("0000");
            patientObject = patientObj;
            ButtonDisable();
            flagSelfPay = patientObj.flag_self_pay_patient == null ? false : patientObj.flag_self_pay_patient.Value;
            if (cfAppointment != null)
                encounterId = cfAppointment.encounterId == null ? 0 : cfAppointment.encounterId.Value;
            //icdWidget._selectedCodes.CollectionChanged += new System.Collections.Specialized.NotifyCollectionChangedEventHandler(mrICDxCollection_CollectionChanged);
            BindPageData(encounterId);
            icdWidget.isFromBilling = true;
            icdWidget.mrDxCollectionCustomObjects.CollectionChanged += new System.Collections.Specialized.NotifyCollectionChangedEventHandler(mrDxCollection_CollectionChanged);
            cptWidget.DdlDxCPTCodeCategories.Width = 250;
            cptWidget.LboxCPTCodesSelected.Width = cptWidget.LBoxCPTResult.Width = 300;
            cptWidget.mrDxCPTCollection.CollectionChanged += new System.Collections.Specialized.NotifyCollectionChangedEventHandler(mrDxCPTCollection_CollectionChanged);
            cptWidget.Margin = new Thickness(0, 10, 0, 0);
            TextBlock lblICD = new TextBlock();
            lblICD.Text = "Use ICD9 Codes";
            lblICD.FontWeight = FontWeights.Bold;
            lblICD.Margin = new Thickness(10, 10, 0, 0);
            lblICD.Height = 22;
            SpCpt.Children.Add(cptWidget);
            SpIcd.Children.Add(lblICD);
            SpIcd.Children.Add(icdWidget);
            icdWidget.patientId = patientObject.patientId;
            System.ServiceModel.DomainServices.Client.InvokeOperation getICD10EffectiveLoad = new ICDCodeDomainContext().IsICD10Effective(0, patientObject.patientId);
            getICD10EffectiveLoad.Completed += new EventHandler(getICD10EffectiveLoad_Completed);
        }

        void mrDxCPTCollection_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            isCptCollectionChanged = true;
            this.BtnSaveToBilling.Visibility = System.Windows.Visibility.Collapsed;
            this.BtnApproveAndSubmitClaims.Visibility = System.Windows.Visibility.Collapsed;
            //this.BtnSaveAndPrintHCFA.Visibility = System.Windows.Visibility.Collapsed;
        }

        void mrICDxCollection_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            isIcdCollectionChanged = true;
            this.BtnSaveToBilling.Visibility = System.Windows.Visibility.Collapsed;
            this.BtnApproveAndSubmitClaims.Visibility = System.Windows.Visibility.Collapsed;
            //this.BtnSaveAndPrintHCFA.Visibility = System.Windows.Visibility.Collapsed;
        }

        void mrDxCollection_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            isIcdCollectionChanged = true;
            this.BtnSaveToBilling.Visibility = System.Windows.Visibility.Collapsed;
            this.BtnApproveAndSubmitClaims.Visibility = System.Windows.Visibility.Collapsed;
            //this.BtnSaveAndPrintHCFA.Visibility = System.Windows.Visibility.Collapsed;
        }

        private void BindPageData(int encounterId)
        {
            if (encounterId != 0)
            {
                GetEncounterDetails(encounterId);
            }
            if (cfAppointment != null)
            {
                GetAppointmentDetails(cfAppointment.appointmentId);
                BindPhysicians(cfAppointment.facilityId);
                TbReferringPhysician.Text = !string.IsNullOrEmpty(cfAppointment.refPhysicianName) ? cfAppointment.refPhysicianName : string.Empty;
                //BindPatientAppointment(cfAppointment.appointmentId);
            }
            BindBillerNotes(encounterId);
            BindPatientARType();
            //BindPatientPriorAuthorizationNumber();
            GetPatientInsuranceProvider();
            BindFacilities();
            GetPlaceOfService();
            GetModifiers();
            GetProblemList();
            //GetTemplateDetails();
            this.loadInsurance();
            BindOtherBillingDetails();
        }

        void BindBillerNotes(int encounterId)
        {
            if (postBillingDomainContext == null)
                postBillingDomainContext = new PostBillingDomainContext();
            var query = from bn in postBillingDomainContext.GetBillerNotesQuery(encounterId) select bn;
            LoadOperation<billers_note> loadBNOp = postBillingDomainContext.Load(query);
            loadBNOp.Completed += new EventHandler(loadBNOp_Completed);
            loadBatchPostCharges.Add(loadBNOp);
        }

        void loadBNOp_Completed(object sender, EventArgs e)
        {
            LoadOperation<billers_note> loadOp = (LoadOperation<billers_note>)sender;
            if (!loadOp.HasError)
            {
                if (loadOp.Entities.Count() == 0) return;
                //bnObject = loadOp.Entities.FirstOrDefault();
            }
            else
            {
                loadOp.MarkErrorAsHandled();
                MessageBox.Show(loadOp.Error.Message);
            }
        }

        void AddBillerNotes(string note, int patientId, bool showOnPatientStatement, mr_patient_encounter_cpt_diagnosis_association mpecptda)
        {
            billers_note billers_noteObj = new billers_note();
            billers_noteObj.note = note;
            billers_noteObj.patient_id = patientId;
            billers_noteObj.mr_patient_encounter_cpt_diagnosis_association = mpecptda;
            billers_noteObj.flag_show_on_patient_statement = showOnPatientStatement;
            billers_noteObj.update_history = DateTime.Now.ToString("MM/dd/yyyy HH:mm:ss") + " : " + App.global_user.last_name.ToString() + " " + App.global_user.first_name.ToString();
            billers_noteObj.last_updated_by_user_id = App.global_user.user_id;
            billers_noteObj.date_last_updated = DateTime.Now;
            billers_noteObj.created_by_user_id = App.global_user.user_id;
            billers_noteObj.date_created = DateTime.Now;
            postBillingDomainContext.billers_notes.Add(billers_noteObj);
        }
        void UpdateBillerNotes(string note, int bnId)
        {
            billers_note billers_noteObj = postBillingDomainContext.billers_notes.Where(x => x.billers_note_id == bnId).FirstOrDefault();
            billers_noteObj.note = note;
            billers_noteObj.update_history = DateTime.Now.ToString("MM/dd/yyyy HH:mm:ss") + " : " + App.global_user.last_name.ToString() + " " + App.global_user.first_name.ToString();
            billers_noteObj.last_updated_by_user_id = App.global_user.user_id;
            billers_noteObj.date_last_updated = DateTime.Now;
            billers_noteObj.created_by_user_id = App.global_user.user_id;
            billers_noteObj.date_created = DateTime.Now;
            postBillingDomainContext.billers_notes.Add(billers_noteObj);
        }

        void RemoveBillersNote(int bnId)
        {
            billers_note billers_noteObj = postBillingDomainContext.billers_notes.Where(x => x.billers_note_id == bnId).FirstOrDefault();
            if (billers_noteObj != null)
                postBillingDomainContext.billers_notes.Remove(billers_noteObj);
        }

        void BindOtherBillingDetails()
        {

            BindSymptomTypes();
            BindTreatmentTypes();
            BindAccidentTypes();
            BindNatureofAccidents();
            BindReferringTypes();
            BindResubmissionCode();
            BindStateCodes();
        }

        private static String states = "|AL|AK|AS|AZ|AR|CA|CO|CT|DE|DC|FM|FL|GA|GU|HI|ID|IL|IN|IA|KS|KY|LA|ME|MH|MD|MA|MI|MN|MS|MO|MT|NE|NV|NH|NJ|NM|NY|NC|ND|MP|OH|OK|OR|PW|PA|PR|RI|SC|SD|TN|TX|UT|VT|VI|VA|WA|WV|WI|WY|";

        public static bool isStateAbbreviation(String state)
        {
            return state.Length == 2 && states.IndexOf(state) > 0;
        }

        void BindStateCodes()
        {
            try
            {
                for (int i = 0; i <= HardcodedValues.StateCodes.GetUpperBound(0); i++)
                {
                    ComboBoxItem cbi = new ComboBoxItem();
                    cbi.Tag = HardcodedValues.StateCodes.GetValue(i, 0);
                    cbi.Content = HardcodedValues.StateCodes.GetValue(i, 1);
                    this.ddlStateCode.Items.Add(cbi);
                }

            }
            catch (Exception ex)
            { }
        }
        void BindResubmissionCode()
        {
            try
            {
                for (int i = 0; i <= HardcodedValues.ResubmissionCodes.GetUpperBound(0); i++)
                {
                    ComboBoxItem cbi = new ComboBoxItem();
                    cbi.Tag = HardcodedValues.ResubmissionCodes.GetValue(i, 0);
                    cbi.Content = HardcodedValues.ResubmissionCodes.GetValue(i, 1);
                    this.ddlResub.Items.Add(cbi);
                }



            }
            catch (Exception ex)
            { }

        }

        void BindReferringTypes()
        {
            try
            {
                for (int i = 0; i <= HardcodedValues.ReferringTypes.GetUpperBound(0); i++)
                {
                    ComboBoxItem cbi = new ComboBoxItem();
                    cbi.Tag = HardcodedValues.ReferringTypes.GetValue(i, 0);
                    cbi.Content = HardcodedValues.ReferringTypes.GetValue(i, 1);
                    this.ddlReferringType.Items.Add(cbi);
                }



            }
            catch (Exception ex)
            { }

        }
        void BindNatureofAccidents()
        {
            try
            {
                this.ddlNatureofAccident.ItemsSource = HardcodedValues.NatureofAccidents;

            }
            catch (Exception ex)
            { }

        }
        void BindAccidentTypes()
        {
            try
            {
                this.ddlAccidentType.ItemsSource = HardcodedValues.AccidentTypes;

            }
            catch (Exception ex)
            { }

        }

        void BindSymptomTypes()
        {
            try
            {

                for (int i = 0; i <= HardcodedValues.SymptomTypes.GetUpperBound(0); i++)
                {
                    ComboBoxItem cbi = new ComboBoxItem();
                    cbi.Tag = HardcodedValues.SymptomTypes.GetValue(i, 0);
                    cbi.Content = HardcodedValues.SymptomTypes.GetValue(i, 1);
                    this.ddlSymptomType.Items.Add(cbi);

                    //ddlSymptomType.DisplayMemberPath = "SymptomType";
                    //ddlSymptomType.SelectedValuePath = "SymptomValue";
                    //ddlSymptomType.SelectedIndex = 0;
                }

            }
            catch (Exception ex)
            { }

        }
        void BindTreatmentTypes()
        {
            try
            {

                for (int i = 0; i <= HardcodedValues.TreatmentTypes.GetUpperBound(0); i++)
                {
                    ComboBoxItem cbi = new ComboBoxItem();
                    cbi.Tag = HardcodedValues.TreatmentTypes.GetValue(i, 0);
                    cbi.Content = HardcodedValues.TreatmentTypes.GetValue(i, 1);
                    this.ddlTreatmentType.Items.Add(cbi);
                }

            }
            catch (Exception ex)
            { }

        }
        private void DataLoadComplete(DomainContextLoadBatch batch)
        {
            try
            {
                if (batch != null)
                {
                    if (batch.FailedOperationCount > 0)
                    {
                        MessageBox.Show("Load operation failed");
                    }
                    else
                    {
                        if (cfAppointment != null)
                        {
                            tbPatientName.Text = cfAppointment.patientName;
                            tbPatientUniqueNumber.Text = cfAppointment.uniqNo;
                            tbPatientDOB.Text = cfAppointment.dob.ToString("MM/dd/yyyy");
                            tbPatientCellPhone.Text = string.IsNullOrEmpty(cfAppointment.cellPhone) ? "" : (cfAppointment.cellPhone.Length == 10 ? decimal.Parse(cfAppointment.cellPhone).ToString("###-###-####") : cfAppointment.cellPhone);

                        }
                        else if (patientObject != null)
                        {
                            tbPatientName.Text = patientObject.last_name + " " + patientObject.first_name;
                            tbPatientUniqueNumber.Text = patientObject.unique_number;
                            if (patientObject.date_of_birth != null)
                                tbPatientDOB.Text = patientObject.date_of_birth.Value.ToString("MM/dd/yyyy");
                            tbPatientCellPhone.Text = string.IsNullOrEmpty(patientObject.mobile_phone) ? "" : (patientObject.mobile_phone.Length == 10 ? decimal.Parse(patientObject.mobile_phone).ToString("###-###-####") : patientObject.mobile_phone);
                            if (DdlPhysicianPstChrg.ItemsSource != null)
                            {
                                DdlPhysicianPstChrg.SelectedItem = ((IQueryable<CustomFormattedPersonMinimumDetails>)DdlPhysicianPstChrg.ItemsSource.AsQueryable()).Where(q => q.physician_id == patientObject.defualt_physician).FirstOrDefault();
                            }

                        }
                        if (cfAppointment != null)
                        {
                            DdlFacility.SelectedValue = cfAppointment.facilityId;
                            if (DdlPhysicianPstChrg.ItemsSource != null)
                            {
                                DdlPhysicianPstChrg.SelectedItem = ((IQueryable<CustomFormattedPersonMinimumDetails>)DdlPhysicianPstChrg.ItemsSource.AsQueryable()).Where(q => q.physician_id == cfAppointment.physicianId).FirstOrDefault();
                            }
                        }
                        ButtonEnable();
                    }
                }
                else
                {
                    ButtonEnable();
                }
                if (isButonSaveOnlyClicked)
                {
                    SuccessWindow successWindow = new SuccessWindow("Data saved successfully.");
                    successWindow.ShowDialog();
                }
            }
            catch (Exception ex)
            {
                InformationWindow iw = new InformationWindow(ex.Message);
                iw.Show();
                ButtonEnable();
            }
        }

        void ButtonEnable()
        {
            this.RadTabCPTCodes.IsEnabled = true;
            this.RadTabAssociation.IsEnabled = true;
            this.RadTabICDCodes.IsEnabled = true;
            this.RadTabInsuranceInformation.IsEnabled = true;
            this.BtnPrevious.IsEnabled = true;
            this.BtnNext.IsEnabled = true;
            this.BtnLOSUpdate.IsEnabled = true;
            this.PostChargesBusyIndicator.IsBusy = false;
            this.BtnSave.IsEnabled = true;
            if (this.BtnSaveToBilling.Visibility == System.Windows.Visibility.Visible)
            {
                this.BtnSaveToBilling.IsEnabled = true;
                this.BtnApproveAndSubmitClaims.IsEnabled = true;
            }
            this.RadGvCPTDiagnosis.IsEnabled = true;
            if (this.RadTabControl1.SelectedIndex == 0)
                this.BtnPrevious.Visibility = System.Windows.Visibility.Collapsed;
            else
                this.BtnPrevious.Visibility = System.Windows.Visibility.Visible;
            if (this.RadTabControl1.SelectedIndex == 3)
                this.BtnNext.Visibility = System.Windows.Visibility.Collapsed;
            else
                this.BtnNext.Visibility = System.Windows.Visibility.Visible;
            if (isRePostToBilling)
                this.BtnSave.Visibility = System.Windows.Visibility.Collapsed;
        }

        void ButtonDisable()
        {
            this.RadTabCPTCodes.IsEnabled = false;
            this.RadTabAssociation.IsEnabled = false;
            this.RadTabICDCodes.IsEnabled = false;
            this.RadTabInsuranceInformation.IsEnabled = false;
            this.BtnPrevious.IsEnabled = false;
            this.BtnNext.IsEnabled = false;
            this.PostChargesBusyIndicator.IsBusy = true;
            this.BtnSave.IsEnabled = false;
            if (this.BtnSaveToBilling.Visibility == System.Windows.Visibility.Visible)
            {
                this.BtnSaveToBilling.IsEnabled = false;
                this.BtnApproveAndSubmitClaims.IsEnabled = false;
            }
            this.BtnLOSUpdate.IsEnabled = false;
            this.RadGvCPTDiagnosis.IsEnabled = false;
            if (this.RadTabControl1.SelectedIndex == 0)
                this.BtnPrevious.Visibility = System.Windows.Visibility.Collapsed;
            else
                this.BtnPrevious.Visibility = System.Windows.Visibility.Visible;
            if (this.RadTabControl1.SelectedIndex == 3)
                this.BtnNext.Visibility = System.Windows.Visibility.Collapsed;
            else
                this.BtnNext.Visibility = System.Windows.Visibility.Visible;
        }

        private void BindPatientAppointment(int appointmentId)
        {
            if (postBillingDomainContext == null)
                postBillingDomainContext = new PostBillingDomainContext();
            var query = from appt in postBillingDomainContext.UpdateReferralDatesToAppointmentQuery(appointmentId) select appt;
            LoadOperation<appointment> loadApptOp = postBillingDomainContext.Load(query);
            loadApptOp.Completed += new EventHandler(loadAppointmentOp_Completed);
            loadBatchPostCharges.Add(loadApptOp);
        }

        void loadAppointmentOp_Completed(object sender, EventArgs e)
        {
            LoadOperation<appointment> loadOp = (LoadOperation<appointment>)sender;
            if (!loadOp.HasError)
            {
                if (loadOp.Entities.Count() == 0) return;
                appointmentObject = loadOp.Entities.FirstOrDefault();
                dpReferralStartDate.SelectedDate = appointmentObject.referral_start_date;
                dpReferralExpiryDate.SelectedDate = appointmentObject.referral_expiry_date;
                tbAllowedVisits.Value = appointmentObject.allowed_visits;
                tbVisitsUsed.Value = appointmentObject.visits_used;
            }
            else
            {
                loadOp.MarkErrorAsHandled();
                MessageBox.Show(loadOp.Error.Message);
                ButtonEnable();
            }
        }

        private void BindPatientPriorAuthorizationNumber()
        {
            PatientEligibilityVerificationDomainContext patientEligibilityVerificationDomainContext = new PatientEligibilityVerificationDomainContext();
            var query = from pev in patientEligibilityVerificationDomainContext.GetPEVActiveResultsQuery(cfAppointment != null ? cfAppointment.patientId : patientObject.patientId, 1) select pev;
            LoadOperation<patient_eligibility_verification> loadPEVOp = patientEligibilityVerificationDomainContext.Load(query);
            loadPEVOp.Completed += new EventHandler(loadPEVOp_Completed);
            loadBatchPostCharges.Add(loadPEVOp);
        }

        void loadPIPOp_Completed(object sender, EventArgs e)
        {
            LoadOperation<patient_insurance_provider> loadOp = (LoadOperation<patient_insurance_provider>)sender;
            if (!loadOp.HasError)
            {
                if (loadOp.Entities.Count() == 0) return;
                lstPIP = loadOp.Entities.ToList();
                if (!string.IsNullOrEmpty(loadOp.Entities.FirstOrDefault().prior_authorization_number))
                    priorAuthorizationNumber = loadOp.Entities.FirstOrDefault().prior_authorization_number;
                dpReferralExpiryDate.SelectedDate = loadOp.Entities.FirstOrDefault().referral_expiry_date;
                dpReferralStartDate.SelectedDate = loadOp.Entities.FirstOrDefault().referral_start_date;
                tbVisitsUsed.Value = loadOp.Entities.FirstOrDefault().visits_used;
                tbAllowedVisits.Value = loadOp.Entities.FirstOrDefault().allowed_visits;

            }
            else
            {
                loadOp.MarkErrorAsHandled();
                MessageBox.Show(loadOp.Error.Message);
                ButtonEnable();
            }
        }

        private void GetPatientInsuranceProvider()
        {
            if (postBillingDomainContext == null)
                postBillingDomainContext = new PostBillingDomainContext();
            var query = from pip in postBillingDomainContext.GetPatient_Insurance_ProviderQuery(cfAppointment != null ? cfAppointment.patientId : patientObject.patientId) where pip.order == 1 select pip;
            LoadOperation<patient_insurance_provider> loadPIPOp = postBillingDomainContext.Load(query);
            loadPIPOp.Completed += new EventHandler(loadPIPOp_Completed);
            loadBatchPostCharges.Add(loadPIPOp);
        }

        void loadPEVOp_Completed(object sender, EventArgs e)
        {
            LoadOperation<patient_eligibility_verification> loadOp = (LoadOperation<patient_eligibility_verification>)sender;
            if (!loadOp.HasError)
            {
                if (loadOp.Entities.Count() > 0)
                {
                    if (!string.IsNullOrEmpty(loadOp.Entities.FirstOrDefault().prior_authorization_number))
                        priorAuthorizationNumber = loadOp.Entities.FirstOrDefault().prior_authorization_number;
                }
            }
            else
            {
                loadOp.MarkErrorAsHandled();
                MessageBox.Show(loadOp.Error.Message);
                ButtonEnable();
            }
        }

        private void BindPatientARType()
        {
            if (postBillingDomainContext == null)
                postBillingDomainContext = new PostBillingDomainContext();
            var queryArType = from pArType in postBillingDomainContext.GetPatientARTypeInfoQuery(cfAppointment != null ? cfAppointment.patientId : patientObject.patientId) select pArType;
            LoadOperation<CustomFormattedARType> loadArTypeOp = postBillingDomainContext.Load(queryArType);
            loadArTypeOp.Completed += new EventHandler(loadArTypeOp_Completed);
            loadBatchPostCharges.Add(loadArTypeOp);
        }

        void loadArTypeOp_Completed(object sender, EventArgs e)
        {
            LoadOperation<CustomFormattedARType> loadOp = (LoadOperation<CustomFormattedARType>)sender;
            if (!loadOp.HasError)
            {
                if (loadOp.Entities.Count() > 0)
                {
                    tbPatientInsuranceCompany.Text = loadOp.Entities.FirstOrDefault().insuranceCompany;
                    tbPatientICARType.Text = loadOp.Entities.FirstOrDefault().arType;
                }
            }
            else
            {
                loadOp.MarkErrorAsHandled();
                MessageBox.Show(loadOp.Error.Message);
                ButtonEnable();
            }
        }

        private void loadInsurance()
        {
            if (postBillingDomainContext == null)
                postBillingDomainContext = new PostBillingDomainContext();
            var query = from insurance in postBillingDomainContext.GetCustomFormattedInsuranceQuery(patientObject != null ? patientObject.patientId : cfAppointment.patientId, 0)
                        select insurance;
            LoadOperation<CustomFormattedInsurance> loadInsuranceOp = postBillingDomainContext.Load(query);
            loadInsuranceOp.Completed += new EventHandler(loadInsuranceOp_Completed);
            loadBatchPostCharges.Add(loadInsuranceOp);
        }

        void loadInsuranceOp_Completed(object sender, EventArgs e)
        {
            LoadOperation<CustomFormattedInsurance> loadOp = (LoadOperation<CustomFormattedInsurance>)sender;
            if (!loadOp.HasError)
            {
                if (loadOp.Entities.Count() > 0)
                {

                    foreach (CustomFormattedInsurance insuranceObj in loadOp.Entities)
                    {
                        if (insuranceObj.bill_header_id != null)
                            this.billHeaderId = (int)insuranceObj.bill_header_id;
                        if (insuranceObj.order.Equals(1))
                        {
                            lblPrimaryInsuranceCode.Text = insuranceObj.insurance_provider_code;
                            lblPrimaryInsurancePayerId.Text = insuranceObj.insurance_provider_payer_id;
                            lblPrimaryInsuranceCategory.Text = insuranceObj.insurance_provider_category;
                            lblPrimaryInsuranceName.Text = insuranceObj.insurance_name;
                            lblPrimaryInsuranceGroupNumber.Text = insuranceObj.group_number;
                            lblPrimaryInsurancePolicyNumber.Text = insuranceObj.insurance_policy_number;
                            ChkAs1.IsChecked = insuranceObj.accept_assignment;
                            if (insuranceObj.other_claim_id != null)
                                OtherClaimIDP.Text = insuranceObj.other_claim_id;

                        }
                        if (insuranceObj.order.Equals(2))
                        {
                            lblSecondaryInsuranceCode.Text = insuranceObj.insurance_provider_code;
                            lblSecondaryInsurancePayerId.Text = insuranceObj.insurance_provider_payer_id;
                            lblSecondaryInsuranceCategory.Text = insuranceObj.insurance_provider_category;
                            lblSecondaryInsuranceName.Text = insuranceObj.insurance_name;
                            lblSecondaryInsuranceGroupNumber.Text = insuranceObj.group_number;
                            lblSecondaryInsurancePolicyNumber.Text = insuranceObj.insurance_policy_number;
                            ChkAs2.IsChecked = insuranceObj.accept_assignment;

                            if (insuranceObj.other_claim_id != null)
                                OtherClaimIDS.Text = insuranceObj.other_claim_id;
                        }
                        if (insuranceObj.order.Equals(3))
                        {
                            lblTertiaryInsuranceCode.Text = insuranceObj.insurance_provider_code;
                            lblTertiaryInsurancePayerId.Text = insuranceObj.insurance_provider_payer_id;
                            lblTertiaryInsuranceCategory.Text = insuranceObj.insurance_provider_category;
                            lblTertiaryInsuranceName.Text = insuranceObj.insurance_name;
                            lblTertiaryInsuranceGroupNumber.Text = insuranceObj.group_number;
                            lblTertiaryInsurancePolicyNumber.Text = insuranceObj.insurance_policy_number;

                            ChkAs3.IsChecked = insuranceObj.accept_assignment;
                            if (insuranceObj.other_claim_id != null)
                                OtherClaimIDT.Text = insuranceObj.other_claim_id;
                        }
                    }
                }
            }
            else
            {
                loadOp.MarkErrorAsHandled();
                MessageBox.Show(loadOp.Error.Message);
                ButtonEnable();
            }
        }
        private void GetModifiers()
        {
            ModifierDomainContext modifierDomainContext = new ModifierDomainContext();
            InvokeOperation invokeMCOp = modifierDomainContext.GetModifierCodes();
            invokeMCOp.Completed += new EventHandler(invokeMCOp_Completed);

        }

        void invokeMCOp_Completed(object sender, EventArgs e)
        {
            try
            {
                InvokeOperation invokeOp = (InvokeOperation)sender;
                if (!invokeOp.HasError)
                {
                    if (invokeOp.Value != null)
                        enumModifier = (IEnumerable<string>)invokeOp.Value;
                }
                else
                {
                    invokeOp.MarkErrorAsHandled();
                    MessageBox.Show(invokeOp.Error.Message);
                    ButtonEnable();
                }

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
                ButtonEnable();
            }
        }

        private void DdlFacility_SelectionChanged(object sender, Telerik.Windows.Controls.SelectionChangedEventArgs e)
        {
            BindPhysicians(int.Parse(DdlFacility.SelectedValue.ToString()));
            isFacilityChanged = true;
            this.BtnSaveToBilling.Visibility = System.Windows.Visibility.Collapsed;
            this.BtnApproveAndSubmitClaims.Visibility = System.Windows.Visibility.Collapsed;
            //this.BtnSaveAndPrintHCFA.Visibility = System.Windows.Visibility.Collapsed;
        }



        private void GetProblemList()
        {
            var query = from pl in postBillingDomainContext.GetMr_problem_listQuery() where pl.patient_id == (patientObject == null ? cfAppointment.patientId : patientObject.patientId) select pl;
            LoadOperation<mr_problem_list> loadPLOp = postBillingDomainContext.Load(query);
            loadPLOp.Completed += new EventHandler(loadPLOp_Completed);
            loadBatchPostCharges.Add(loadPLOp);
        }

        void loadPLOp_Completed(object sender, EventArgs e)
        {
            try
            {

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }
        private void BindPostChargeGrid()
        {
            //postCharges postChargesObj = new postCharges();
            //postChargesObj.cpt_code = "93005";
            //postChargesObj.cpt_code_description = "Electrocardiogram, routine ECG with at least 12 leads; tracing only, without interpretation and repo";
            //postChargesColln.Add(postChargesObj);

            //postChargesObj = new postCharges();
            //postChargesObj.cpt_code = "20610";
            //postChargesObj.cpt_code_description = "Injection, joint, major";
            //postChargesColln.Add(postChargesObj);

            //this.RadGvPostCharges.ItemsSource = postChargesColln;

        }

        public class postCharges
        {
            public string cpt_code { get; set; }
            public string cpt_code_description { get; set; }
        }

        private void BtnApproveAndSubmitClaims_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                isButonApproveAndSubmittedClicked = true;
                if (IsCPTDAValid())
                {
                    ButtonDisable();
                    PostChargesBusyIndicator.BusyContent = "Creating superbill...";
                    if (cfAppointment != null)
                        SaveUpdateConsultation();
                    else
                        CheckAndAddAppointment();
                    isButonSaveClicked = false;
                    isButonSaveOnlyClicked = false;
                }
                else
                {
                    isButonApproveAndSubmittedClicked = false;
                    radCPTDAExpander.Visibility = System.Windows.Visibility.Visible;
                    radCPTDAExpander.IsExpanded = true;
                }

            }
            catch (Exception ex)
            {
                InformationWindow iw = new InformationWindow(ex.Message);
                iw.Show();
                ButtonEnable();
            }
        }

        bool IsCPTDAValid()
        {
            spErrors.Children.Clear();
            string errorMessage = string.Empty;
            try
            {
                Dictionary<string, int> dicCheckCPTICDCodesAssociation = new Dictionary<string, int>();
                Dictionary<string, int> dicCPTICDCodesAssociatedMultipelTimes = new Dictionary<string, int>();
                foreach (CustomFormattedCPTDiagnosisAssociation cfcptda in lstcurrent_custom_cpt_diagnosis_association)
                {
                    bool hasCPTHeader = false;
                    if (!cfcptda.assessment_diagnosis_code1_checked &&
                        !cfcptda.assessment_diagnosis_code2_checked &&
                        !cfcptda.assessment_diagnosis_code3_checked &&
                        !cfcptda.assessment_diagnosis_code4_checked &&
                        !cfcptda.assessment_diagnosis_code5_checked &&
                        !cfcptda.assessment_diagnosis_code6_checked &&
                        !cfcptda.assessment_diagnosis_code7_checked &&
                        !cfcptda.assessment_diagnosis_code8_checked &&
                        !cfcptda.assessment_diagnosis_code9_checked &&
                        !cfcptda.assessment_diagnosis_code10_checked &&
                        !cfcptda.assessment_diagnosis_code11_checked &&
                        !cfcptda.assessment_diagnosis_code12_checked)
                    {
                        AddSPChildren(cfcptda.cpt_code + " : ", 0);
                        hasCPTHeader = true;
                        AddSPChildren("Please select at least one diagnosis code.", 15);
                    }
                    if (cfcptda.cpt_code_modifier1 != null && cfcptda.cpt_code_modifier1.ToString().Trim().Length > 0)
                    {
                        if (Array.IndexOf(enumModifier.ToArray(), cfcptda.cpt_code_modifier1.ToString()) == -1)
                        {
                            if (!hasCPTHeader)
                            {
                                AddSPChildren(cfcptda.cpt_code + " : ", 0);
                                hasCPTHeader = true;
                            }
                            AddSPChildren("'" + cfcptda.cpt_code_modifier1.ToString() + "' is not a valid Modifier. Please enter a valid modifier.", 15);
                        }
                    }

                    if (cfcptda.cpt_code_modifier2 != null && cfcptda.cpt_code_modifier2.ToString().Trim().Length > 0)
                    {
                        if (Array.IndexOf(enumModifier.ToArray(), cfcptda.cpt_code_modifier2.ToString()) == -1)
                        {
                            if (!hasCPTHeader)
                            {
                                AddSPChildren(cfcptda.cpt_code + " : ", 0);
                                hasCPTHeader = true;
                            }
                            AddSPChildren("'" + cfcptda.cpt_code_modifier2.ToString() + "' is not a valid Modifier. Please enter a valid modifier.", 15);
                        }
                    }

                    if (cfcptda.cpt_code_modifier3 != null && cfcptda.cpt_code_modifier3.ToString().Trim().Length > 0)
                    {
                        if (Array.IndexOf(enumModifier.ToArray(), cfcptda.cpt_code_modifier3.ToString()) == -1)
                        {
                            if (!hasCPTHeader)
                            {
                                AddSPChildren(cfcptda.cpt_code + " : ", 0);
                                hasCPTHeader = true;
                            }
                            AddSPChildren("'" + cfcptda.cpt_code_modifier3.ToString() + "' is not a valid Modifier. Please enter a valid modifier.", 15);
                        }
                    }

                    if (cfcptda.cpt_code_modifier4 != null && cfcptda.cpt_code_modifier4.ToString().Trim().Length > 0)
                    {
                        if (Array.IndexOf(enumModifier.ToArray(), cfcptda.cpt_code_modifier4.ToString()) == -1)
                        {
                            if (!hasCPTHeader)
                            {
                                AddSPChildren(cfcptda.cpt_code + " : ", 0);
                                hasCPTHeader = true;
                            }
                            AddSPChildren("'" + cfcptda.cpt_code_modifier4.ToString() + "' is not a valid Modifier. Please enter a valid modifier.", 15);
                        }
                    }

                    if (cfcptda.service_start_date != null && cfcptda.service_end_date != null)
                    {
                        if (cfcptda.service_start_date.Value > cfcptda.service_end_date.Value)
                        {
                            if (!hasCPTHeader)
                            {
                                AddSPChildren(cfcptda.cpt_code + " : ", 0);
                                hasCPTHeader = true;
                            }
                            AddSPChildren("From date cannot be greater than To date.", 15);
                        }
                    }

                    if (cfcptda.decimalunits.ToString().Trim().Length == 0)
                    {
                        if (!hasCPTHeader)
                        {
                            AddSPChildren(cfcptda.cpt_code + " : ", 0);
                            hasCPTHeader = true;
                        }
                        AddSPChildren("Please enter units.", 15);
                    }

                    if (cfcptda.posc.ToString().Trim().Length == 0)
                    {
                        if (!hasCPTHeader)
                        {
                            AddSPChildren(cfcptda.cpt_code + " : ", 0);
                            hasCPTHeader = true;
                        }
                        AddSPChildren("Please enter Place of Service.", 15);
                    }
                    else
                    {

                        if (enumPOS.Where(q => q.code == Convert.ToInt32(cfcptda.posc)).FirstOrDefault() == null)
                        {
                            if (!hasCPTHeader)
                            {
                                AddSPChildren(cfcptda.cpt_code + " : ", 0);
                                hasCPTHeader = true;
                            }
                            AddSPChildren("Please enter valid Place of Service code.", 15);
                        }
                    }

                    if (cfcptda.modify_unit_charge && cfcptda.modified_procedure_unit_charge.ToString().Length == 0)
                    {
                        if (!hasCPTHeader)
                        {
                            AddSPChildren(cfcptda.cpt_code + " : ", 0);
                            hasCPTHeader = true;
                        }
                        AddSPChildren("Please enter modify unit charge.", 15);
                    }

                    if (isButonApproveAndSubmittedClicked)
                    {
                        if (!flagSelfPay)
                        {
                            if ((cfcptda.modify_unit_charge && (cfcptda.modified_procedure_unit_charge == null ? 0 : cfcptda.modified_procedure_unit_charge) == 0) || (!cfcptda.modify_unit_charge && (cfcptda.procedure_unit_charge == null ? 0 : cfcptda.procedure_unit_charge) == 0))
                            {
                                if (!hasCPTHeader)
                                    AddSPChildren(cfcptda.cpt_code + " : ", 0);
                                AddSPChildren("Unit charge must be greater than '$0.00'.", 15);
                            }
                        }
                    }

                    if (cfcptda.assessment_diagnosis_code1_checked && cfcptda.assessment_diagnosis_code1_id != null) if (!dicCheckCPTICDCodesAssociation.Keys.Contains(cfcptda.cpt_code + "," + cfcptda.assessment_diagnosis_code1_id.Value)) dicCheckCPTICDCodesAssociation.Add(cfcptda.cpt_code + "," + cfcptda.assessment_diagnosis_code1_id.Value, cfcptda.assessment_diagnosis_code1_id.Value);
                    if (cfcptda.assessment_diagnosis_code2_checked && cfcptda.assessment_diagnosis_code2_id != null) if (!dicCheckCPTICDCodesAssociation.Keys.Contains(cfcptda.cpt_code + "," + cfcptda.assessment_diagnosis_code2_id.Value)) dicCheckCPTICDCodesAssociation.Add(cfcptda.cpt_code + "," + cfcptda.assessment_diagnosis_code2_id.Value, cfcptda.assessment_diagnosis_code2_id.Value);
                    if (cfcptda.assessment_diagnosis_code3_checked && cfcptda.assessment_diagnosis_code3_id != null) if (!dicCheckCPTICDCodesAssociation.Keys.Contains(cfcptda.cpt_code + "," + cfcptda.assessment_diagnosis_code3_id.Value)) dicCheckCPTICDCodesAssociation.Add(cfcptda.cpt_code + "," + cfcptda.assessment_diagnosis_code3_id.Value, cfcptda.assessment_diagnosis_code3_id.Value);
                    if (cfcptda.assessment_diagnosis_code4_checked && cfcptda.assessment_diagnosis_code4_id != null) if (!dicCheckCPTICDCodesAssociation.Keys.Contains(cfcptda.cpt_code + "," + cfcptda.assessment_diagnosis_code4_id.Value)) dicCheckCPTICDCodesAssociation.Add(cfcptda.cpt_code + "," + cfcptda.assessment_diagnosis_code4_id.Value, cfcptda.assessment_diagnosis_code4_id.Value);
                    if (cfcptda.assessment_diagnosis_code5_checked && cfcptda.assessment_diagnosis_code5_id != null) if (!dicCheckCPTICDCodesAssociation.Keys.Contains(cfcptda.cpt_code + "," + cfcptda.assessment_diagnosis_code5_id.Value)) dicCheckCPTICDCodesAssociation.Add(cfcptda.cpt_code + "," + cfcptda.assessment_diagnosis_code5_id.Value, cfcptda.assessment_diagnosis_code5_id.Value);
                    if (cfcptda.assessment_diagnosis_code6_checked && cfcptda.assessment_diagnosis_code6_id != null) if (!dicCheckCPTICDCodesAssociation.Keys.Contains(cfcptda.cpt_code + "," + cfcptda.assessment_diagnosis_code6_id.Value)) dicCheckCPTICDCodesAssociation.Add(cfcptda.cpt_code + "," + cfcptda.assessment_diagnosis_code6_id.Value, cfcptda.assessment_diagnosis_code6_id.Value);
                    if (cfcptda.assessment_diagnosis_code7_checked && cfcptda.assessment_diagnosis_code7_id != null) if (!dicCheckCPTICDCodesAssociation.Keys.Contains(cfcptda.cpt_code + "," + cfcptda.assessment_diagnosis_code7_id.Value)) dicCheckCPTICDCodesAssociation.Add(cfcptda.cpt_code + "," + cfcptda.assessment_diagnosis_code7_id.Value, cfcptda.assessment_diagnosis_code7_id.Value);
                    if (cfcptda.assessment_diagnosis_code8_checked && cfcptda.assessment_diagnosis_code8_id != null) if (!dicCheckCPTICDCodesAssociation.Keys.Contains(cfcptda.cpt_code + "," + cfcptda.assessment_diagnosis_code8_id.Value)) dicCheckCPTICDCodesAssociation.Add(cfcptda.cpt_code + "," + cfcptda.assessment_diagnosis_code8_id.Value, cfcptda.assessment_diagnosis_code8_id.Value);

                    if (cfcptda.assessment_diagnosis_code9_checked && cfcptda.assessment_diagnosis_code9_id != null) if (!dicCheckCPTICDCodesAssociation.Keys.Contains(cfcptda.cpt_code + "," + cfcptda.assessment_diagnosis_code9_id.Value)) dicCheckCPTICDCodesAssociation.Add(cfcptda.cpt_code + "," + cfcptda.assessment_diagnosis_code9_id.Value, cfcptda.assessment_diagnosis_code9_id.Value);
                    if (cfcptda.assessment_diagnosis_code10_checked && cfcptda.assessment_diagnosis_code10_id != null) if (!dicCheckCPTICDCodesAssociation.Keys.Contains(cfcptda.cpt_code + "," + cfcptda.assessment_diagnosis_code10_id.Value)) dicCheckCPTICDCodesAssociation.Add(cfcptda.cpt_code + "," + cfcptda.assessment_diagnosis_code10_id.Value, cfcptda.assessment_diagnosis_code10_id.Value);
                    if (cfcptda.assessment_diagnosis_code11_checked && cfcptda.assessment_diagnosis_code11_id != null) if (!dicCheckCPTICDCodesAssociation.Keys.Contains(cfcptda.cpt_code + "," + cfcptda.assessment_diagnosis_code11_id.Value)) dicCheckCPTICDCodesAssociation.Add(cfcptda.cpt_code + "," + cfcptda.assessment_diagnosis_code11_id.Value, cfcptda.assessment_diagnosis_code11_id.Value);
                    if (cfcptda.assessment_diagnosis_code12_checked && cfcptda.assessment_diagnosis_code12_id != null) if (!dicCheckCPTICDCodesAssociation.Keys.Contains(cfcptda.cpt_code + "," + cfcptda.assessment_diagnosis_code12_id.Value)) dicCheckCPTICDCodesAssociation.Add(cfcptda.cpt_code + "," + cfcptda.assessment_diagnosis_code12_id.Value, cfcptda.assessment_diagnosis_code12_id.Value);
                }
            }
            catch (Exception ex)
            {
                spErrors.Children.Clear();
                AddSPChildren("Please select one or more diagnosis codes, units, place of service for cpt code.", 0);
                RadTabControl1.SelectedIndex = 2;
                ButtonEnable();
            }
            if (dpAdmitDate.SelectedDate != null && dpDischargeDate.SelectedDate != null)
                if (dpAdmitDate.SelectedDate > dpDischargeDate.SelectedDate)
                {
                    InformationWindow iw = new InformationWindow("Admit date cannot be greater than Discharge date.");
                    iw.Show();
                    return false;
                }
            if (dpReferralStartDate.SelectedDate != null && dpReferralExpiryDate.SelectedDate != null)
                if (dpReferralStartDate.SelectedDate > dpReferralExpiryDate.SelectedDate)
                {
                    InformationWindow iw = new InformationWindow("Referral start date cannot be greater than Referral Expiration date.");
                    iw.Show();
                    return false;
                }
            if (spErrors.Children.Count() == 0)
                return true;
            else
            {
                RadTabControl1.SelectedIndex = 2;
                return false;
            }
        }

        void AddSPChildren(string errorMessage, int margin)
        {
            TextBlock tb = new TextBlock();
            tb.Text = errorMessage;
            if (margin > 0)
                tb.Margin = new Thickness(margin, 0, 0, 0);
            tb.Width = tb.ActualWidth + 10;
            tb.Height = tb.ActualHeight + 10;
            tb.Foreground = new SolidColorBrush(Colors.Red);
            spErrors.Children.Add(tb);
        }

        private void GetPlaceOfService()
        {
            CPTDiagnosisAssociationDomainContext cptDiagnosisAssociationDomainContext = new CPTDiagnosisAssociationDomainContext();
            var query = from x in cptDiagnosisAssociationDomainContext.GetCustomFormattedPOSQuery() select x;
            LoadOperation<CustomFormattedPOS> loadOp = cptDiagnosisAssociationDomainContext.Load(query);
            loadOp.Completed += new EventHandler(loadPOSOp_Completed);
            loadBatchPostCharges.Add(loadOp);
        }

        void loadPOSOp_Completed(object sender, EventArgs e)
        {
            LoadOperation<CustomFormattedPOS> loadOp = (LoadOperation<CustomFormattedPOS>)sender;
            if (loadOp.HasError)
            {
                loadOp.MarkErrorAsHandled();
                ButtonEnable();
            }
            else
            {
                enumPOS = loadOp.Entities;
            }
        }

        private void BindFacilities()
        {
            try
            {
                var query = from facilities in postBillingDomainContext.GetFacilitiesQuery()
                            select facilities;
                LoadOperation<facility> facilitiesload = postBillingDomainContext.Load(query);
                facilitiesload.Completed += new EventHandler(facilitiesload_Completed);
                loadBatchPostCharges.Add(facilitiesload);
                //facilitiesload.Completed += (sender, e) =>
                //{
                //    var loadOpCompleted = (LoadOperation<facility>)sender;
                //    if (loadOpCompleted.Entities.Count() == 0) return;
                //    DdlFacility.ItemsSource = loadOpCompleted.Entities;
                //    DdlFacility.DisplayMemberPath = "facility_name";
                //    DdlFacility.SelectedValuePath = "facility_id";
                //};
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
                ButtonEnable();
            }

        }

        void facilitiesload_Completed(object sender, EventArgs e)
        {
            var loadOpCompleted = (LoadOperation<facility>)sender;
            if (loadOpCompleted.HasError)
            {
                loadOpCompleted.MarkErrorAsHandled();
                InformationWindow iw = new InformationWindow(loadOpCompleted.Error.Message);
                iw.Show();
            }
            else
            {
                if (loadOpCompleted.Entities.Count() == 0) return;
                DdlFacility.ItemsSource = loadOpCompleted.Entities;
                DdlFacility.DisplayMemberPath = "facility_name";
                DdlFacility.SelectedValuePath = "facility_id";
                if (cfAppointment != null)
                    DdlFacility.SelectedValue = cfAppointment.facilityId;
                else
                    DdlFacility.SelectedIndex = 0;

            }
        }

        private void GetRVUValues()
        {
            try
            {
                InvokeOperation invokeOp = postBillingDomainContext.GetRVUValues(lstcurrent_custom_cpt_diagnosis_association, cfAppointment != null ? cfAppointment.patientId : patientObject.patientId, flagSelfPay);
                invokeOp.Completed += (sender, e) =>
                {
                    this.RadGvCPTDiagnosis.ItemsSource = null;
                    InvokeOperation invokeOpCompleted = (InvokeOperation)sender;
                    if (!invokeOpCompleted.HasError)
                    {
                        if (invokeOpCompleted.Value != null)
                        {
                            IEnumerable<CustomFormattedCPTDiagnosisAssociation> lst = (IEnumerable<CustomFormattedCPTDiagnosisAssociation>)invokeOpCompleted.Value;

                            lstcurrent_custom_cpt_diagnosis_association = lst.ToList();
                            lstPast_custom_cpt_diagnosis_association = lst.ToList();
                            this.RadGvCPTDiagnosis.ItemsSource = lst.ToList();
                            this.RadGvCPTDiagnosis.Rebind();
                        }
                        else
                            this.RadGvCPTDiagnosis.ItemsSource = null;
                    }
                    else
                    {
                        invokeOpCompleted.MarkErrorAsHandled();
                        MessageBox.Show(invokeOpCompleted.Error.Message);
                    }
                    ButtonEnable();
                };
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
                ButtonEnable();
            }

        }

        private void GetEncounterDetails(int encounterId)
        {
            try
            {
                var query = from encounter in postBillingDomainContext.GetPatientEncounterDetailsQuery(encounterId)
                            select encounter;

                LoadOperation<mr_patient_encounter> loadEncounterOp = postBillingDomainContext.Load(query);
                loadEncounterOp.Completed += new EventHandler(loadEncounterOp_Completed);
                loadBatchPostCharges.Add(loadEncounterOp);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
                ButtonEnable();
            }
        }

        void loadEncounterOp_Completed(object sender, EventArgs e)
        {
            try
            {
                var loadOpCompleted = (LoadOperation<mr_patient_encounter>)sender;
                if (loadOpCompleted.HasError)
                {
                    loadOpCompleted.MarkErrorAsHandled();
                    InformationWindow iw = new InformationWindow(loadOpCompleted.Error.Message);
                    iw.Show();
                }
                else
                {
                    var loadEncounterOpCompleted = (LoadOperation<mr_patient_encounter>)sender;
                    BindEncounterDetails(loadEncounterOpCompleted);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
                ButtonEnable();
            }
        }

        private void BindCurrentAppointment(int appointmentId)
        {

            var query = from appt in postBillingDomainContext.GetCFAppointmentDetailsQuery(appointmentId) select appt;
            LoadOperation<CustomFormattedAppointmentsToBePosted> loadPCOp = postBillingDomainContext.Load(query);
            //loadPCOp.Completed += new EventHandler(loadPCOp_Completed);
            loadBatchPostCharges.Add(loadPCOp);

            loadPCOp.Completed += (sender, e) =>
            {
                var loadOpCompleted = (LoadOperation<CustomFormattedAppointmentsToBePosted>)sender;
                if (loadOpCompleted.HasError)
                {
                    loadOpCompleted.MarkErrorAsHandled();
                    InformationWindow iw = new InformationWindow(loadOpCompleted.Error.Message);
                    iw.Show();
                    ButtonEnable();
                }
                else
                {
                    if (loadOpCompleted.Entities.Count() == 0) return;
                    cfAppointment = loadOpCompleted.Entities.FirstOrDefault();
                }
            };
        }

        void loadPCOp_Completed(object sender, EventArgs e)
        {

        }

        private void GetAppointmentDetails(int appointmentId)
        {
            try
            {
                var query = from appoinments in postBillingDomainContext.GetAppointmentDetailsQuery(appointmentId)
                            select appoinments;

                LoadOperation<scheduled_slot> loadApptOp = postBillingDomainContext.Load(query);
                loadApptOp.Completed += new EventHandler(loadApptOp_Completed);
                loadBatchPostCharges.Add(loadApptOp);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
                ButtonEnable();
            }
        }

        void loadApptOp_Completed(object sender, EventArgs e)
        {
            try
            {
                var loadOpCompleted = (LoadOperation<scheduled_slot>)sender;
                if (loadOpCompleted.HasError)
                {
                    loadOpCompleted.MarkErrorAsHandled();
                    InformationWindow iw = new InformationWindow(loadOpCompleted.Error.Message);
                    iw.Show();
                    ButtonEnable();
                }
                else
                {
                    var loadApptOpCompleted = (LoadOperation<scheduled_slot>)sender;
                    if (loadApptOpCompleted.Entities.Count() > 0)
                        patientScheduledSlot = loadApptOpCompleted.Entities.FirstOrDefault();
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
                ButtonEnable();
            }
        }

        private void BindCurrentCPTADCodesAssociation()
        {
            CPTDiagnosisAssociationDomainContext cptDiagnosisAssociationDomainContext = new CPTDiagnosisAssociationDomainContext();
            InvokeOperation invokeOp = cptDiagnosisAssociationDomainContext.GetCPTDiagnosisAssociation(mrPatientEncounter == null ? encounterId : mrPatientEncounter.mr_patient_encounter_id, skipLevelOfService, computedLevelOfService);
            invokeOp.Completed += new EventHandler(bcptdaLoad_Completed);
        }

        void bcptdaLoad_Completed(object sender, EventArgs e)
        {
            try
            {
                this.RadGvCPTDiagnosis.ItemsSource = null;
                InvokeOperation invokeOp = (InvokeOperation)sender;
                if (!invokeOp.HasError)
                {
                    if (invokeOp.Value != null)
                    {
                        isIcdCollectionChanged = false;
                        isCptCollectionChanged = false;
                        IEnumerable<CustomFormattedCPTDiagnosisAssociation> lst = (IEnumerable<CustomFormattedCPTDiagnosisAssociation>)invokeOp.Value;
                        RadGvCPTDiagnosis.ItemsSource = lst.ToList();
                        lstcurrent_custom_cpt_diagnosis_association = lst.ToList();
                    }
                    else
                        RadGvCPTDiagnosis.ItemsSource = null;
                }
                else
                {
                    invokeOp.MarkErrorAsHandled();
                    MessageBox.Show(invokeOp.Error.Message);
                }

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void BindEncounterDetails(LoadOperation<mr_patient_encounter> loadEncounterOpCompleted)
        {
            foreach (mr_patient_encounter encounter in loadEncounterOpCompleted.Entities)
            {
                mrPatientEncounter = encounter;

                tbChiefComplaint.Value = encounter.chief_complaint;
                RdpDateOfService.SelectedDate = encounter.date_created;
                tbPatientDateOfService.Text = encounter.date_created.Month.ToString("00") + "/" + encounter.date_created.Day.ToString("00") + "/" + encounter.date_created.Year.ToString("0000");
                List<mr_problem_list> problemList = encounter.mr_problem_list.Where(x => x.status == "Active").ToList();
                //if (problemList != null && problemList.Count > 0)
                //{
                ICDCodeDomainContext icd9DiagnosisDomainContext = new ICDCodeDomainContext();
                //var query = from icd9 in icd9DiagnosisDomainContext.GetIcd9_codeQuery()
                //            select icd9;

                //ICDCodes icdcodes = new ICDCodes();
                //icdcodes.icdCode1 = problemList.ElementAtOrDefault(0) != null ? problemList.ElementAtOrDefault(0).icd9_code_id : null;
                //icdcodes.icdCode2 = problemList.ElementAtOrDefault(1) != null ? problemList.ElementAtOrDefault(1).icd9_code_id : null;
                //icdcodes.icdCode3 = problemList.ElementAtOrDefault(2) != null ? problemList.ElementAtOrDefault(2).icd9_code_id : null;
                //icdcodes.icdCode4 = problemList.ElementAtOrDefault(3) != null ? problemList.ElementAtOrDefault(3).icd9_code_id : null;
                //icdcodes.icdCode5 = problemList.ElementAtOrDefault(4) != null ? problemList.ElementAtOrDefault(4).icd9_code_id : null;
                //icdcodes.icdCode6 = problemList.ElementAtOrDefault(5) != null ? problemList.ElementAtOrDefault(5).icd9_code_id : null;
                //icdcodes.icdCode7 = problemList.ElementAtOrDefault(6) != null ? problemList.ElementAtOrDefault(6).icd9_code_id : null;
                //icdcodes.icdCode8 = problemList.ElementAtOrDefault(7) != null ? problemList.ElementAtOrDefault(7).icd9_code_id : null;

                //icdcodes.icdCode9 = problemList.ElementAtOrDefault(8) != null ? problemList.ElementAtOrDefault(8).icd9_code_id : null;
                //icdcodes.icdCode10 = problemList.ElementAtOrDefault(9) != null ? problemList.ElementAtOrDefault(9).icd9_code_id : null;
                //icdcodes.icdCode11 = problemList.ElementAtOrDefault(10) != null ? problemList.ElementAtOrDefault(10).icd9_code_id : null;
                //icdcodes.icdCode12 = problemList.ElementAtOrDefault(11) != null ? problemList.ElementAtOrDefault(11).icd9_code_id : null;

                //query = query.Where(q => q.ICD9_code_id == icdcodes.icdCode1 || q.ICD9_code_id == icdcodes.icdCode2 || q.ICD9_code_id == icdcodes.icdCode3 || q.ICD9_code_id == icdcodes.icdCode4 || q.ICD9_code_id == icdcodes.icdCode5 || q.ICD9_code_id == icdcodes.icdCode6 || q.ICD9_code_id == icdcodes.icdCode7 || q.ICD9_code_id == icdcodes.icdCode8 || q.ICD9_code_id == icdcodes.icdCode9 || q.ICD9_code_id == icdcodes.icdCode10 || q.ICD9_code_id == icdcodes.icdCode11 || q.ICD9_code_id == icdcodes.icdCode12);

                //LoadOperation<icd9_code> loadICD9CodeByEncounterOp = icd9DiagnosisDomainContext.Load(query);
                //loadICD9CodeByEncounterOp.Completed += new EventHandler(loadICD9CodeByEncounterOp_Completed);
                //loadBatchPostCharges.Add(loadICD9CodeByEncounterOp);

                System.ServiceModel.DomainServices.Client.InvokeOperation getICD10EffectiveLoad = new ICDCodeDomainContext().IsICD10Effective(mrPatientEncounter.mr_patient_encounter_id, mrPatientEncounter.patient_id);
                getICD10EffectiveLoad.Completed += new EventHandler(getICD10EffectiveLoad_Completed);

                var querySelectedIcd = from icd9 in icd9DiagnosisDomainContext.GetSelectedIcdCodesQuery(mrPatientEncounter.mr_patient_encounter_id)
                                       select icd9;

                LoadOperation<CustomFormattedICDCrossmapSelected> loadSelectedIcdByEncounterOp = icd9DiagnosisDomainContext.Load(querySelectedIcd);
                loadSelectedIcdByEncounterOp.Completed += new EventHandler(loadSelectedIcdByEncounterOp_Completed);
                loadBatchPostCharges.Add(loadSelectedIcdByEncounterOp);
                //}
                //if (encounter.mr_plan_procedure.Count > 0)
                //{
                var query = from cptCodes in postBillingDomainContext.GetEncounterCptCodesQuery(encounter.mr_patient_encounter_id) select cptCodes;
                LoadOperation<cpt_code> loadEncounterCptCodeOp = postBillingDomainContext.Load(query);
                loadEncounterCptCodeOp.Completed += new EventHandler(loadEncounterCptCodeOp_Completed);
                loadBatchPostCharges.Add(loadEncounterCptCodeOp);
                //}

            }



            if (mrPatientEncounter.mr_patient_encounter_cpt_diagnosis_association.Count == 0)
            {
                if (mrPatientEncounter != null && !string.IsNullOrEmpty(mrPatientEncounter.level_of_service_cpt_code))
                {
                    TxtLevelOfSerivce.Text = mrPatientEncounter.level_of_service_cpt_code;
                    AddLOSCPTTableData();
                }
            }
            else
            {
                BindCurrentCPTADCodesAssociation();
            }

            LoadAdditionalBillingDetails(mrPatientEncounter.mr_patient_encounter_id);
            // LoadFormFields(mrPatientEncounter.mr_patient_encounter_id);
        }

        void LoadFormFields(int encounterId)
        {
            try
            {


                var Query = postBillingDomainContext.GetSectionsForEncounterQuery(encounterId);
                LoadOperation<mr_form_field> loaOp = postBillingDomainContext.Load(Query);
                loaOp.Completed += loaOp_Completed;

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
                ButtonEnable();
            }

        }
        void loaOp_Completed(object sender, EventArgs e)
        {
            try
            {
                LoadOperation<mr_form_field> loadABDOp = (LoadOperation<mr_form_field>)sender;

                if (loadABDOp.Entities.Count() > 0)
                {


                }
            }
            catch (Exception ex)
            {

            }
        }
        void getICD10EffectiveLoad_Completed(object sender, EventArgs e)
        {
            try
            {
                InvokeOperation<bool> icd10 = (InvokeOperation<bool>)sender;
                saveIcd10 = icd10.Value;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
                ButtonEnable();
            }
        }

        void loadSelectedIcdByEncounterOp_Completed(object sender, EventArgs e)
        {
            try
            {

                //LoadOperation<CustomFormattedIcdImoResult> loadICD9Op = (LoadOperation<CustomFormattedIcdImoResult>)sender;
                LoadOperation<CustomFormattedICDCrossmapSelected> loadICD9Op = (LoadOperation<CustomFormattedICDCrossmapSelected>)sender;
                if (!loadICD9Op.HasError)
                {
                    icdWidget.mrDxCollectionCustomObjects = loadICD9Op.Entities.Select(q => new CustomFormattedIcdImoResult() { code = q.code, code_id = q.code_id, description = q.description }).ToObservableCollection();
                    //icdWidget.mrDxCollectionCustomObjects = loadICD9Op.Entities.ToObservableCollection<CustomFormattedIcdImoResult>();
                    /////    icdWidget.mrDxCollectionCustomObjects = (ObservableCollection<CustomFormattedIcdImoResult>)loadICD9Op.Entities.ToObservableCollection<CustomFormattedICDCrossmapSelected>().Select( q=> new CustomFormattedIcdImoResult() { code = q.code, code_id = q.code_id, description = q.description});
                    ////icdWidget.mrDxCollection = loadICD9Op.Entities.ToObservableCollection<CustomFormattedICDCrossmapSelected>();
                    //BindIcdToCustomObject();
                    //icdWidget.mrDxCollectionCustomObjects.CollectionChanged += new System.Collections.Specialized.NotifyCollectionChangedEventHandler(mrDxCollection_CollectionChanged);
                    isIcdCollectionChanged = true;
                    icdWidget.LboxICD9CodesSelected.ItemsSource = null;
                    // icdWidget.LboxICD9CodesSelected.ItemsSource = icdWidget.mrDxCollectionCustomObjects;
                    icdWidget._selectedCodes = icdWidget.mrDxCollectionCustomObjects;
                    icdWidget.LboxICD9CodesSelected.ItemsSource = icdWidget.mrDxCollectionCustomObjects;
                    icdWidget.mrDxCollectionCustomObjects.CollectionChanged += new System.Collections.Specialized.NotifyCollectionChangedEventHandler(mrICDxCollection_CollectionChanged);
                }
                else
                {
                    loadICD9Op.MarkErrorAsHandled();
                    MessageBox.Show(loadICD9Op.Error.Message);
                    ButtonEnable();
                }
            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
                ButtonEnable();
            }
        }

        void loadICD9CodeByEncounterOp_Completed(object sender, EventArgs e)
        {
            try
            {

                LoadOperation<icd9_code> loadICD9Op = (LoadOperation<icd9_code>)sender;
                //LoadOperation<CustomFormattedICDCrossmapSelected> loadICD9Op = (LoadOperation<CustomFormattedICDCrossmapSelected>)sender;
                if (!loadICD9Op.HasError)
                {
                    icdWidget.mrDxCollection = loadICD9Op.Entities.ToObservableCollection<icd9_code>();
                    //icdWidget.mrDxCollection = loadICD9Op.Entities.ToObservableCollection<CustomFormattedICDCrossmapSelected>();
                    //BindIcdToCustomObject();
                    icdWidget.mrDxCollectionCustomObjects.CollectionChanged += new System.Collections.Specialized.NotifyCollectionChangedEventHandler(mrDxCollection_CollectionChanged);
                    isIcdCollectionChanged = true;
                }
                else
                {
                    loadICD9Op.MarkErrorAsHandled();
                    MessageBox.Show(loadICD9Op.Error.Message);
                    ButtonEnable();
                }
            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
                ButtonEnable();
            }
        }

        private void BindIcdToCustomObject()
        {
            //icdWidget.LboxICD9CodesSelected.ItemsSource = null;
            //icdWidget.mrDxCollectionCustomObjects.Clear();
            //foreach (icd9_code icd9code in icdWidget.mrDxCollection)
            //{
            //    CustomFormattedICDCrossmapSelected customDiagnosisObject = new CustomFormattedICDCrossmapSelected();
            //    customDiagnosisObject.code_id = icd9code.ICD9_code_id;
            //    customDiagnosisObject.code = icd9code.code;
            //    customDiagnosisObject.description = icd9code.description;
            //    icdWidget.mrDxCollectionCustomObjects.Add(customDiagnosisObject);
            //}
            //  foreach (CustomFormattedICDCrossmapSelected icdcode in _selectedCodes)
            //foreach (icd9_code icd9code in icdWidget.mrDxCollection)
            //{
            //    CustomFormattedICDCrossmapSelected customDiagnosisObject = new CustomFormattedICDCrossmapSelected();



            //    customDiagnosisObject.code_id = (int)icd9code.ICD9_code_id;
            //    customDiagnosisObject.icd9_code = icd9code.icd9_code1;
            //    customDiagnosisObject.code = icd9code.icd9_code1;
            //    //customFormattedICDCrossmapSelected.icd9_description = addedItem.
            //    //customFormattedICDCrossmapSelected.icd9_short_desc
            //    //customFormattedICDCrossmapSelected.gem_icd9_code
            //    // customDiagnosisObject.icd10_id = (int)icd9code.icd10_id;
            //    //  customDiagnosisObject.icd10_code = icd9code.icd10_code;
            //    //customFormattedICDCrossmapSelected.is_hippa_approved
            //    customDiagnosisObject.icd10_long_desc = icd9code.description;
            //    customDiagnosisObject.description = icd9code.short_description;
            //    _selectedCodes.Add(customDiagnosisObject);
            //}


            //icdWidget.LboxICD9CodesSelected.ItemsSource = null;
            //// icdWidget.LboxICD9CodesSelected.ItemsSource = icdWidget.mrDxCollectionCustomObjects;
            //icdWidget.LboxICD9CodesSelected.ItemsSource = icdWidget._selectedCodes;

            icdWidget.LboxICD9CodesSelected.ItemsSource = null;
            icdWidget.mrDxCollectionCustomObjects.Clear();
            foreach (icd9_code icd9code in icdWidget.mrDxCollection)
            {
                CustomFormattedIcdImoResult customDiagnosisObject = new CustomFormattedIcdImoResult();
                customDiagnosisObject.code_id = icd9code.ICD9_code_id;
                customDiagnosisObject.code = icd9code.code;
                customDiagnosisObject.description = icd9code.description;
                icdWidget.mrDxCollectionCustomObjects.Add(customDiagnosisObject);
            }

            icdWidget.LboxICD9CodesSelected.ItemsSource = null;
            icdWidget.LboxICD9CodesSelected.ItemsSource = icdWidget.mrDxCollectionCustomObjects;

        }

        void loadEncounterCptCodeOp_Completed(object sender, EventArgs e)
        {
            try
            {

                LoadOperation<cpt_code> loadCptOp = (LoadOperation<cpt_code>)sender;
                if (!loadCptOp.HasError)
                {
                    //Socrates.Views.Charts.Widgets.CPTCodes cptWidget = (Socrates.Views.Charts.Widgets.CPTCodes)SpIcdCpt.Children.ElementAt(0);
                    cptWidget.mrDxCPTCollection = loadCptOp.Entities.ToObservableCollection<cpt_code>();
                    cptWidget.LboxCPTCodesSelected.ItemsSource = null;
                    cptWidget.LboxCPTCodesSelected.ItemsSource = cptWidget.mrDxCPTCollection;
                    cptWidget.LboxCPTCodesSelected.SelectedValuePath = "cpt_code1";
                    cptWidget.mrDxCPTCollection.CollectionChanged += new System.Collections.Specialized.NotifyCollectionChangedEventHandler(mrDxCPTCollection_CollectionChanged);
                    isCptCollectionChanged = true;
                }
                else
                {
                    loadCptOp.MarkErrorAsHandled();
                    MessageBox.Show(loadCptOp.Error.Message);
                    ButtonEnable();
                }
            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
                ButtonEnable();
            }
        }

        private void BindPhysicians(int facilityId)
        {
            try
            {
                var query = from u in postBillingDomainContext.GetPersonWithFacilityMinimumDetailsQuery(facilityId)
                            select u;
                LoadOperation<CustomFormattedPersonMinimumDetails> userload = postBillingDomainContext.Load(query);
                userload.Completed += new EventHandler(userload_Completed);
                loadBatchPostCharges.Add(userload);

                //userload.Completed += (sender, e) =>
                //{
                //    var loadOpCompleted = (LoadOperation<CustomFormattedPersonMinimumDetails>)sender;
                //    if (loadOpCompleted.Entities.Count() == 0) return;
                //    this.DdlPhysicianPstChrg.Items.Clear();
                //    this.DdlPhysicianPstChrg.ItemsSource = loadOpCompleted.Entities.Distinct();
                //};
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
                ButtonEnable();
            }

        }

        void userload_Completed(object sender, EventArgs e)
        {
            var loadOpCompleted = (LoadOperation<CustomFormattedPersonMinimumDetails>)sender;
            if (loadOpCompleted.HasError)
            {
                loadOpCompleted.MarkErrorAsHandled();
                InformationWindow iw = new InformationWindow(loadOpCompleted.Error.Message);
                iw.Show();
                ButtonEnable();
            }
            else
            {
                this.DdlPhysicianPstChrg.ItemsSource = null;
                if (loadOpCompleted.Entities.Count() == 0) return;
                this.DdlPhysicianPstChrg.ItemsSource = loadOpCompleted.Entities.Distinct();
            }
        }

        private void OKButton_Click(object sender, RoutedEventArgs e)
        {
            this.DialogResult = true;
        }

        private void CancelButton_Click(object sender, RoutedEventArgs e)
        {
            this.DialogResult = false;
        }

// update button function
        private void BtnLOSUpdate_Click(object sender, RoutedEventArgs e)
        {
            //service
            if (string.IsNullOrEmpty(TxtLevelOfSerivce.Text.Trim()))
            {
                InformationWindow iw = new InformationWindow("Please enter the level of service code.");
                iw.Show();
                return;
            }
            if (TxtLevelOfSerivce.Text.Trim() == computedLevelOfService)
                return;
            ButtonDisable();
            //if (!string.IsNullOrEmpty(TxtLevelOfSerivce.Text.Trim()))
            CheckCPTTableData();
            //else
            //{
            //CustomFormattedCPTDiagnosisAssociation cptOS = lstcurrent_custom_cpt_diagnosis_association.Where(q => q.is_cpt_level_of_service == true).FirstOrDefault();
            //if (cptOS != null)
            //{
            //    lstcurrent_custom_cpt_diagnosis_association.Remove(cptOS);
            //    computedLevelOfService = string.Empty;
            //    lstPast_custom_cpt_diagnosis_association = lstcurrent_custom_cpt_diagnosis_association;
            //    this.RadGvCPTDiagnosis.ItemsSource = lstcurrent_custom_cpt_diagnosis_association;
            //    this.RadGvCPTDiagnosis.Rebind();
            //}
            //ButtonEnable();
            //}
        }

        private void CheckCPTTableData()
        {
            CPTCodeDomainContext cptCodeDomainContext = new CPTCodeDomainContext();
            var query = from x in cptCodeDomainContext.GetCpt_codeQuery().Where(q => q.cpt_code1 == TxtLevelOfSerivce.Text.Trim()) select x;
            LoadOperation<cpt_code> ccloadOp = cptCodeDomainContext.Load(query);
            ccloadOp.Completed += (sender, e) =>
            {
                try
                {
                    LoadOperation<cpt_code> lOp = (LoadOperation<cpt_code>)sender;
                    if (lOp.HasError)
                    {
                        lOp.MarkErrorAsHandled();
                        ButtonEnable();
                    }
                    else
                    {
                        if (lOp.Entities.ToList().Count() > 0)
                        {
                            CustomFormattedCPTDiagnosisAssociation cptOS = lstcurrent_custom_cpt_diagnosis_association.Where(q => q.is_cpt_level_of_service == true).FirstOrDefault();
                            if (cptOS != null)
                            {
                                lstcurrent_custom_cpt_diagnosis_association.Remove(cptOS);
                                //if (cptOS.billersNoteId != null)
                                //    RemoveBillersNote(cptOS.billersNoteId.Value);
                            }
                            computedLevelOfService = lOp.Entities.ToList()[0].cpt_code1;
                            //Socrates.Views.Charts.Widgets.ICD9Codes icdWidget = (Socrates.Views.Charts.Widgets.ICD9Codes)SpIcdCpt.Children.ElementAt(2);
                            CustomFormattedCPTDiagnosisAssociation newcfcptda = new CustomFormattedCPTDiagnosisAssociation();
                            newcfcptda.cpt_code = computedLevelOfService;
                            newcfcptda.cpt_diagnosis_association_id = null;
                            newcfcptda.cpt_code_description = lOp.Entities.ToList()[0].description;
                            newcfcptda.service_start_date = RdpDateOfService.SelectedDate.Value;
                            newcfcptda.service_end_date = RdpDateOfService.SelectedDate.Value;
                            newcfcptda.current_date = DateTime.Now;
                            if (cfAppointment != null)
                                newcfcptda.posc = cfAppointment.placeOfServiceCode;
                            newcfcptda.units = "1";
                            newcfcptda.decimalunits = 1;
                            UpdateIcdChangesToCpt(ref newcfcptda, icdWidget);
                            newcfcptda.is_cpt_level_of_service = true;
                            newcfcptda.is_cpt_deleted = "Visible";
                            newcfcptda.insurance_prior_authorization_number = priorAuthorizationNumber;
                            lstcurrent_custom_cpt_diagnosis_association.Add(newcfcptda);
                            GetRVUValues();
                            //lstPast_custom_cpt_diagnosis_association = lstcurrent_custom_cpt_diagnosis_association;
                            //this.RadGvCPTDiagnosis.ItemsSource = lstcurrent_custom_cpt_diagnosis_association;
                            //this.RadGvCPTDiagnosis.Rebind();
                        }
                        else
                        { //computedLevelOfService
                            TxtLevelOfSerivce.Text = computedLevelOfService;
                            MessageBox.Show("Level of service cpt code not found.");
                            ButtonEnable();
                        }
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message);
                    ButtonEnable();
                }
            };
        }

        private void AddLOSCPTTableData()
        {
            CPTCodeDomainContext cptCodeDomainContext = new CPTCodeDomainContext();
            var query = from x in cptCodeDomainContext.GetCpt_codeQuery().Where(q => q.cpt_code1 == TxtLevelOfSerivce.Text.Trim()) select x;
            LoadOperation<cpt_code> ccloadOp = cptCodeDomainContext.Load(query);
            ccloadOp.Completed += new EventHandler(ccloadOp_Completed);
            loadBatchPostCharges.Add(ccloadOp);
        }

        void ccloadOp_Completed(object sender, EventArgs e)
        {
            try
            {
                LoadOperation<cpt_code> lOp = (LoadOperation<cpt_code>)sender;
                if (lOp.HasError)
                {
                    lOp.MarkErrorAsHandled();
                    ButtonEnable();
                }
                else
                {
                    if (lOp.Entities.ToList().Count() > 0)
                    {
                        CustomFormattedCPTDiagnosisAssociation cptOS = lstcurrent_custom_cpt_diagnosis_association.Where(q => q.is_cpt_level_of_service == true).FirstOrDefault();
                        if (cptOS != null)
                        {
                            lstcurrent_custom_cpt_diagnosis_association.Remove(cptOS);
                            //if (cptOS.billersNoteId != null)
                            //    RemoveBillersNote(cptOS.billersNoteId.Value);
                        }
                        // start from here
                        computedLevelOfService = lOp.Entities.ToList()[0].cpt_code1;
                        //Socrates.Views.Charts.Widgets.ICD9Codes icdWidget = (Socrates.Views.Charts.Widgets.ICD9Codes)SpIcdCpt.Children.ElementAt(2);
                        CustomFormattedCPTDiagnosisAssociation newcfcptda = new CustomFormattedCPTDiagnosisAssociation();
                        newcfcptda.cpt_code = computedLevelOfService;
                        newcfcptda.cpt_diagnosis_association_id = null;
                        newcfcptda.cpt_code_description = lOp.Entities.ToList()[0].description;
                        newcfcptda.service_start_date = RdpDateOfService.SelectedDate.Value;
                        newcfcptda.service_end_date = RdpDateOfService.SelectedDate.Value;
                        if (cfAppointment != null)
                            newcfcptda.posc = cfAppointment.placeOfServiceCode;
                        newcfcptda.units = "1";
                        newcfcptda.decimalunits = 1;
                        UpdateIcdChangesToCpt(ref newcfcptda, icdWidget);
                        newcfcptda.is_cpt_level_of_service = true;
                        newcfcptda.is_cpt_deleted = "Visible";
                        lstcurrent_custom_cpt_diagnosis_association.Add(newcfcptda);
                        //GetRVUValues();
                        lstPast_custom_cpt_diagnosis_association.Add(newcfcptda);
                        //this.RadGvCPTDiagnosis.ItemsSource = lstcurrent_custom_cpt_diagnosis_association;
                        //this.RadGvCPTDiagnosis.Rebind();

                    }
                    else
                    {
                        TxtLevelOfSerivce.Text = computedLevelOfService;
                        MessageBox.Show("Level of service cpt code not found.");
                        ButtonEnable();
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
                ButtonEnable();
            }
        }

        private void BtnComputeLevelOfService_Click(object sender, RoutedEventArgs e)
        {

        }

        private void BtnClose_Click(object sender, RoutedEventArgs e)
        {
            this.DialogResult = false;
        }

        private void BtnSaveToBilling_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (IsCPTDAValid())
                {
                    ButtonDisable();
                    PostChargesBusyIndicator.BusyContent = "Creating superbill...";
                    if (cfAppointment != null)
                        SaveUpdateConsultation();
                    else
                        CheckAndAddAppointment();

                    isButonApproveAndSubmittedClicked = false;
                    isButonSaveClicked = true;
                    isButonSaveOnlyClicked = false;
                    //isButonSaveAndApproveClicked = false;
                    //isButtonSaveAndPrintHCFAClicked = false;
                    //UpdateChanges();
                }
                else
                {
                    if (spErrors.Children.Count() == 0) return;
                    radCPTDAExpander.Visibility = System.Windows.Visibility.Visible;
                    radCPTDAExpander.IsExpanded = true;
                }

            }
            catch (Exception ex)
            {
                InformationWindow iw = new InformationWindow(ex.Message);
                iw.Show();
                ButtonEnable();
            }
        }

        private void CheckAndAddAppointment()
        {
            EntityQuery<visit> query = postBillingDomainContext.GetVisitsQuery().Where(x => x.visit_date.Equals(RdpDateOfService.SelectedDate.Value) && x.facility_id == int.Parse(DdlFacility.SelectedValue.ToString()) && x.patient_id == (patientObject != null ? patientObject.patientId : cfAppointment.patientId));
            LoadOperation<visit> loadVisitOp = postBillingDomainContext.Load(query);
            loadVisitOp.Completed += new EventHandler(loadVisitOp_Completed);
        }

        void loadVisitOp_Completed(object sender, EventArgs e)
        {
            LoadOperation<visit> loadVisitOp = (LoadOperation<visit>)sender;

            if (loadVisitOp.Entities.Count() > 0)
                visitObject = loadVisitOp.Entities.FirstOrDefault();

            if (visitObject == null)
            {
                visitObject = new visit();
                visitObject.patient_id = patientObject != null ? patientObject.patientId : cfAppointment.patientId;
                visitObject.facility_id = int.Parse(DdlFacility.SelectedValue.ToString());
                visitObject.visit_date = RdpDateOfService.SelectedDate.Value;
                visitObject.insurance_verification_done = false;
                visitObject.credit_card_verification_done = false;

                visitObject.date_created = DateTime.Now;
                visitObject.created_by_user_id = App.global_user.user_id;
                visitObject.date_last_updated = DateTime.Now;
                visitObject.last_updated_by_user_id = App.global_user.user_id;

                postBillingDomainContext.visits.Add(visitObject);
            }

            var calenderQuery = postBillingDomainContext.GetCalendar_dateQuery().Where(x => x.scheduled_date == RdpDateOfService.SelectedDate && x.physician_id == ((CustomFormattedPersonMinimumDetails)DdlPhysicianPstChrg.SelectedItem).physician_id);
            LoadOperation<calendar_date> loadCalendarDateOp = postBillingDomainContext.Load(calenderQuery);
            loadCalendarDateOp.Completed += new EventHandler(loadCalendarDateOp_Completed);
        }

        void loadCalendarDateOp_Completed(object sender, EventArgs e)
        {
            try
            {
                LoadOperation<calendar_date> loadCalendarDateOp = (LoadOperation<calendar_date>)sender;

                if (loadCalendarDateOp.Entities.Count() > 0)
                {
                    calenderObject = (calendar_date)loadCalendarDateOp.Entities.FirstOrDefault();

                    //calenderObject = selectedcalendardate.calendar_date_id;
                }

                if (calenderObject == null)
                {
                    calenderObject = new calendar_date();
                    if (App.global_physicianID > 0)
                        calenderObject.physician_id = App.global_physicianID;
                    else if (App.global_physicianID == 0 && App.global_visitIdForChart > 0)
                        calenderObject.physician_id = App.global_physicianIdForChartForNonPhysician;
                    else
                        calenderObject.physician_id = ((CustomFormattedPersonMinimumDetails)DdlPhysicianPstChrg.SelectedItem).physician_id;
                    calenderObject.scheduled_date = RdpDateOfService.SelectedDate.Value;

                    calenderObject.date_created = DateTime.Now;
                    calenderObject.created_by_user_id = App.global_user.user_id;
                    calenderObject.date_last_updated = DateTime.Now;
                    calenderObject.last_updated_by_user_id = App.global_user.user_id;
                    calenderObject.user_id = ((CustomFormattedPersonMinimumDetails)DdlPhysicianPstChrg.SelectedItem).user_id;

                    postBillingDomainContext.calendar_dates.Add(calenderObject);
                }

                appointmentObject = new appointment();
                appointmentObject.patient_id = patientObject != null ? patientObject.patientId : cfAppointment.patientId;
                appointmentObject.visit_id = visitObject.visit_id;
                appointmentObject.send_reminder = false;
                appointmentObject.reminder_date = null;
                appointmentObject.appointment_type_id = 1;
                appointmentObject.appointment_reason_id = 1;
                appointmentObject.comments = HardcodedValues.AutoApptComment;
                appointmentObject.appointment_status = "Completed_NoVisit";

                appointmentObject.flag_self_pay_patient = flagSelfPay;
                appointmentObject.date_created = DateTime.Now;
                appointmentObject.created_by_user_id = App.global_user.user_id;
                appointmentObject.date_last_updated = DateTime.Now;
                appointmentObject.last_updated_by_user_id = App.global_user.user_id;

                postBillingDomainContext.appointments.Add(appointmentObject);

                scheduledSlotObject = new scheduled_slot();
                scheduledSlotObject.calendar_date_id = calenderObject.calendar_date_id;
                scheduledSlotObject.appointment_id = appointmentObject.appointment_id;
                scheduledSlotObject.start_time = DateTime.Now;
                scheduledSlotObject.end_time = DateTime.Now;
                scheduledSlotObject.physician_id = ((CustomFormattedPersonMinimumDetails)DdlPhysicianPstChrg.SelectedItem).physician_id;
                scheduledSlotObject.user_id = ((CustomFormattedPersonMinimumDetails)DdlPhysicianPstChrg.SelectedItem).user_id;
                scheduledSlotObject.date_created = DateTime.Now;
                scheduledSlotObject.created_by_user_id = App.global_user.user_id;
                scheduledSlotObject.date_last_updated = DateTime.Now;
                scheduledSlotObject.last_updated_by_user_id = App.global_user.user_id;

                postBillingDomainContext.scheduled_slots.Add(scheduledSlotObject);
                SaveCreateApptAndConsultation();

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Line 6480", MessageBoxButton.OK);
                ButtonEnable();
            }

        }

        private void SaveCreateApptAndConsultation()
        {

            try
            {
                UpdatePIP();

                mr_patient_encounter mrPatientEncounterObj;
                if (mrPatientEncounter == null)
                    mrPatientEncounterObj = new mr_patient_encounter();
                else
                    mrPatientEncounterObj = mrPatientEncounter;
                mrPatientEncounterObj.chief_complaint = tbChiefComplaint.Value.ToString();
                mrPatientEncounterObj.patient_id = cfAppointment != null ? cfAppointment.patientId : patientObject.patientId;
                mrPatientEncounterObj.visit_id = visitObject.visit_id;
                mrPatientEncounterObj.physician_id = ((CustomFormattedPersonMinimumDetails)DdlPhysicianPstChrg.SelectedItem).physician_id; // ((IQueryable<CustomFormattedPersonMinimumDetails>)DdlPhysicianPstChrg.ItemsSource.AsQueryable()).Where(q => q.physician_id == cfAppointment.physicianId).FirstOrDefault().physician_id;
                mrPatientEncounterObj.level_of_service_cpt_code = computedLevelOfService;
                if (defaultBillingTemplateGroupId != 0)
                    mrPatientEncounterObj.mr_template_group_id = defaultBillingTemplateGroupId;
                mrPatientEncounterObj.facility_id = int.Parse(DdlFacility.SelectedValue.ToString());
                mrPatientEncounterObj.appointment_id = appointmentObject.appointment_id;
                mrPatientEncounterObj.last_updated_by_user_id = App.global_user.user_id;
                mrPatientEncounterObj.date_last_updated = DateTime.Now;
                mrPatientEncounterObj.created_by_user_id = App.global_user.user_id;
                mrPatientEncounterObj.consultation_date = RdpDateOfService.SelectedDate.Value;
                mrPatientEncounterObj.date_created = DateTime.Now;
                if (mrPatientEncounter == null)
                    postBillingDomainContext.mr_patient_encounters.Add(mrPatientEncounterObj);
                mr_assessment_diagnosis mad;
                if (postBillingDomainContext.mr_assessment_diagnosis.Count() == 0)
                    // mad = icdWidget.mrDxCollectionCustomObjects.Count() > 0 ? new mr_assessment_diagnosis() : null;
                    mad = icdWidget.mrDxCollectionCustomObjects.Count() > 0 ? new mr_assessment_diagnosis() : null;
                else
                    mad = mrPatientEncounter.mr_assessment_diagnosis.FirstOrDefault();// postBillingDomainContext.mr_assessment_diagnosis.FirstOrDefault();

                //   if (icdWidget.mrDxCollectionCustomObjects.Count() > 0)
                if (icdWidget.mrDxCollectionCustomObjects.Count() > 0)
                {
                    string diagnosis1 = null, diagnosis2 = null, diagnosis3 = null, diagnosis4 = null, diagnosis5 = null, diagnosis6 = null, diagnosis7 = null, diagnosis8 = null, diagnosis9 = null, diagnosis10 = null, diagnosis11 = null, diagnosis12 = null;
                    string diagnosis21 = null, diagnosis22 = null, diagnosis23 = null, diagnosis24 = null, diagnosis25 = null, diagnosis26 = null, diagnosis27 = null, diagnosis28 = null, diagnosis29 = null, diagnosis210 = null, diagnosis211 = null, diagnosis212 = null;
                    //icdWidget.GetDiagnosisCodesFromListBox(out diagnosis1, out diagnosis2, out diagnosis3, out diagnosis4, out diagnosis5, out diagnosis6, out diagnosis7, out diagnosis8);
                    icdWidget.GetNewDiagnosisCodesFromListBox(out diagnosis1, out diagnosis2, out diagnosis3, out diagnosis4, out diagnosis5, out diagnosis6, out diagnosis7, out diagnosis8, out diagnosis9, out diagnosis10, out diagnosis11, out diagnosis12, false);
                    icdWidget.GetNewDiagnosisCodesFromListBox(out diagnosis21, out diagnosis22, out diagnosis23, out diagnosis24, out diagnosis25, out diagnosis26, out diagnosis27, out diagnosis28, out diagnosis29, out diagnosis210, out diagnosis211, out diagnosis212, true);
                    mad.mr_patient_encounter_id = mrPatientEncounterObj.mr_patient_encounter_id;
                    mad.patient_id = cfAppointment != null ? cfAppointment.patientId : patientObject.patientId;

                    if ((saveIcd10 && !string.IsNullOrEmpty(diagnosis21)) || (!saveIcd10 && !string.IsNullOrEmpty(diagnosis1)))
                    {
                        // mad.diagnosis1_ICD9_code_id = saveIcd10 ? (diagnosis21 == 0 ? diagnosis1 : diagnosis21) : diagnosis1;

                        mad.diagnosis1_code = saveIcd10 ? diagnosis21 : diagnosis1;
                        AddProblemList(diagnosis1, mrPatientEncounterObj, diagnosis21);

                    }
                    else
                        mad.diagnosis1_code = null;
                    if ((saveIcd10 && !string.IsNullOrEmpty(diagnosis22)) || (!saveIcd10 && !string.IsNullOrEmpty(diagnosis2)))
                    {
                        //  mad.diagnosis1_ICD9_code_id = saveIcd10 ? (diagnosis22 == 0 ? diagnosis1 : diagnosis22) : diagnosis1;
                        mad.diagnosis2_code = saveIcd10 ? diagnosis22 : diagnosis2;
                        AddProblemList(diagnosis2, mrPatientEncounterObj, diagnosis22);
                    }
                    else
                        mad.diagnosis2_code = null;
                    if ((saveIcd10 && !string.IsNullOrEmpty(diagnosis23)) || (!saveIcd10 && !string.IsNullOrEmpty(diagnosis3)))
                    {
                        // mad.diagnosis1_ICD9_code_id = saveIcd10 ? (diagnosis23 == 0 ? diagnosis1 : diagnosis23) : diagnosis1;
                        mad.diagnosis3_code = saveIcd10 ? diagnosis23 : diagnosis3;
                        AddProblemList(diagnosis3, mrPatientEncounterObj, diagnosis23);
                    }
                    else
                        mad.diagnosis3_code = null;
                    if ((saveIcd10 && !string.IsNullOrEmpty(diagnosis24)) || (!saveIcd10 && !string.IsNullOrEmpty(diagnosis4)))
                    {
                        //  mad.diagnosis1_ICD9_code_id = saveIcd10 ? (diagnosis24 == 0 ? diagnosis1 : diagnosis24) : diagnosis1;
                        mad.diagnosis4_code = saveIcd10 ? diagnosis24 : diagnosis4;
                        AddProblemList(diagnosis4, mrPatientEncounterObj, diagnosis24);
                    }
                    else
                        mad.diagnosis4_code = null;
                    if ((saveIcd10 && !string.IsNullOrEmpty(diagnosis25)) || (!saveIcd10 && !string.IsNullOrEmpty(diagnosis5)))
                    {
                        //mad.diagnosis1_ICD9_code_id = saveIcd10 ? (diagnosis24 == 0 ? diagnosis1 : diagnosis24) : diagnosis1;
                        mad.diagnosis5_code = saveIcd10 ? diagnosis25 : diagnosis5;
                        AddProblemList(diagnosis5, mrPatientEncounterObj, diagnosis25);
                    }
                    else
                        mad.diagnosis5_code = null;
                    if ((saveIcd10 && !string.IsNullOrEmpty(diagnosis26)) || (!saveIcd10 && !string.IsNullOrEmpty(diagnosis6)))
                    {
                        mad.diagnosis6_code = saveIcd10 ? diagnosis26 : diagnosis6;
                        AddProblemList(diagnosis6, mrPatientEncounterObj, diagnosis26);
                    }
                    else
                        mad.diagnosis6_code = null;
                    if ((saveIcd10 && !string.IsNullOrEmpty(diagnosis27)) || (!saveIcd10 && !string.IsNullOrEmpty(diagnosis7)))
                    {
                        mad.diagnosis7_code = saveIcd10 ? diagnosis27 : diagnosis7;
                        AddProblemList(diagnosis7, mrPatientEncounterObj, diagnosis27);
                    }
                    else
                        mad.diagnosis7_code = null;
                    if ((saveIcd10 && !string.IsNullOrEmpty(diagnosis28)) || (!saveIcd10 && !string.IsNullOrEmpty(diagnosis8)))
                    {
                        mad.diagnosis8_code = saveIcd10 ? diagnosis28 : diagnosis8;
                        AddProblemList(diagnosis8, mrPatientEncounterObj, diagnosis28);
                    }
                    else
                    {
                        mad.diagnosis8_code = null;
                    }
                    if ((saveIcd10 && !string.IsNullOrEmpty(diagnosis29)) || (!saveIcd10 && !string.IsNullOrEmpty(diagnosis9)))
                    {
                        mad.diagnosis9_code = saveIcd10 ? diagnosis29 : diagnosis9;
                        AddProblemList(diagnosis9, mrPatientEncounterObj, diagnosis29);
                    }
                    else
                    {
                        mad.diagnosis9_code = null;
                    }
                    if ((saveIcd10 && !string.IsNullOrEmpty(diagnosis210)) || (!saveIcd10 && !string.IsNullOrEmpty(diagnosis10)))
                    {
                        mad.diagnosis10_code = saveIcd10 ? diagnosis210 : diagnosis10;
                        AddProblemList(diagnosis10, mrPatientEncounterObj, diagnosis210);
                    }
                    else
                    {
                        mad.diagnosis10_code = null;
                    }
                    if ((saveIcd10 && !string.IsNullOrEmpty(diagnosis211)) || (!saveIcd10 && !string.IsNullOrEmpty(diagnosis11)))
                    {
                        mad.diagnosis11_code = saveIcd10 ? diagnosis211 : diagnosis11;
                        AddProblemList(diagnosis11, mrPatientEncounterObj, diagnosis211);
                    }
                    else
                    {
                        mad.diagnosis11_code = null;
                    }
                    if ((saveIcd10 && !string.IsNullOrEmpty(diagnosis212)) || (!saveIcd10 && !string.IsNullOrEmpty(diagnosis12)))
                    {
                        mad.diagnosis12_code = saveIcd10 ? diagnosis212 : diagnosis12;
                        AddProblemList(diagnosis12, mrPatientEncounterObj, diagnosis212);
                    }
                    else
                    {
                        mad.diagnosis12_code = null;
                    }
                    mad.date_created = DateTime.Now;
                    mad.created_by_user_id = App.global_user.user_id;
                    mad.date_last_updated = DateTime.Now;
                    mad.last_updated_by_user_id = App.global_user.user_id;
                    if (postBillingDomainContext.mr_assessment_diagnosis.Count() == 0)
                        postBillingDomainContext.mr_assessment_diagnosis.Add(mad);
                }
                else if (postBillingDomainContext.mr_assessment_diagnosis.Count() > 0 && mad != null)
                    postBillingDomainContext.mr_assessment_diagnosis.Remove(mad);

                mr_chief_complaint mrChiefComplaintObj;
                if (postBillingDomainContext.mr_chief_complaints.Count() == 0)
                    mrChiefComplaintObj = new mr_chief_complaint();
                else
                    mrChiefComplaintObj = postBillingDomainContext.mr_chief_complaints.FirstOrDefault();
                mrChiefComplaintObj.entered_data = tbChiefComplaint.Value.ToString();
                try
                {
                    mrChiefComplaintObj.mr_form_field_id = this.ccFFId.Value;// billingTempate.mr_template_section.FirstOrDefault(q => q.section_identifier == HardcodedValues.SectionIdentifierChiefComplaint && q.parent_section_id == null).mr_form_field.FirstOrDefault(q => q.label == HardcodedValues.SectionIdentifierChiefComplaint).mr_form_field_id;
                    mrChiefComplaintObj.mr_template_section_id = this.ccId.Value; // billingTempate.mr_template_section.FirstOrDefault(q => q.section_identifier == HardcodedValues.SectionIdentifierChiefComplaint && q.parent_section_id == null).mr_template_section_id;
                }
                catch (Exception ex)
                {
                    InformationWindow iw = new InformationWindow("Chief Complaint section in selected billing template is not valid. Please create template using chief complaint section.");
                    iw.Show();
                    postBillingDomainContext.RejectChanges();
                    ButtonEnable();
                    return;
                }
                mrChiefComplaintObj.created_by_user_id = App.global_user.user_id;
                mrChiefComplaintObj.date_created = DateTime.Now;
                mrChiefComplaintObj.mr_patient_encounter_id = mrPatientEncounterObj.mr_patient_encounter_id;
                mrChiefComplaintObj.patient_id = cfAppointment != null ? cfAppointment.patientId : patientObject.patientId;
                mrChiefComplaintObj.date_last_updated = DateTime.Now;
                mrChiefComplaintObj.last_updated_by_user_id = App.global_user.user_id;
                //mrChiefComplaintObj.entered_data = enteredData.Trim();
                mrChiefComplaintObj.entered_data = tbChiefComplaint.Value.ToString();
                if (postBillingDomainContext.mr_chief_complaints.Count() == 0)
                    postBillingDomainContext.mr_chief_complaints.Add(mrChiefComplaintObj);

                foreach (cpt_code cptCode in cptWidget.mrDxCPTCollection)
                {
                    SavePlanProcedure(cptCode, mrPatientEncounterObj, this.ppFFId.Value, this.cptId.Value);
                }

                DeletePlanProcedure();

                foreach (mr_patient_encounter_cpt_diagnosis_association mpecptda in postBillingDomainContext.mr_patient_encounter_cpt_diagnosis_associations)
                {
                    postBillingDomainContext.mr_patient_encounter_cpt_diagnosis_associations.Remove(mpecptda);
                }
                IList<billers_note> lstbillers_notes = postBillingDomainContext.billers_notes.ToList();
                foreach (billers_note bn in lstbillers_notes)
                {
                    postBillingDomainContext.billers_notes.Remove(bn);
                }

                System.ServiceModel.DomainServices.Client.SubmitOperation sepbSubmitOp = postBillingDomainContext.SubmitChanges();

                sepbSubmitOp.Completed += new EventHandler(sepbSubmitOp_Completed);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
                ButtonEnable();
            }
        }

        void LoadAdditionalBillingDetails(int encounterId)
        {
            try
            {
                abdDomainContext = new AdditionalBillingDetailsDomainContext();
                var Query = abdDomainContext.GetAdditional_billing_detailsQuery().Where(x => x.mr_patient_encounter_id == encounterId);
                LoadOperation<additional_billing_details> loadABDOp = abdDomainContext.Load(Query);
                loadABDOp.Completed += loadABDOp_Completed;

            }
            catch (Exception ex)
            {
                ButtonEnable();
            }

        }

        void loadABDOp_Completed(object sender, EventArgs e)
        {
            try
            {
                LoadOperation<additional_billing_details> loadABDOp = (LoadOperation<additional_billing_details>)sender;

                if (loadABDOp.Entities.Count() > 0)
                {
                    abdOject = (additional_billing_details)loadABDOp.Entities.FirstOrDefault();
                    BindAdditionalBillingDetails(abdOject);

                }
            }
            catch (Exception ex)
            {
                ButtonEnable();
            }
        }

        int GetSymptomValue(string symtomVal)
        {
            for (int i = 0; i <= HardcodedValues.SymptomTypes.GetUpperBound(0); i++)
            {
                if (symtomVal.Trim() == HardcodedValues.SymptomTypes.GetValue(i, 0).ToString())
                    return i;
            }
            return -1;
        }
        int GetTreatmentValue(string treatmentVal)
        {
            for (int i = 0; i <= HardcodedValues.TreatmentTypes.GetUpperBound(0); i++)
            {
                if (treatmentVal.Trim() == HardcodedValues.TreatmentTypes.GetValue(i, 0).ToString())
                    return i;
            }
            return -1;
        }
        //int GetAccidentValue(string accidentVal)
        //{
        //    for (int i = 0; i <= HardcodedValues.AccidentTypes.GetUpperBound(0); i++)
        //    {
        //        if (accidentVal.Trim() == HardcodedValues.AccidentTypes.GetValue(i, 0).ToString())
        //            return i;
        //    }
        //    return -1;
        //}

        int GetReferringTypeValue(string referringTypeVal)
        {
            for (int i = 0; i <= HardcodedValues.ReferringTypes.GetUpperBound(0); i++)
            {
                if (referringTypeVal.Trim() == HardcodedValues.ReferringTypes.GetValue(i, 0).ToString())
                    return i;
            }
            return -1;
        }

        int GetResubValue(string resubVal)
        {
            for (int i = 0; i <= HardcodedValues.ResubmissionCodes.GetUpperBound(0); i++)
            {
                if (resubVal.Trim() == HardcodedValues.ResubmissionCodes.GetValue(i, 0).ToString())
                    return i;
            }
            return -1;
        }

        int GetStateCodeValue(string stateCodeVal)
        {
            for (int i = 0; i <= HardcodedValues.StateCodes.GetUpperBound(0); i++)
            {
                if (stateCodeVal.Trim() == HardcodedValues.StateCodes.GetValue(i, 0).ToString())
                    return i;
            }
            return -1;
        }

        void BindAdditionalBillingDetails(additional_billing_details abd)
        {
            try
            {
                if (abd != null)
                {
                    dpSymptomDate.SelectedDate = abd.symptom_date;
                    ddlSymptomType.SelectedIndex = GetSymptomValue(abd.symptom_type);
                    ddlSymptomType.SelectedValuePath = abd.symptom_type_text;

                    dpOtherTreatmentDate.SelectedDate = abd.other_treatment_date;
                    ddlTreatmentType.SelectedIndex = GetTreatmentValue(abd.treatment_type);
                    dpLastXrayDate.SelectedDate = abd.last_xray_date;

                    ddlAccidentType.SelectedItem = abd.accident_type;


                    dpAccidentDate.SelectedDate = abd.accident_date;
                    dpUnabletoWorkFrom.SelectedDate = abd.unable_to_work_from_date;
                    dpUnabletoWorkTo.SelectedDate = abd.unable_to_work_from_to;

                    ddlStateCode.SelectedIndex = GetStateCodeValue(abd.accident_state);

                    ddlNatureofAccident.SelectedItem = abd.nature_of_accident;
                    TxtQualifier.Text = abd.accident_qualifier;
                    dpHospitalisationFrom.SelectedDate = abd.hospitalization_from_date;
                    dpHospitalisationTo.SelectedDate = abd.hospitalization_from_to;

                    TxtCondition1.Text = abd.condition1;
                    TxtCondition2.Text = abd.condition2;
                    TxtCondition3.Text = abd.condition3;
                    TxtCondition4.Text = abd.condition4;
                    TxtCondition5.Text = abd.condition5;

                    ddlReferringType.SelectedIndex = GetReferringTypeValue(abd.referring_type_box_17);

                    TxtLocalUse.Text = abd.local_use_box_23;
                    TxtLocalUse19.Text = abd.local_use_box_19;
                    ChkOutsideLab.IsChecked = abd.outside_lab;
                    TxtLocalUse20.Text = abd.outside_lab_charge;

                    ddlResub.SelectedIndex = GetResubValue(abd.local_use_box_22_ddl);
                    this.TxtResub.Text = abd.local_use_box_22_text;


                }
            }
            catch (Exception ex)
            {

            }


        }
        void UpdateInsuranceAssignemnt()
        {

            try
            {


            }
            catch (Exception ex)
            {

            }

        }

        void SaveAdditionalBillingDetails(int encId)
        {
            try
            {
                if (encId != null)
                {
                    if (abdDomainContext == null)
                        abdDomainContext = new AdditionalBillingDetailsDomainContext();
                    additional_billing_details abd;
                    if (abdOject == null)
                        abd = new additional_billing_details();
                    else
                        abd = abdOject;
                    abd.symptom_date = dpSymptomDate.SelectedDate;
                    if (ddlSymptomType.SelectedItem != null)
                    {
                        abd.symptom_type = ((ComboBoxItem)ddlSymptomType.SelectedItem).Tag.ToString();
                        abd.symptom_type_text = ((ComboBoxItem)ddlSymptomType.SelectedItem).Content.ToString();
                    }
                    abd.other_treatment_date = dpOtherTreatmentDate.SelectedDate;
                    if (ddlTreatmentType.SelectedItem != null)
                        abd.treatment_type = ((ComboBoxItem)ddlTreatmentType.SelectedItem).Tag.ToString();
                    abd.last_xray_date = dpLastXrayDate.SelectedDate;
                    if (ddlAccidentType.SelectedValue != null)
                        abd.accident_type = ddlAccidentType.SelectedValue.ToString();//((ComboBoxItem)ddlAccidentType.SelectedItem).Tag.ToString();
                    abd.accident_date = dpAccidentDate.SelectedValue;
                    abd.unable_to_work_from_date = dpUnabletoWorkFrom.SelectedDate;
                    abd.unable_to_work_from_to = dpUnabletoWorkTo.SelectedDate;
                    if (ddlStateCode.SelectedValue != null)
                        abd.accident_state = ((ComboBoxItem)ddlStateCode.SelectedItem).Tag.ToString();
                    if (ddlNatureofAccident.SelectedValue != null)
                        abd.nature_of_accident = ddlNatureofAccident.SelectedValue.ToString();//((ComboBoxItem)ddlNatureofAccident.SelectedItem).Tag.ToString(); 
                    abd.accident_qualifier = TxtQualifier.Text;
                    abd.hospitalization_from_date = dpHospitalisationFrom.SelectedDate;
                    abd.hospitalization_from_to = dpHospitalisationTo.SelectedDate;
                    abd.condition1 = TxtCondition1.Text.Trim();
                    abd.condition2 = TxtCondition2.Text.Trim();
                    abd.condition3 = TxtCondition3.Text.Trim();
                    abd.condition4 = TxtCondition4.Text.Trim();
                    abd.condition5 = TxtCondition5.Text.Trim();
                    if (ddlReferringType.SelectedItem != null)
                        abd.referring_type_box_17 = ((ComboBoxItem)ddlReferringType.SelectedItem).Tag.ToString();
                    abd.local_use_box_23 = TxtLocalUse.Text;
                    abd.local_use_box_19 = TxtLocalUse19.Text;
                    abd.outside_lab = ChkOutsideLab.IsChecked;
                    abd.outside_lab_charge = TxtLocalUse20.Text;
                    if (ddlResub.SelectedItem != null)
                        abd.local_use_box_22_ddl = ((ComboBoxItem)ddlResub.SelectedItem).Tag.ToString();

                    abd.local_use_box_22_text = TxtResub.Text;


                    abd.mr_patient_encounter_id = encId;

                    abd.date_last_updated = DateTime.Now;
                    abd.last_updated_by_user_id = App.global_user.user_id;

                    if (abd.additional_billing_details_id == 0)
                    {
                        abd.date_created = DateTime.Now;
                        abd.created_by_user_id = App.global_user.user_id;
                        abdDomainContext.additional_billing_details.Add(abd);
                    }
                    System.ServiceModel.DomainServices.Client.SubmitOperation abdSubmitOp = abdDomainContext.SubmitChanges();
                    abdSubmitOp.Completed += new EventHandler(abdSubmitOp_Completed);
                }



            }
            catch (Exception ex)
            {
                ButtonEnable();
            }

        }

        void abdSubmitOp_Completed(object sender, EventArgs e)
        {
            try
            {
                System.ServiceModel.DomainServices.Client.SubmitOperation op = (SubmitOperation)sender;

                if (op.HasError)
                {
                    op.MarkErrorAsHandled();
                    MessageBox.Show(op.Error.Message);
                    ButtonEnable();
                }
                else
                {

                }

            }
            catch (Exception ex)
            {

            }
        }

        private void btnCopyCPT_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                Button btn = (Button)sender;
                if (btn.Tag != null)
                {
                    CustomFormattedCPTDiagnosisAssociation cfcptda = (CustomFormattedCPTDiagnosisAssociation)btn.DataContext;// lstcurrent_custom_cpt_diagnosis_association.Where(q => q.cpt_code == btn.Tag).FirstOrDefault();
                    //if ((cfcptda.assessment_diagnosis_code1_visibility == "Collapsed" || cfcptda.assessment_diagnosis_code1_checked) & (cfcptda.assessment_diagnosis_code2_visibility == "Collapsed" || cfcptda.assessment_diagnosis_code2_checked) & (cfcptda.assessment_diagnosis_code3_visibility == "Collapsed" || cfcptda.assessment_diagnosis_code3_checked) & (cfcptda.assessment_diagnosis_code4_visibility == "Collapsed" || cfcptda.assessment_diagnosis_code4_checked) & (cfcptda.assessment_diagnosis_code5_visibility == "Collapsed" || cfcptda.assessment_diagnosis_code5_checked) & (cfcptda.assessment_diagnosis_code6_visibility == "Collapsed" || cfcptda.assessment_diagnosis_code6_checked) & (cfcptda.assessment_diagnosis_code7_visibility == "Collapsed" || cfcptda.assessment_diagnosis_code7_checked) & (cfcptda.assessment_diagnosis_code8_visibility == "Collapsed" || cfcptda.assessment_diagnosis_code8_checked))
                    //{
                    //    InformationWindow iw = new InformationWindow("Can not copy CPT code. Because there is no ICD9 code unchecked.");
                    //    iw.Show();
                    //    return;
                    //}
                    CustomFormattedCPTDiagnosisAssociation newcfcptda = new CustomFormattedCPTDiagnosisAssociation();
                    newcfcptda.cpt_code = cfcptda.cpt_code;
                    newcfcptda.cpt_diagnosis_association_id = null;
                    newcfcptda.cpt_code_description = cfcptda.cpt_code_description;
                    newcfcptda.current_date = cfcptda.current_date;
                    newcfcptda.assessment_diagnosis_code1_id = cfcptda.assessment_diagnosis_code1_id;
                    newcfcptda.assessment_diagnosis_code2_id = cfcptda.assessment_diagnosis_code2_id;
                    newcfcptda.assessment_diagnosis_code3_id = cfcptda.assessment_diagnosis_code3_id;
                    newcfcptda.assessment_diagnosis_code4_id = cfcptda.assessment_diagnosis_code4_id;
                    newcfcptda.assessment_diagnosis_code5_id = cfcptda.assessment_diagnosis_code5_id;
                    newcfcptda.assessment_diagnosis_code6_id = cfcptda.assessment_diagnosis_code6_id;
                    newcfcptda.assessment_diagnosis_code7_id = cfcptda.assessment_diagnosis_code7_id;
                    newcfcptda.assessment_diagnosis_code8_id = cfcptda.assessment_diagnosis_code8_id;
                    newcfcptda.assessment_diagnosis_code9_id = cfcptda.assessment_diagnosis_code9_id;
                    newcfcptda.assessment_diagnosis_code10_id = cfcptda.assessment_diagnosis_code10_id;
                    newcfcptda.assessment_diagnosis_code11_id = cfcptda.assessment_diagnosis_code11_id;
                    newcfcptda.assessment_diagnosis_code12_id = cfcptda.assessment_diagnosis_code12_id;

                    newcfcptda.assessment_diagnosis_code1 = cfcptda.assessment_diagnosis_code1;
                    newcfcptda.assessment_diagnosis_code2 = cfcptda.assessment_diagnosis_code2;
                    newcfcptda.assessment_diagnosis_code3 = cfcptda.assessment_diagnosis_code3;
                    newcfcptda.assessment_diagnosis_code4 = cfcptda.assessment_diagnosis_code4;
                    newcfcptda.assessment_diagnosis_code5 = cfcptda.assessment_diagnosis_code5;
                    newcfcptda.assessment_diagnosis_code6 = cfcptda.assessment_diagnosis_code6;
                    newcfcptda.assessment_diagnosis_code7 = cfcptda.assessment_diagnosis_code7;
                    newcfcptda.assessment_diagnosis_code8 = cfcptda.assessment_diagnosis_code8;

                    newcfcptda.assessment_diagnosis_code9 = cfcptda.assessment_diagnosis_code9;
                    newcfcptda.assessment_diagnosis_code10 = cfcptda.assessment_diagnosis_code10;
                    newcfcptda.assessment_diagnosis_code11 = cfcptda.assessment_diagnosis_code11;
                    newcfcptda.assessment_diagnosis_code12 = cfcptda.assessment_diagnosis_code12;



                    if (cfcptda.assessment_diagnosis_code1_visibility == "Collapsed") //cfcptda.assessment_diagnosis_code1_checked || 
                    {
                        newcfcptda.assessment_diagnosis_code1_checked = false;
                        newcfcptda.assessment_diagnosis_code1_visibility = "Collapsed";
                    }
                    else
                    {
                        newcfcptda.assessment_diagnosis_code1_checked = false; //cfcptda.assessment_diagnosis_code1_checked;
                        newcfcptda.assessment_diagnosis_code1_visibility = cfcptda.assessment_diagnosis_code1_visibility;
                    }
                    if (cfcptda.assessment_diagnosis_code2_visibility == "Collapsed") //cfcptda.assessment_diagnosis_code2_checked || 
                    {
                        newcfcptda.assessment_diagnosis_code2_checked = false;
                        newcfcptda.assessment_diagnosis_code2_visibility = "Collapsed";
                    }
                    else
                    {
                        newcfcptda.assessment_diagnosis_code2_checked = false; //cfcptda.assessment_diagnosis_code2_checked;
                        newcfcptda.assessment_diagnosis_code2_visibility = cfcptda.assessment_diagnosis_code2_visibility;
                    }
                    if (cfcptda.assessment_diagnosis_code3_visibility == "Collapsed") //cfcptda.assessment_diagnosis_code3_checked || 
                    {
                        newcfcptda.assessment_diagnosis_code3_checked = false;
                        newcfcptda.assessment_diagnosis_code3_visibility = "Collapsed";
                    }
                    else
                    {
                        newcfcptda.assessment_diagnosis_code3_checked = false; //cfcptda.assessment_diagnosis_code3_checked;
                        newcfcptda.assessment_diagnosis_code3_visibility = cfcptda.assessment_diagnosis_code3_visibility;
                    }
                    if (cfcptda.assessment_diagnosis_code4_visibility == "Collapsed") //cfcptda.assessment_diagnosis_code4_checked || 
                    {
                        newcfcptda.assessment_diagnosis_code4_checked = false;
                        newcfcptda.assessment_diagnosis_code4_visibility = "Collapsed";
                    }
                    else
                    {
                        newcfcptda.assessment_diagnosis_code4_checked = false; //cfcptda.assessment_diagnosis_code4_checked;
                        newcfcptda.assessment_diagnosis_code4_visibility = cfcptda.assessment_diagnosis_code4_visibility;
                    }
                    if (cfcptda.assessment_diagnosis_code5_visibility == "Collapsed") //cfcptda.assessment_diagnosis_code5_checked || 
                    {
                        newcfcptda.assessment_diagnosis_code5_checked = false;
                        newcfcptda.assessment_diagnosis_code5_visibility = "Collapsed";
                    }
                    else
                    {
                        newcfcptda.assessment_diagnosis_code5_checked = false; //cfcptda.assessment_diagnosis_code5_checked;
                        newcfcptda.assessment_diagnosis_code5_visibility = cfcptda.assessment_diagnosis_code5_visibility;
                    }
                    if (cfcptda.assessment_diagnosis_code6_visibility == "Collapsed") //cfcptda.assessment_diagnosis_code6_checked || 
                    {
                        newcfcptda.assessment_diagnosis_code6_checked = false;
                        newcfcptda.assessment_diagnosis_code6_visibility = "Collapsed";
                    }
                    else
                    {
                        newcfcptda.assessment_diagnosis_code6_checked = false; //cfcptda.assessment_diagnosis_code6_checked;
                        newcfcptda.assessment_diagnosis_code6_visibility = cfcptda.assessment_diagnosis_code6_visibility;
                    }
                    if (cfcptda.assessment_diagnosis_code7_visibility == "Collapsed") //cfcptda.assessment_diagnosis_code7_checked || 
                    {
                        newcfcptda.assessment_diagnosis_code7_checked = false;
                        newcfcptda.assessment_diagnosis_code7_visibility = "Collapsed";
                    }
                    else
                    {
                        newcfcptda.assessment_diagnosis_code7_checked = false; //cfcptda.assessment_diagnosis_code7_checked;
                        newcfcptda.assessment_diagnosis_code7_visibility = cfcptda.assessment_diagnosis_code7_visibility;
                    }
                    if (cfcptda.assessment_diagnosis_code8_visibility == "Collapsed") //cfcptda.assessment_diagnosis_code8_checked || 
                    {
                        newcfcptda.assessment_diagnosis_code8_checked = false;
                        newcfcptda.assessment_diagnosis_code8_visibility = "Collapsed";
                    }
                    else
                    {
                        newcfcptda.assessment_diagnosis_code8_checked = false; //cfcptda.assessment_diagnosis_code8_checked;
                        newcfcptda.assessment_diagnosis_code8_visibility = cfcptda.assessment_diagnosis_code8_visibility;
                    }

                    if (cfcptda.assessment_diagnosis_code9_visibility == "Collapsed") //cfcptda.assessment_diagnosis_code8_checked || 
                    {
                        newcfcptda.assessment_diagnosis_code9_checked = false;
                        newcfcptda.assessment_diagnosis_code9_visibility = "Collapsed";
                    }
                    else
                    {
                        newcfcptda.assessment_diagnosis_code9_checked = false; //cfcptda.assessment_diagnosis_code8_checked;
                        newcfcptda.assessment_diagnosis_code9_visibility = cfcptda.assessment_diagnosis_code9_visibility;
                    }

                    if (cfcptda.assessment_diagnosis_code10_visibility == "Collapsed") //cfcptda.assessment_diagnosis_code8_checked || 
                    {
                        newcfcptda.assessment_diagnosis_code10_checked = false;
                        newcfcptda.assessment_diagnosis_code10_visibility = "Collapsed";
                    }
                    else
                    {
                        newcfcptda.assessment_diagnosis_code10_checked = false; //cfcptda.assessment_diagnosis_code8_checked;
                        newcfcptda.assessment_diagnosis_code10_visibility = cfcptda.assessment_diagnosis_code10_visibility;
                    }
                    if (cfcptda.assessment_diagnosis_code11_visibility == "Collapsed") //cfcptda.assessment_diagnosis_code8_checked || 
                    {
                        newcfcptda.assessment_diagnosis_code11_checked = false;
                        newcfcptda.assessment_diagnosis_code11_visibility = "Collapsed";
                    }
                    else
                    {
                        newcfcptda.assessment_diagnosis_code11_checked = false; //cfcptda.assessment_diagnosis_code8_checked;
                        newcfcptda.assessment_diagnosis_code11_visibility = cfcptda.assessment_diagnosis_code11_visibility;
                    }
                    if (cfcptda.assessment_diagnosis_code12_visibility == "Collapsed") //cfcptda.assessment_diagnosis_code8_checked || 
                    {
                        newcfcptda.assessment_diagnosis_code12_checked = false;
                        newcfcptda.assessment_diagnosis_code12_visibility = "Collapsed";
                    }
                    else
                    {
                        newcfcptda.assessment_diagnosis_code12_checked = false; //cfcptda.assessment_diagnosis_code8_checked;
                        newcfcptda.assessment_diagnosis_code12_visibility = cfcptda.assessment_diagnosis_code12_visibility;
                    }

                    newcfcptda.assessment_diagnosis_code_description1 = cfcptda.assessment_diagnosis_code_description1;
                    newcfcptda.assessment_diagnosis_code_description2 = cfcptda.assessment_diagnosis_code_description2;
                    newcfcptda.assessment_diagnosis_code_description3 = cfcptda.assessment_diagnosis_code_description3;
                    newcfcptda.assessment_diagnosis_code_description4 = cfcptda.assessment_diagnosis_code_description4;
                    newcfcptda.assessment_diagnosis_code_description5 = cfcptda.assessment_diagnosis_code_description5;
                    newcfcptda.assessment_diagnosis_code_description6 = cfcptda.assessment_diagnosis_code_description6;
                    newcfcptda.assessment_diagnosis_code_description7 = cfcptda.assessment_diagnosis_code_description7;
                    newcfcptda.assessment_diagnosis_code_description8 = cfcptda.assessment_diagnosis_code_description8;
                    newcfcptda.assessment_diagnosis_code_description9 = cfcptda.assessment_diagnosis_code_description9;
                    newcfcptda.assessment_diagnosis_code_description10 = cfcptda.assessment_diagnosis_code_description10;
                    newcfcptda.assessment_diagnosis_code_description11 = cfcptda.assessment_diagnosis_code_description11;
                    newcfcptda.assessment_diagnosis_code_description12 = cfcptda.assessment_diagnosis_code_description12;


                    newcfcptda.cpt_code_modifier1 = cfcptda.cpt_code_modifier1;
                    newcfcptda.cpt_code_modifier2 = cfcptda.cpt_code_modifier2;
                    newcfcptda.cpt_code_modifier3 = cfcptda.cpt_code_modifier3;
                    newcfcptda.cpt_code_modifier4 = cfcptda.cpt_code_modifier4;
                    newcfcptda.decimalunits = cfcptda.decimalunits;
                    newcfcptda.units = cfcptda.units;
                    newcfcptda.posc = cfcptda.posc;
                    newcfcptda.pastUnits = cfcptda.pastUnits;
                    newcfcptda.pastPOSC = cfcptda.pastPOSC;
                    newcfcptda.service_start_date = cfcptda.service_start_date;
                    newcfcptda.service_end_date = cfcptda.service_end_date;
                    newcfcptda.insurance_prior_authorization_number = cfcptda.insurance_prior_authorization_number;
                    newcfcptda.modify_unit_charge = cfcptda.modify_unit_charge;
                    newcfcptda.procedure_unit_charge = cfcptda.procedure_unit_charge;
                    newcfcptda.modified_procedure_unit_charge = cfcptda.modified_procedure_unit_charge;
                    newcfcptda.rvu_value = cfcptda.rvu_value;
                    newcfcptda.is_cpt_deleted = "Visible";
                    lstcurrent_custom_cpt_diagnosis_association.Add(newcfcptda);
                    this.RadGvCPTDiagnosis.ItemsSource = lstcurrent_custom_cpt_diagnosis_association;
                    this.RadGvCPTDiagnosis.Rebind();
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void btnDeleteCPTCode_Click(object sender, RoutedEventArgs e)
        {
            CustomFormattedCPTDiagnosisAssociation cfcptda = (CustomFormattedCPTDiagnosisAssociation)((Button)sender).DataContext;
            lstcurrent_custom_cpt_diagnosis_association.Remove(cfcptda);
            //if (cfcptda.billersNoteId != null)
            //    RemoveBillersNote(cfcptda.billersNoteId.Value);
            this.RadGvCPTDiagnosis.ItemsSource = lstcurrent_custom_cpt_diagnosis_association;
            this.RadGvCPTDiagnosis.Rebind();
        }

        private void SaveUpdateConsultation()
        {
            try
            {
                UpdatePIP();
                if (patientScheduledSlot != null)
                {
                    if (DdlPhysicianPstChrg.SelectedItem != null)
                    {
                        patientScheduledSlot.physician_id = ((CustomFormattedPersonMinimumDetails)DdlPhysicianPstChrg.SelectedItem).physician_id;
                    }
                    if (patientScheduledSlot.appointment != null)
                    {
                        if (patientScheduledSlot.appointment.appointment_status != "Completed_NoVisit")
                            patientScheduledSlot.appointment.appointment_status = "Completed";
                        else
                            patientScheduledSlot.appointment.appointment_status = "Completed_NoVisit";
                    }
                    if (patientScheduledSlot.appointment.visit != null && DdlFacility.SelectedValue != null)
                    {
                        patientScheduledSlot.appointment.visit.facility_id = int.Parse(DdlFacility.SelectedValue.ToString());
                    }
                    if (patientScheduledSlot.calendar_date != null && DdlPhysicianPstChrg.SelectedItem != null)
                    {
                        patientScheduledSlot.calendar_date.physician_id = ((CustomFormattedPersonMinimumDetails)DdlPhysicianPstChrg.SelectedItem).physician_id;
                    }
                }

                mr_patient_encounter mrPatientEncounterObj;
                if (mrPatientEncounter == null)
                {
                    mrPatientEncounterObj = new mr_patient_encounter();
                }
                else
                {
                    mrPatientEncounterObj = mrPatientEncounter;
                }
                mrPatientEncounterObj.chief_complaint = tbChiefComplaint.Value.ToString();
                mrPatientEncounterObj.patient_id = cfAppointment != null ? cfAppointment.patientId : patientObject.patientId;
                mrPatientEncounterObj.visit_id = cfAppointment.visitId;
                if (DdlPhysicianPstChrg.SelectedItem != null)
                {
                    mrPatientEncounterObj.physician_id = ((CustomFormattedPersonMinimumDetails)DdlPhysicianPstChrg.SelectedItem).physician_id;
                }
                mrPatientEncounterObj.level_of_service_cpt_code = computedLevelOfService;
                if (defaultBillingTemplateGroupId != 0)
                {
                    mrPatientEncounterObj.mr_template_group_id = defaultBillingTemplateGroupId;
                }
                mrPatientEncounterObj.facility_id = int.Parse(DdlFacility.SelectedValue.ToString());
                mrPatientEncounterObj.appointment_id = cfAppointment.appointmentId;
                mrPatientEncounterObj.last_updated_by_user_id = App.global_user.user_id;
                mrPatientEncounterObj.date_last_updated = DateTime.Now;
                mrPatientEncounterObj.created_by_user_id = App.global_user.user_id;
                mrPatientEncounterObj.consultation_date = RdpDateOfService.SelectedDate.Value;
                mrPatientEncounterObj.date_created = DateTime.Now;
                if (mrPatientEncounter == null)
                {
                    postBillingDomainContext.mr_patient_encounters.Add(mrPatientEncounterObj);
                }
                mr_assessment_diagnosis mad;
                if (postBillingDomainContext.mr_assessment_diagnosis.Count() == 0)
                    mad = icdWidget.mrDxCollectionCustomObjects.Count() > 0 ? new mr_assessment_diagnosis() : null;
                else
                    mad = mrPatientEncounter.mr_assessment_diagnosis.FirstOrDefault();// postBillingDomainContext.mr_assessment_diagnosis.FirstOrDefault();
                foreach (var plId in icdWidget.removeML)
                {
                    mr_problem_list pl = mrPatientEncounter.mr_problem_list.Where(q => q.mr_problem_list_id == plId).FirstOrDefault();
                    if (pl != null) pl.status = "Inactive";
                }
                if (icdWidget.mrDxCollectionCustomObjects.Count() > 0)
                {

                    //int diagnosis1 = 0, diagnosis2 = 0, diagnosis3 = 0, diagnosis4 = 0, diagnosis5 = 0, diagnosis6 = 0, diagnosis7 = 0, diagnosis8 = 0, diagnosis9 = 0, diagnosis10 = 0, diagnosis11 = 0, diagnosis12 = 0;
                    //int diagnosis21 = 0, diagnosis22 = 0, diagnosis23 = 0, diagnosis24 = 0, diagnosis25 = 0, diagnosis26 = 0, diagnosis27 = 0, diagnosis28 = 0, diagnosis29 = 0, diagnosis210 = 0, diagnosis211 = 0, diagnosis212 = 0;

                    string diagnosis1 = null, diagnosis2 = null, diagnosis3 = null, diagnosis4 = null, diagnosis5 = null, diagnosis6 = null, diagnosis7 = null, diagnosis8 = null, diagnosis9 = null, diagnosis10 = null, diagnosis11 = null, diagnosis12 = null;
                    string diagnosis21 = null, diagnosis22 = null, diagnosis23 = null, diagnosis24 = null, diagnosis25 = null, diagnosis26 = null, diagnosis27 = null, diagnosis28 = null, diagnosis29 = null, diagnosis210 = null, diagnosis211 = null, diagnosis212 = null;

                    icdWidget.GetNewDiagnosisCodesFromListBox(out diagnosis1, out diagnosis2, out diagnosis3, out diagnosis4, out diagnosis5, out diagnosis6, out diagnosis7, out diagnosis8, out diagnosis9, out diagnosis10, out diagnosis11, out diagnosis12, false);
                    icdWidget.GetNewDiagnosisCodesFromListBox(out diagnosis21, out diagnosis22, out diagnosis23, out diagnosis24, out diagnosis25, out diagnosis26, out diagnosis27, out diagnosis28, out diagnosis29, out diagnosis210, out diagnosis211, out diagnosis212, true);

                    mad.mr_patient_encounter_id = mrPatientEncounterObj.mr_patient_encounter_id;
                    mad.patient_id = cfAppointment.patientId;

                    if ((!string.IsNullOrEmpty(diagnosis1) && !saveIcd10) || (!string.IsNullOrEmpty(diagnosis21) && saveIcd10))
                    {
                        mad.diagnosis1_code = saveIcd10 ? diagnosis21 : diagnosis1;
                        AddProblemList(diagnosis1, mrPatientEncounterObj, diagnosis21);

                    }
                    else
                        mad.diagnosis1_code = null;
                    if ((!string.IsNullOrEmpty(diagnosis2) && !saveIcd10) || (!string.IsNullOrEmpty(diagnosis22) && saveIcd10))
                    {
                        mad.diagnosis2_code = saveIcd10 ? diagnosis22 : diagnosis2;
                        AddProblemList(diagnosis2, mrPatientEncounterObj, diagnosis22);
                    }
                    else
                        mad.diagnosis2_code = null;
                    if ((!string.IsNullOrEmpty(diagnosis3) && !saveIcd10) || (!string.IsNullOrEmpty(diagnosis23) && saveIcd10))
                    {
                        mad.diagnosis3_code = saveIcd10 ? diagnosis23 : diagnosis3;
                        AddProblemList(diagnosis3, mrPatientEncounterObj, diagnosis23);
                    }
                    else
                        mad.diagnosis3_code = null;
                    if ((!string.IsNullOrEmpty(diagnosis4) && !saveIcd10) || (!string.IsNullOrEmpty(diagnosis24) && saveIcd10))
                    {
                        mad.diagnosis4_code = saveIcd10 ? diagnosis24 : diagnosis4;
                        AddProblemList(diagnosis4, mrPatientEncounterObj, diagnosis24);
                    }
                    else
                        mad.diagnosis4_code = null;
                    if ((!string.IsNullOrEmpty(diagnosis5) && !saveIcd10) || (!string.IsNullOrEmpty(diagnosis25) && saveIcd10))
                    {
                        mad.diagnosis5_code = saveIcd10 ? diagnosis25 : diagnosis5;
                        AddProblemList(diagnosis5, mrPatientEncounterObj, diagnosis25);
                    }
                    else
                        mad.diagnosis5_code = null;
                    if ((!string.IsNullOrEmpty(diagnosis6) && !saveIcd10) || (!string.IsNullOrEmpty(diagnosis26) && saveIcd10))
                    {
                        mad.diagnosis6_code = saveIcd10 ? diagnosis26 : diagnosis6;
                        AddProblemList(diagnosis6, mrPatientEncounterObj, diagnosis26);
                    }
                    else
                        mad.diagnosis6_code = null;
                    if ((!string.IsNullOrEmpty(diagnosis7) && !saveIcd10) || (!string.IsNullOrEmpty(diagnosis27) && saveIcd10))
                    {
                        mad.diagnosis7_code = saveIcd10 ? diagnosis27 : diagnosis7;
                        AddProblemList(diagnosis7, mrPatientEncounterObj, diagnosis27);
                    }
                    else
                        mad.diagnosis7_code = null;
                    if ((!string.IsNullOrEmpty(diagnosis8) && !saveIcd10) || (!string.IsNullOrEmpty(diagnosis28) && saveIcd10))
                    {
                        mad.diagnosis8_code = saveIcd10 ? diagnosis28 : diagnosis8;
                        AddProblemList(diagnosis8, mrPatientEncounterObj, diagnosis28);
                    }
                    else
                    {
                        mad.diagnosis8_code = null;
                    }
                    if ((!string.IsNullOrEmpty(diagnosis9) && !saveIcd10) || (!string.IsNullOrEmpty(diagnosis29) && saveIcd10))
                    {
                        mad.diagnosis9_code = saveIcd10 ? diagnosis29 : diagnosis9;
                        AddProblemList(diagnosis9, mrPatientEncounterObj, diagnosis29);
                    }
                    else
                    {
                        mad.diagnosis9_code = null;
                    }
                    if ((!string.IsNullOrEmpty(diagnosis10) && !saveIcd10) || (!string.IsNullOrEmpty(diagnosis210) && saveIcd10))
                    {
                        mad.diagnosis10_code = saveIcd10 ? diagnosis210 : diagnosis10;
                        AddProblemList(diagnosis10, mrPatientEncounterObj, diagnosis210);
                    }
                    else
                    {
                        mad.diagnosis10_code = null;
                    }
                    if ((!string.IsNullOrEmpty(diagnosis11) && !saveIcd10) || (!string.IsNullOrEmpty(diagnosis211) && saveIcd10))
                    {
                        mad.diagnosis11_code = saveIcd10 ? diagnosis211 : diagnosis11;
                        AddProblemList(diagnosis11, mrPatientEncounterObj, diagnosis211);
                    }
                    else
                    {
                        mad.diagnosis11_code = null;
                    }
                    if ((!string.IsNullOrEmpty(diagnosis12) && !saveIcd10) || (!string.IsNullOrEmpty(diagnosis212) && saveIcd10))
                    {
                        mad.diagnosis12_code = saveIcd10 ? diagnosis212 : diagnosis12;
                        AddProblemList(diagnosis12, mrPatientEncounterObj, diagnosis212);
                    }
                    else
                    {
                        mad.diagnosis12_code = null;
                    }
                    mad.date_created = DateTime.Now;
                    mad.created_by_user_id = App.global_user.user_id;
                    mad.date_last_updated = DateTime.Now;
                    mad.last_updated_by_user_id = App.global_user.user_id;
                    if (postBillingDomainContext.mr_assessment_diagnosis.Count() == 0)
                        postBillingDomainContext.mr_assessment_diagnosis.Add(mad);
                }
                else if (postBillingDomainContext.mr_assessment_diagnosis.Count() > 0 && mad != null)
                    postBillingDomainContext.mr_assessment_diagnosis.Remove(mad);

                mr_chief_complaint mrChiefComplaintObj;
                if (postBillingDomainContext.mr_chief_complaints.Count() == 0)
                    mrChiefComplaintObj = new mr_chief_complaint();
                else
                    mrChiefComplaintObj = postBillingDomainContext.mr_chief_complaints.FirstOrDefault();
                mrChiefComplaintObj.entered_data = tbChiefComplaint.Value.ToString();
                try
                {
                    mrChiefComplaintObj.mr_form_field_id = this.ccFFId.Value;// billingTempate.mr_template_section.FirstOrDefault(q => q.section_identifier == HardcodedValues.SectionIdentifierChiefComplaint && q.parent_section_id == null).mr_form_field.FirstOrDefault(q => q.label == HardcodedValues.SectionIdentifierChiefComplaint).mr_form_field_id;
                    mrChiefComplaintObj.mr_template_section_id = this.ccId.Value; // billingTempate.mr_template_section.FirstOrDefault(q => q.section_identifier == HardcodedValues.SectionIdentifierChiefComplaint && q.parent_section_id == null).mr_template_section_id;
                }
                catch (Exception ex)
                {
                    InformationWindow iw = new InformationWindow("Chief Complaint section in selected billing template is not valid. Please create template using chief complaint section.");
                    iw.Show();
                    postBillingDomainContext.RejectChanges();
                    return;
                }
                mrChiefComplaintObj.created_by_user_id = App.global_user.user_id;
                mrChiefComplaintObj.date_created = DateTime.Now;
                mrChiefComplaintObj.mr_patient_encounter_id = mrPatientEncounterObj.mr_patient_encounter_id;
                mrChiefComplaintObj.patient_id = cfAppointment.patientId;
                mrChiefComplaintObj.date_last_updated = DateTime.Now;
                mrChiefComplaintObj.last_updated_by_user_id = App.global_user.user_id;
                mrChiefComplaintObj.entered_data = tbChiefComplaint.Value.ToString();
                if (postBillingDomainContext.mr_chief_complaints.Count() == 0)
                    postBillingDomainContext.mr_chief_complaints.Add(mrChiefComplaintObj);

                foreach (cpt_code cptCode in cptWidget.mrDxCPTCollection)
                {
                    SavePlanProcedure(cptCode, mrPatientEncounterObj, this.ppFFId.Value, this.cptId.Value);
                }
                DeletePlanProcedure();
                IList<mr_patient_encounter_cpt_diagnosis_association> lstmr_patient_encounter_cpt_diagnosis_association = postBillingDomainContext.mr_patient_encounter_cpt_diagnosis_associations.ToList();
                foreach (mr_patient_encounter_cpt_diagnosis_association mpecptda in lstmr_patient_encounter_cpt_diagnosis_association)
                {
                    postBillingDomainContext.mr_patient_encounter_cpt_diagnosis_associations.Remove(mpecptda);
                }
                IList<billers_note> lstbillers_notes = postBillingDomainContext.billers_notes.ToList();
                foreach (billers_note bn in lstbillers_notes)
                {
                    postBillingDomainContext.billers_notes.Remove(bn);
                }

                System.ServiceModel.DomainServices.Client.SubmitOperation sepbSubmitOp = postBillingDomainContext.SubmitChanges();
                sepbSubmitOp.Completed += new EventHandler(sepbSubmitOp_Completed);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
                ButtonEnable();
            }
        }
        private void BindIcdCodes()
        {
            icdWidget.removeML.Clear();
            ICDCodeDomainContext icd9DiagnosisDomainContext = new ICDCodeDomainContext();
            var querySelectedIcd = from icd9 in icd9DiagnosisDomainContext.GetSelectedIcdCodesQuery(mrPatientEncounter.mr_patient_encounter_id)
                                   select icd9;

            LoadOperation<CustomFormattedICDCrossmapSelected> loadSelectedIcdByEncounterOp = icd9DiagnosisDomainContext.Load(querySelectedIcd);
            loadSelectedIcdByEncounterOp.Completed += new EventHandler(loadSelectedIcdByEncounterOp_Completed);
        }
        void sepbSubmitOp_Completed(object sender, EventArgs e)
        {
            System.ServiceModel.DomainServices.Client.SubmitOperation op = (SubmitOperation)sender;

            if (op.HasError)
            {
                op.MarkErrorAsHandled();
                MessageBox.Show(op.Error.Message);
                ButtonEnable();
            }
            else
            {

                if (op.ChangeSet.AddedEntities.Count() > 0)
                {
                    foreach (var obj in op.ChangeSet.AddedEntities)
                    {
                        foreach (string str in obj.GetType().FullName.Split(".".ToCharArray()))
                        {
                            if (str == "mr_patient_encounter")
                            {
                                mrPatientEncounter = (mr_patient_encounter)obj;

                                break;
                            }
                        }
                        if (mrPatientEncounter != null)
                            break;
                    }
                }
                if (mrPatientEncounter == null)
                {
                    InformationWindow iw = new InformationWindow("Error in saving post charges.");
                    iw.Show();
                    this.DialogResult = false;

                }
                else

                    BindIcdCodes();

                InvokeOperation invokeOp = new TemplateDomainContext().AddOrGetBillingSections(mrPatientEncounter.mr_patient_encounter_id, App.global_user.user_id);

                SaveAdditionalBillingDetails(mrPatientEncounter.mr_patient_encounter_id);
                invokeOp.Completed += (inkOpSender, inkOpEvent) =>
                {
                    InvokeOperation invokeOpCompleted = (InvokeOperation)inkOpSender;
                    if (invokeOpCompleted.HasError)
                    {
                        invokeOpCompleted.MarkErrorAsHandled();
                        MessageBox.Show(invokeOpCompleted.Error.Message);
                        ButtonEnable();
                    }
                    else
                    {

                        if (icdWidget.mrDxCollectionCustomObjects.Count() > 0 && cptWidget.mrDxCPTCollection.Count() > 0)
                        {
                            AddCurrentCPTADCodesAssociation();
                            System.ServiceModel.DomainServices.Client.SubmitOperation pbSubmitOp = postBillingDomainContext.SubmitChanges();
                            pbSubmitOp.Completed += new EventHandler(pbSubmitOp_Completed);
                        }
                        else
                        {
                            loadBatchPostCharges = new DomainContextLoadBatch(DataLoadComplete);
                            GetEncounterDetails(mrPatientEncounter.mr_patient_encounter_id);
                            if (cfAppointment == null && appointmentObject != null)
                                BindCurrentAppointment(appointmentObject.appointment_id);
                        }

                    }
                };


            }
        }

        private void LoadSavedData()
        {
        }

        void pbSubmitOp_Completed(object sender, EventArgs e)
        {
            System.ServiceModel.DomainServices.Client.SubmitOperation op = (SubmitOperation)sender;

            if (op.HasError)
            {
                op.MarkErrorAsHandled();
                MessageBox.Show(op.Error.Message);
                ButtonEnable();
            }
            else
            {
                if (!isButonSaveOnlyClicked)
                {

                    bool as1 = (ChkAs1.IsChecked != null);
                    bool as2 = (ChkAs2.IsChecked != null);
                    bool as3 = (ChkAs3.IsChecked != null);
                    System.ServiceModel.DomainServices.Client.InvokeOperation pbInvokeOp = new PostBillingDomainContext().SavePostBilling(mrPatientEncounter.mr_patient_encounter_id, (cfAppointment != null ? cfAppointment.patientId : patientObject.patientId), (cfAppointment != null ? cfAppointment.appointmentId : appointmentObject.appointment_id), (cfAppointment != null ? cfAppointment.visitId : visitObject.visit_id), (cfAppointment != null ? cfAppointment.facilityId : visitObject.facility_id), mrPatientEncounter.department_id, App.global_user.user_id, ((CustomFormattedPersonMinimumDetails)DdlPhysicianPstChrg.SelectedItem).physician_id, RdpDateOfService.SelectedDate.Value, dpAdmitDate.SelectedDate, dpDischargeDate.SelectedDate, OtherClaimIDP.Text, OtherClaimIDS.Text, OtherClaimIDT.Text, as1, as2, as3);
                    pbInvokeOp.Completed += new EventHandler(pbInvokeOp_Completed);
                }
                else
                {
                    loadBatchPostCharges = new DomainContextLoadBatch(DataLoadComplete);
                    GetEncounterDetails(mrPatientEncounter.mr_patient_encounter_id);
                    if (cfAppointment == null && appointmentObject != null)
                        BindCurrentAppointment(appointmentObject.appointment_id);
                }
            }
        }

        void pbInvokeOp_Completed(object sender, EventArgs e)
        {
            try
            {
                InvokeOperation pbInvokeOp = (InvokeOperation)sender;
                if (pbInvokeOp.HasError)
                {
                    pbInvokeOp.MarkErrorAsHandled();
                    MessageBox.Show(pbInvokeOp.Error.Message);
                    ButtonEnable();
                    this.DialogResult = false;
                }
                else if (isButonApproveAndSubmittedClicked || isButonSaveApproveNotSubmitClaimClicked || isButonSaveClicked)
                {
                    if (pbInvokeOp.Value.ToString() == "Success")
                    {
                        if (isButonSaveClicked)
                        {
                            SuccessWindow successWindow = new SuccessWindow("Post charges saved successfully.");
                            successWindow.ShowDialog();
                            this.DialogResult = true;
                        }
                        else if (isButonApproveAndSubmittedClicked || isButonSaveApproveNotSubmitClaimClicked)
                        {

                            if (!isButonApproveAndSubmittedClicked)
                            {
                                var query = from sb in postBillingDomainContext.GetSuperbillsQuery() where sb.mr_patient_encounter_id == mrPatientEncounter.mr_patient_encounter_id select sb;
                                LoadOperation<superbill> loadOp = postBillingDomainContext.Load(query);
                                loadOp.Completed += (sndr, evnt) =>
                                {
                                    LoadOperation<superbill> loadOpCompleted = (LoadOperation<superbill>)sndr;
                                    if (loadOpCompleted.HasError)
                                    {
                                        MessageBox.Show(loadOpCompleted.Error.Message);
                                        ButtonEnable();
                                        return;
                                    }
                                    if (loadOpCompleted.Entities.Count() == 0)
                                    {
                                        MessageBox.Show("Bill has not been posted. Please post the bill.");
                                        ButtonEnable();
                                        return;
                                    }
                                    int[] selectedBills = new int[1];
                                    selectedBills[0] = loadOpCompleted.Entities.FirstOrDefault().super_bill_id;
                                    this.superBillId = selectedBills[0];
                                    InvokeOperation postToBillingInvokeOp = new PostBillingDomainContext().SaveAndSubmitBills(selectedBills, App.global_user.user_id, App.global_core_practice_details_id, false);
                                    postToBillingInvokeOp.Completed += new EventHandler(postToBillingInvokeOp_Completed);
                                };
                            }
                            else
                            {
                                if (!flagSelfPay)
                                    PostChargesBusyIndicator.BusyContent = "Sending claim to GatewayEDI...";
                                System.ServiceModel.DomainServices.Client.InvokeOperation scInvokeOp = new PostBillingDomainContext().SubmitClaims(mrPatientEncounter.mr_patient_encounter_id, App.global_user.user_id, App.global_core_practice_details_id);
                                scInvokeOp.Completed += new EventHandler(scInvokeOp_Completed);
                            }
                        }
                        if (isButtonSaveAndPrintHCFAClicked)
                            LoadReport(mrPatientEncounter.mr_patient_encounter_id);
                    }
                    else
                    {
                        InformationWindow informationWindow = new InformationWindow("Error in saving post charges.");
                        informationWindow.Show();
                        this.DialogResult = false;
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
                ButtonEnable();
                this.DialogResult = false;
            }
        }

        private void postToBillingInvokeOp_Completed(object sender, EventArgs e)
        {
            try
            {
                InvokeOperation ecInvokeOp = (InvokeOperation)sender;
                if (ecInvokeOp.HasError)
                {
                    ecInvokeOp.MarkErrorAsHandled();
                    InformationWindow errorMsg = new InformationWindow(ecInvokeOp.Error.Message);
                    errorMsg.Show();
                    ButtonEnable();
                }
                else
                {
                    if (ecInvokeOp.Value.ToString().Length > 0)
                    {
                        if (ecInvokeOp.Value.ToString() == "Bill(s) has been posted successfully.")
                            this.DialogResult = true;
                        else
                            ButtonEnable();
                        string message = ecInvokeOp.Value.ToString().Replace("|", "\n");
                        InformationWindow infoWin = new InformationWindow(message);
                        infoWin.Show();
                    }
                    else
                    {

                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
                ButtonEnable();
            }
        }

        void scInvokeOp_Completed(object sender, EventArgs e)
        {
            try
            {
                InvokeOperation ecInvokeOp = (InvokeOperation)sender;
                if (ecInvokeOp.HasError)
                {
                    ecInvokeOp.MarkErrorAsHandled();
                    if (ecInvokeOp.Error.Message.Contains("Invoke operation 'GetClaimsFile' failed."))
                    {
                        InformationWindow errorMsg = new InformationWindow(ecInvokeOp.Error.Message.Replace("Invoke operation 'GetClaimsFile' failed. ", string.Empty));
                        errorMsg.Show();
                    }
                    else
                    {
                        InformationWindow errorMsg = new InformationWindow(ecInvokeOp.Error.Message);
                        errorMsg.Show();
                    }
                    this.DialogResult = false;
                    ButtonEnable();
                }
                else
                {
                    if (ecInvokeOp.Value.ToString().Length > 0)
                    {
                        if (ecInvokeOp.Value.ToString() == "The claims has been sent to GatewayEDI successfully.")
                            this.DialogResult = true;
                        else
                            ButtonEnable();
                        string message = ecInvokeOp.Value.ToString().Replace("|", "\n");
                        InformationWindow infoWin = new InformationWindow(message);
                        infoWin.Show();
                    }
                    else
                    {

                    }
                    this.DialogResult = true;
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
                ButtonEnable();
                this.DialogResult = false;
            }
        }

        void AddCurrentCPTADCodesAssociation()
        {
            try
            {
                mr_patient_encounter_cpt_diagnosis_association mpecptda = null;
                foreach (CustomFormattedCPTDiagnosisAssociation cfcptda in lstcurrent_custom_cpt_diagnosis_association)
                {
                    int dc_id = 1;
                    mpecptda = new mr_patient_encounter_cpt_diagnosis_association();
                    mpecptda.patient_id = cfAppointment != null ? cfAppointment.patientId : patientObject.patientId;
                    mpecptda.mr_patient_encounter_id = encounterId != 0 ? encounterId : mrPatientEncounter.mr_patient_encounter_id;
                    mpecptda.physician_id = ((CustomFormattedPersonMinimumDetails)DdlPhysicianPstChrg.SelectedItem).physician_id; //((IQueryable<CustomFormattedPersonMinimumDetails>)DdlPhysicianPstChrg.ItemsSource.AsQueryable()).Where(q => q.physician_id == cfAppointment.physicianId).FirstOrDefault().physician_id; 
                    mpecptda.cpt_code = cfcptda.cpt_code;
                    if (cfcptda.assessment_diagnosis_code1_checked)
                    {
                        if (cfcptda.assessment_diagnosis_code1_id != null)
                        {
                            mpecptda.diagnosis1_code = (cfcptda.assessment_diagnosis_code1.ToString());
                            dc_id = 2;
                        }
                    }

                    if (cfcptda.assessment_diagnosis_code2_checked)
                    {
                        if (cfcptda.assessment_diagnosis_code2_id != null)
                        {
                            if (dc_id == 1)
                            {
                                mpecptda.diagnosis1_code = (cfcptda.assessment_diagnosis_code2.ToString());
                                dc_id = 2;
                            }
                            else
                            {
                                mpecptda.diagnosis2_code = (cfcptda.assessment_diagnosis_code2.ToString());
                                dc_id = 3;
                            }
                        }
                    }

                    if (cfcptda.assessment_diagnosis_code3_checked)
                    {
                        if (cfcptda.assessment_diagnosis_code3_id != null)
                        {
                            switch (dc_id)
                            {
                                case 1:
                                    mpecptda.diagnosis1_code = (cfcptda.assessment_diagnosis_code3.ToString());
                                    dc_id = 2;
                                    break;
                                case 2:
                                    mpecptda.diagnosis2_code = (cfcptda.assessment_diagnosis_code3.ToString());
                                    dc_id = 3;
                                    break;
                                case 3:
                                    mpecptda.diagnosis3_code = (cfcptda.assessment_diagnosis_code3.ToString());
                                    dc_id = 4;
                                    break;
                            }
                        }
                    }

                    if (cfcptda.assessment_diagnosis_code4_checked)
                    {
                        if (cfcptda.assessment_diagnosis_code4_id != null)
                        {
                            switch (dc_id)
                            {
                                case 1:
                                    mpecptda.diagnosis1_code = (cfcptda.assessment_diagnosis_code4.ToString());
                                    dc_id = 2;
                                    break;
                                case 2:
                                    mpecptda.diagnosis2_code = (cfcptda.assessment_diagnosis_code4.ToString());
                                    dc_id = 3;
                                    break;
                                case 3:
                                    mpecptda.diagnosis3_code = (cfcptda.assessment_diagnosis_code4.ToString());
                                    dc_id = 4;
                                    break;
                                case 4:
                                    mpecptda.diagnosis4_code = (cfcptda.assessment_diagnosis_code4.ToString());
                                    dc_id = 5;
                                    break;
                            }
                        }
                    }

                    if (cfcptda.assessment_diagnosis_code5_checked)
                    {
                        if (cfcptda.assessment_diagnosis_code5_id != null)
                        {
                            switch (dc_id)
                            {
                                case 1:
                                    mpecptda.diagnosis1_code = (cfcptda.assessment_diagnosis_code5.ToString());
                                    dc_id = 2;
                                    break;
                                case 2:
                                    mpecptda.diagnosis2_code = (cfcptda.assessment_diagnosis_code5.ToString());
                                    dc_id = 3;
                                    break;
                                case 3:
                                    mpecptda.diagnosis3_code = (cfcptda.assessment_diagnosis_code5.ToString());
                                    dc_id = 4;
                                    break;
                                case 4:
                                    mpecptda.diagnosis4_code = (cfcptda.assessment_diagnosis_code5.ToString());
                                    dc_id = 5;
                                    break;
                                case 5:
                                    mpecptda.diagnosis5_code = (cfcptda.assessment_diagnosis_code5.ToString());
                                    dc_id = 6;
                                    break;
                            }
                        }
                    }

                    if (cfcptda.assessment_diagnosis_code6_checked)
                    {
                        if (cfcptda.assessment_diagnosis_code6_id != null)
                        {
                            switch (dc_id)
                            {
                                case 1:
                                    mpecptda.diagnosis1_code = (cfcptda.assessment_diagnosis_code6.ToString());
                                    dc_id = 2;
                                    break;
                                case 2:
                                    mpecptda.diagnosis2_code = (cfcptda.assessment_diagnosis_code6.ToString());
                                    dc_id = 3;
                                    break;
                                case 3:
                                    mpecptda.diagnosis3_code = (cfcptda.assessment_diagnosis_code6.ToString());
                                    dc_id = 4;
                                    break;
                                case 4:
                                    mpecptda.diagnosis4_code = (cfcptda.assessment_diagnosis_code6.ToString());
                                    dc_id = 5;
                                    break;
                                case 5:
                                    mpecptda.diagnosis5_code = (cfcptda.assessment_diagnosis_code6.ToString());
                                    dc_id = 6;
                                    break;
                                case 6:
                                    mpecptda.diagnosis6_code = (cfcptda.assessment_diagnosis_code6.ToString());
                                    dc_id = 7;
                                    break;
                            }
                        }
                    }

                    if (cfcptda.assessment_diagnosis_code7_checked)
                    {
                        if (cfcptda.assessment_diagnosis_code7_id != null)
                        {
                            switch (dc_id)
                            {
                                case 1:
                                    mpecptda.diagnosis1_code = (cfcptda.assessment_diagnosis_code7.ToString());
                                    dc_id = 2;
                                    break;
                                case 2:
                                    mpecptda.diagnosis2_code = (cfcptda.assessment_diagnosis_code7.ToString());
                                    dc_id = 3;
                                    break;
                                case 3:
                                    mpecptda.diagnosis3_code = (cfcptda.assessment_diagnosis_code7.ToString());
                                    dc_id = 4;
                                    break;
                                case 4:
                                    mpecptda.diagnosis4_code = (cfcptda.assessment_diagnosis_code7.ToString());
                                    dc_id = 5;
                                    break;
                                case 5:
                                    mpecptda.diagnosis5_code = (cfcptda.assessment_diagnosis_code7.ToString());
                                    dc_id = 6;
                                    break;
                                case 6:
                                    mpecptda.diagnosis6_code = (cfcptda.assessment_diagnosis_code7.ToString());
                                    dc_id = 7;
                                    break;
                                case 7:
                                    mpecptda.diagnosis7_code = (cfcptda.assessment_diagnosis_code7.ToString());
                                    dc_id = 8;
                                    break;
                            }
                        }
                    }

                    if (cfcptda.assessment_diagnosis_code8_checked)
                    {
                        if (cfcptda.assessment_diagnosis_code8_id != null)
                        {
                            switch (dc_id)
                            {
                                case 1:
                                    mpecptda.diagnosis1_code = (cfcptda.assessment_diagnosis_code8.ToString());
                                    dc_id = 2;
                                    break;
                                case 2:
                                    mpecptda.diagnosis2_code = (cfcptda.assessment_diagnosis_code8.ToString());
                                    dc_id = 3;
                                    break;
                                case 3:
                                    mpecptda.diagnosis3_code = (cfcptda.assessment_diagnosis_code8.ToString());
                                    dc_id = 4;
                                    break;
                                case 4:
                                    mpecptda.diagnosis4_code = (cfcptda.assessment_diagnosis_code8.ToString());
                                    dc_id = 5;
                                    break;
                                case 5:
                                    mpecptda.diagnosis5_code = (cfcptda.assessment_diagnosis_code8.ToString());
                                    dc_id = 6;
                                    break;
                                case 6:
                                    mpecptda.diagnosis6_code = (cfcptda.assessment_diagnosis_code8.ToString());
                                    dc_id = 7;
                                    break;
                                case 7:
                                    mpecptda.diagnosis7_code = (cfcptda.assessment_diagnosis_code8.ToString());
                                    dc_id = 8;
                                    break;
                                case 8:
                                    mpecptda.diagnosis8_code = (cfcptda.assessment_diagnosis_code8.ToString());
                                    dc_id = 9;
                                    break;

                            }
                        }
                    }
                    if (cfcptda.assessment_diagnosis_code9_checked)
                    {
                        if (cfcptda.assessment_diagnosis_code9_id != null)
                        {
                            switch (dc_id)
                            {
                                case 1:
                                    mpecptda.diagnosis1_code = (cfcptda.assessment_diagnosis_code9.ToString());
                                    dc_id = 2;
                                    break;
                                case 2:
                                    mpecptda.diagnosis1_code = (cfcptda.assessment_diagnosis_code9.ToString());
                                    dc_id = 3;
                                    break;
                                case 3:
                                    mpecptda.diagnosis2_code = (cfcptda.assessment_diagnosis_code9.ToString());
                                    dc_id = 4;
                                    break;
                                case 4:
                                    mpecptda.diagnosis3_code = (cfcptda.assessment_diagnosis_code9.ToString());
                                    dc_id = 5;
                                    break;
                                case 5:
                                    mpecptda.diagnosis4_code = (cfcptda.assessment_diagnosis_code9.ToString());
                                    dc_id = 6;
                                    break;
                                case 6:
                                    mpecptda.diagnosis5_code = (cfcptda.assessment_diagnosis_code9.ToString());
                                    dc_id = 7;
                                    break;
                                case 7:
                                    mpecptda.diagnosis6_code = (cfcptda.assessment_diagnosis_code9.ToString());
                                    dc_id = 8;
                                    break;
                                case 8:
                                    mpecptda.diagnosis7_code = (cfcptda.assessment_diagnosis_code9.ToString());
                                    dc_id = 9;
                                    break;
                                case 9:
                                    mpecptda.diagnosis8_code = (cfcptda.assessment_diagnosis_code9.ToString());
                                    dc_id = 10;
                                    break;
                            }
                        }
                    }
                    if (cfcptda.assessment_diagnosis_code10_checked)
                    {
                        if (cfcptda.assessment_diagnosis_code10_id != null)
                        {
                            switch (dc_id)
                            {
                                case 1:
                                    mpecptda.diagnosis1_code = (cfcptda.assessment_diagnosis_code10.ToString());
                                    dc_id = 2;
                                    break;
                                case 2:
                                    mpecptda.diagnosis2_code = (cfcptda.assessment_diagnosis_code10.ToString());
                                    dc_id = 3;
                                    break;
                                case 3:
                                    mpecptda.diagnosis3_code = (cfcptda.assessment_diagnosis_code10.ToString());
                                    dc_id = 4;
                                    break;
                                case 4:
                                    mpecptda.diagnosis4_code = (cfcptda.assessment_diagnosis_code10.ToString());
                                    dc_id = 5;
                                    break;
                                case 5:
                                    mpecptda.diagnosis5_code = (cfcptda.assessment_diagnosis_code10.ToString());
                                    dc_id = 6;
                                    break;
                                case 6:
                                    mpecptda.diagnosis6_code = (cfcptda.assessment_diagnosis_code10.ToString());
                                    dc_id = 7;
                                    break;
                                case 7:
                                    mpecptda.diagnosis7_code = (cfcptda.assessment_diagnosis_code10.ToString());
                                    dc_id = 8;
                                    break;
                                case 8:
                                    mpecptda.diagnosis8_code = (cfcptda.assessment_diagnosis_code10.ToString());
                                    dc_id = 9;
                                    break;
                                case 9:
                                    mpecptda.diagnosis9_code = (cfcptda.assessment_diagnosis_code10.ToString());
                                    dc_id = 10;
                                    break;

                                case 10:
                                    mpecptda.diagnosis10_code = (cfcptda.assessment_diagnosis_code10.ToString());
                                    dc_id = 11;
                                    break;
                            }
                        }
                    }
                    if (cfcptda.assessment_diagnosis_code11_checked)
                    {
                        if (cfcptda.assessment_diagnosis_code11_id != null)
                        {
                            switch (dc_id)
                            {
                                case 1:
                                    mpecptda.diagnosis1_code = (cfcptda.assessment_diagnosis_code11.ToString());
                                    dc_id = 2;
                                    break;
                                case 2:
                                    mpecptda.diagnosis2_code = (cfcptda.assessment_diagnosis_code11.ToString());
                                    dc_id = 3;
                                    break;
                                case 3:
                                    mpecptda.diagnosis3_code = (cfcptda.assessment_diagnosis_code11.ToString());
                                    dc_id = 4;
                                    break;
                                case 4:
                                    mpecptda.diagnosis4_code = (cfcptda.assessment_diagnosis_code11.ToString());
                                    dc_id = 5;
                                    break;
                                case 5:
                                    mpecptda.diagnosis5_code = (cfcptda.assessment_diagnosis_code11.ToString());
                                    dc_id = 6;
                                    break;
                                case 6:
                                    mpecptda.diagnosis6_code = (cfcptda.assessment_diagnosis_code11.ToString());
                                    dc_id = 7;
                                    break;
                                case 7:
                                    mpecptda.diagnosis7_code = (cfcptda.assessment_diagnosis_code11.ToString());
                                    dc_id = 8;
                                    break;
                                case 8:
                                    mpecptda.diagnosis8_code = (cfcptda.assessment_diagnosis_code11.ToString());
                                    dc_id = 9;
                                    break;
                                case 9:
                                    mpecptda.diagnosis9_code = (cfcptda.assessment_diagnosis_code11.ToString());
                                    dc_id = 10;
                                    break;
                                case 10:
                                    mpecptda.diagnosis10_code = (cfcptda.assessment_diagnosis_code11.ToString());
                                    dc_id = 11;
                                    break;
                                case 11:
                                    mpecptda.diagnosis11_code = (cfcptda.assessment_diagnosis_code11.ToString());
                                    dc_id = 12;
                                    break;
                            }
                        }
                    }
                    if (cfcptda.assessment_diagnosis_code12_checked)
                    {
                        if (cfcptda.assessment_diagnosis_code12_id != null)
                        {
                            switch (dc_id)
                            {
                                case 1:
                                    mpecptda.diagnosis1_code = (cfcptda.assessment_diagnosis_code12.ToString());
                                    dc_id = 2;
                                    break;
                                case 2:
                                    mpecptda.diagnosis2_code = (cfcptda.assessment_diagnosis_code12.ToString());
                                    dc_id = 3;
                                    break;
                                case 3:
                                    mpecptda.diagnosis3_code = (cfcptda.assessment_diagnosis_code12.ToString());
                                    dc_id = 4;
                                    break;
                                case 4:
                                    mpecptda.diagnosis4_code = (cfcptda.assessment_diagnosis_code12.ToString());
                                    dc_id = 5;
                                    break;
                                case 5:
                                    mpecptda.diagnosis5_code = (cfcptda.assessment_diagnosis_code12.ToString());
                                    dc_id = 6;
                                    break;
                                case 6:
                                    mpecptda.diagnosis6_code = (cfcptda.assessment_diagnosis_code12.ToString());
                                    dc_id = 7;
                                    break;
                                case 7:
                                    mpecptda.diagnosis7_code = (cfcptda.assessment_diagnosis_code12.ToString());
                                    dc_id = 8;
                                    break;
                                case 8:
                                    mpecptda.diagnosis8_code = (cfcptda.assessment_diagnosis_code12.ToString());
                                    dc_id = 9;
                                    break;
                                case 9:
                                    mpecptda.diagnosis9_code = (cfcptda.assessment_diagnosis_code12.ToString());
                                    dc_id = 10;
                                    break;
                                case 10:
                                    mpecptda.diagnosis10_code = (cfcptda.assessment_diagnosis_code12.ToString());
                                    dc_id = 11;
                                    break;
                                case 11:
                                    mpecptda.diagnosis11_code = (cfcptda.assessment_diagnosis_code12.ToString());
                                    dc_id = 12;
                                    break;
                                case 12:
                                    mpecptda.diagnosis12_code = (cfcptda.assessment_diagnosis_code12.ToString());
                                    dc_id = 13;
                                    break;
                            }
                        }
                    }
                    //switch (dc_id)
                    //{
                    //    case 2:
                    //        mpecptda.diagnosis2_id = null;
                    //        mpecptda.diagnosis3_id = null;
                    //        mpecptda.diagnosis4_id = null;
                    //        mpecptda.diagnosis5_id = null;
                    //        mpecptda.diagnosis6_id = null;
                    //        mpecptda.diagnosis7_id = null;
                    //        mpecptda.diagnosis8_id = null;
                    //        break;
                    //    case 3:
                    //        mpecptda.diagnosis3_id = null;
                    //        mpecptda.diagnosis4_id = null;
                    //        mpecptda.diagnosis5_id = null;
                    //        mpecptda.diagnosis6_id = null;
                    //        mpecptda.diagnosis7_id = null;
                    //        mpecptda.diagnosis8_id = null;
                    //        break;
                    //    case 4:
                    //        mpecptda.diagnosis4_id = null;
                    //        mpecptda.diagnosis5_id = null;
                    //        mpecptda.diagnosis6_id = null;
                    //        mpecptda.diagnosis7_id = null;
                    //        mpecptda.diagnosis8_id = null;
                    //        break;
                    //    case 5:
                    //        mpecptda.diagnosis5_id = null;
                    //        mpecptda.diagnosis6_id = null;
                    //        mpecptda.diagnosis7_id = null;
                    //        mpecptda.diagnosis8_id = null;
                    //        break;
                    //    case 6:
                    //        mpecptda.diagnosis6_id = null;
                    //        mpecptda.diagnosis7_id = null;
                    //        mpecptda.diagnosis8_id = null;
                    //        break;
                    //    case 7:
                    //        mpecptda.diagnosis7_id = null;
                    //        mpecptda.diagnosis8_id = null;
                    //        break;
                    //    case 8:
                    //        mpecptda.diagnosis8_id = null;
                    //        break;
                    //}
                    switch (dc_id)
                    {
                        //case 1:
                        //    mpecptda.diagnosis1_id = null;
                        //    mpecptda.diagnosis2_id = null;
                        //    mpecptda.diagnosis3_id = null;
                        //    mpecptda.diagnosis4_id = null;
                        //    mpecptda.diagnosis5_id = null;
                        //    mpecptda.diagnosis6_id = null;
                        //    mpecptda.diagnosis7_id = null;
                        //    mpecptda.diagnosis8_id = null;
                        //    mpecptda.diagnosis9_id = null;
                        //    mpecptda.diagnosis10_id = null;
                        //    mpecptda.diagnosis11_id = null;
                        //    mpecptda.diagnosis12_id = null;
                        //    break;
                        case 2:
                            mpecptda.diagnosis2_code = null;
                            mpecptda.diagnosis3_code = null;
                            mpecptda.diagnosis4_code = null;
                            mpecptda.diagnosis5_code = null;
                            mpecptda.diagnosis6_code = null;
                            mpecptda.diagnosis7_code = null;
                            mpecptda.diagnosis8_code = null;
                            mpecptda.diagnosis9_code = null;
                            mpecptda.diagnosis10_code = null;
                            mpecptda.diagnosis11_code = null;
                            mpecptda.diagnosis12_code = null;
                            break;

                        case 3:
                            mpecptda.diagnosis3_code = null;
                            mpecptda.diagnosis4_code = null;
                            mpecptda.diagnosis5_code = null;
                            mpecptda.diagnosis6_code = null;
                            mpecptda.diagnosis7_code = null;
                            mpecptda.diagnosis8_code = null;
                            mpecptda.diagnosis9_code = null;
                            mpecptda.diagnosis10_code = null;
                            mpecptda.diagnosis11_code = null;
                            mpecptda.diagnosis12_code = null;
                            break;
                        case 4:
                            mpecptda.diagnosis4_code = null;
                            mpecptda.diagnosis5_code = null;
                            mpecptda.diagnosis6_code = null;
                            mpecptda.diagnosis7_code = null;
                            mpecptda.diagnosis8_code = null;
                            mpecptda.diagnosis9_code = null;
                            mpecptda.diagnosis10_code = null;
                            mpecptda.diagnosis11_code = null;
                            mpecptda.diagnosis12_code = null;
                            break;
                        case 5:
                            mpecptda.diagnosis5_code = null;
                            mpecptda.diagnosis6_code = null;
                            mpecptda.diagnosis7_code = null;
                            mpecptda.diagnosis8_code = null;
                            mpecptda.diagnosis9_code = null;
                            mpecptda.diagnosis10_code = null;
                            mpecptda.diagnosis11_code = null;
                            mpecptda.diagnosis12_code = null;
                            break;
                        case 6:
                            mpecptda.diagnosis6_code = null;
                            mpecptda.diagnosis7_code = null;
                            mpecptda.diagnosis8_code = null;
                            mpecptda.diagnosis9_code = null;
                            mpecptda.diagnosis10_code = null;
                            mpecptda.diagnosis11_code = null;
                            mpecptda.diagnosis12_code = null;
                            break;
                        case 7:
                            mpecptda.diagnosis7_code = null;
                            mpecptda.diagnosis8_code = null;
                            mpecptda.diagnosis9_code = null;
                            mpecptda.diagnosis10_code = null;
                            mpecptda.diagnosis11_code = null;
                            mpecptda.diagnosis12_code = null;
                            break;
                        case 8:
                            mpecptda.diagnosis8_code = null;
                            mpecptda.diagnosis9_code = null;
                            mpecptda.diagnosis10_code = null;
                            mpecptda.diagnosis11_code = null;
                            mpecptda.diagnosis12_code = null;
                            break;
                        case 9:
                            mpecptda.diagnosis9_code = null;
                            mpecptda.diagnosis10_code = null;
                            mpecptda.diagnosis11_code = null;
                            mpecptda.diagnosis12_code = null;
                            break;
                        case 10:
                            mpecptda.diagnosis10_code = null;
                            mpecptda.diagnosis11_code = null;
                            mpecptda.diagnosis12_code = null;
                            break;
                        case 11:
                            mpecptda.diagnosis11_code = null;
                            mpecptda.diagnosis12_code = null;
                            break;
                        case 12:
                            mpecptda.diagnosis12_code = null;
                            break;
                    }
                    mpecptda.modifier1 = cfcptda.cpt_code_modifier1 == null ? null : cfcptda.cpt_code_modifier1.ToString().Trim();
                    mpecptda.modifier2 = cfcptda.cpt_code_modifier2 == null ? null : cfcptda.cpt_code_modifier2.ToString().Trim(); ;
                    mpecptda.modifier3 = cfcptda.cpt_code_modifier3 == null ? null : cfcptda.cpt_code_modifier3.ToString().Trim(); ;
                    mpecptda.modifier4 = cfcptda.cpt_code_modifier4 == null ? null : cfcptda.cpt_code_modifier4.ToString().Trim(); ;
                    mpecptda.units = Convert.ToDecimal(cfcptda.decimalunits);// == null ? null : decimal.Parse(cfcptda.pastUnits.ToString());
                    mpecptda.place_of_service_code = Convert.ToInt32(cfcptda.posc);// == null ? cfcptda.posc : int.Parse(cfcptda.pastPOSC.ToString());
                    mpecptda.insurance_prior_authorization_number = cfcptda.insurance_prior_authorization_number == null ? null : cfcptda.insurance_prior_authorization_number.ToString().Trim();
                    mpecptda.service_start_date = cfcptda.service_start_date;
                    mpecptda.service_end_date = cfcptda.service_end_date;
                    mpecptda.modify_unit_charge = cfcptda.modify_unit_charge;
                    mpecptda.rvu_value = cfcptda.rvu_value;
                    mpecptda.selected_pointer = cfcptda.pointers;
                    if (cfcptda.modify_unit_charge)
                        mpecptda.procedure_unit_charge = cfcptda.modified_procedure_unit_charge;
                    else
                        mpecptda.procedure_unit_charge = cfcptda.procedure_unit_charge;
                    mpecptda.date_last_updated = DateTime.Now;
                    mpecptda.last_updated_by_user_id = App.global_user.user_id;
                    //if (pastcfcptda == null)
                    //{
                    mpecptda.date_created = DateTime.Now;
                    mpecptda.created_by_user_id = App.global_user.user_id;
                    postBillingDomainContext.mr_patient_encounter_cpt_diagnosis_associations.Add(mpecptda);
                    //if (cfcptda.billersNoteId == null)
                    AddBillerNotes(cfcptda.billersNote, mrPatientEncounter.patient_id, true, postBillingDomainContext.mr_patient_encounter_cpt_diagnosis_associations.LastOrDefault());
                    //else
                    //    UpdateBillerNotes(cfcptda.billersNote, cfcptda.billersNoteId.Value);
                    //}

                }
            }
            catch (Exception ex)
            {
                InformationWindow iw = new InformationWindow(ex.Message);
                iw.Show();
                ButtonEnable();
            }

        }

        private void DeletePlanProcedure()
        {
            IList<mr_plan_procedure> lstMRPP = postBillingDomainContext.mr_plan_procedures.ToList();
            foreach (mr_plan_procedure mrpp in lstMRPP)
            {
                if (cptWidget.mrDxCPTCollection.Where(q => q.cpt_code1 == mrpp.selected_cpt_code).FirstOrDefault() == null)
                { postBillingDomainContext.mr_plan_procedures.Remove(mrpp); }
            }
        }

        private void SavePlanProcedure(cpt_code cptCode, mr_patient_encounter mrPatientEncounterObj, int ppFFId, int ppTSId)
        {
            mr_plan_procedure mrPlanProcedureObj;
            CustomFormattedCPTDiagnosisAssociation existsCFCptDa = lstcurrent_custom_cpt_diagnosis_association.FirstOrDefault(q => q.cpt_code == cptCode.cpt_code1 && q.is_cpt_level_of_service == false && q.is_cpt_deleted == "Collapsed");
            if (postBillingDomainContext.mr_plan_procedures.FirstOrDefault(q => q.selected_cpt_code == cptCode.cpt_code1) != null)
                mrPlanProcedureObj = postBillingDomainContext.mr_plan_procedures.FirstOrDefault(q => q.selected_cpt_code == cptCode.cpt_code1);
            else
                mrPlanProcedureObj = new mr_plan_procedure();
            mrPlanProcedureObj.mr_patient_encounter_id = mrPatientEncounterObj.mr_patient_encounter_id;
            mrPlanProcedureObj.patient_id = cfAppointment != null ? cfAppointment.patientId : patientObject.patientId;
            try
            {
                mrPlanProcedureObj.mr_form_field_id = ppFFId;
                mrPlanProcedureObj.mr_template_section_id = ppTSId;
            }
            catch (Exception ex)
            {
                InformationWindow iw = new InformationWindow("CPT Widget in selected billing template is not valid. Please create template using CPT Widget.");
                iw.Show();
                postBillingDomainContext.RejectChanges();
                ButtonEnable();
                return;
            }

            if (cptCode.cpt_code1.Trim().Length > 0)
            {
                mrPlanProcedureObj.selected_cpt_code = cptCode.cpt_code1;
                mrPlanProcedureObj.entered_data = cptCode.cpt_code1;
            }
            if (existsCFCptDa != null && existsCFCptDa.decimalunits != null)
                mrPlanProcedureObj.unit = existsCFCptDa.decimalunits.Value.ToString();
            else
                mrPlanProcedureObj.unit = "1";
            if (existsCFCptDa != null && !string.IsNullOrEmpty(existsCFCptDa.cpt_code_modifier1))
                mrPlanProcedureObj.modifier1_code = existsCFCptDa.cpt_code_modifier1;
            else
                mrPlanProcedureObj.modifier1_code = null;
            if (existsCFCptDa != null && !string.IsNullOrEmpty(existsCFCptDa.cpt_code_modifier2))
                mrPlanProcedureObj.modifier2_code = existsCFCptDa.cpt_code_modifier2;
            else
                mrPlanProcedureObj.modifier2_code = null;
            if (existsCFCptDa != null && !string.IsNullOrEmpty(existsCFCptDa.cpt_code_modifier3))
                mrPlanProcedureObj.modifier3_code = existsCFCptDa.cpt_code_modifier3;
            else
                mrPlanProcedureObj.modifier3_code = null;
            if (existsCFCptDa != null && !string.IsNullOrEmpty(existsCFCptDa.cpt_code_modifier4))
                mrPlanProcedureObj.modifier4_code = existsCFCptDa.cpt_code_modifier4;
            else
                mrPlanProcedureObj.modifier4_code = null;

            mrPlanProcedureObj.last_updated_by_user_id = App.global_user.user_id;
            mrPlanProcedureObj.date_last_updated = DateTime.Now;

            if (mrPlanProcedureObj.mr_plan_procedure_id == 0)
            {
                mrPlanProcedureObj.created_by_user_id = App.global_user.user_id;
                mrPlanProcedureObj.date_created = DateTime.Now;
            }
            if (postBillingDomainContext.mr_plan_procedures.FirstOrDefault(q => q.selected_cpt_code == cptCode.cpt_code1) == null)
                postBillingDomainContext.mr_plan_procedures.Add(mrPlanProcedureObj);
        }

        private void AddProblemList(string icd9CodeId, mr_patient_encounter mrPatientEncounterObj, string icd10CodeId)
        {
            if (icd9CodeId == null)
            {
                icd9CodeId = null;
            }

            if (icd10CodeId == null)
            {
                icd10CodeId = null;
            }

            mr_problem_list duplicateProblemObj = null;
            if (saveIcd10)
                duplicateProblemObj = postBillingDomainContext.mr_problem_lists.FirstOrDefault(q => q.mr_patient_encounter_id == mrPatientEncounterObj.mr_patient_encounter_id && q.code == icd10CodeId && q.status == HardcodedValues.ProblemListStatus[0] && q.code == icd9CodeId);
            else
                duplicateProblemObj = postBillingDomainContext.mr_problem_lists.FirstOrDefault(q => q.mr_patient_encounter_id == mrPatientEncounterObj.mr_patient_encounter_id && q.code == icd9CodeId && q.status == HardcodedValues.ProblemListStatus[0] && q.code == icd10CodeId);

            if (duplicateProblemObj == null)
            {
                mr_problem_list mr_problem_listObj = new mr_problem_list();
                mr_problem_listObj.patient_id = cfAppointment != null ? cfAppointment.patientId : patientObject.patientId;
                mr_problem_listObj.mr_patient_encounter_id = mrPatientEncounterObj.mr_patient_encounter_id;
                if (RdpDateOfService.SelectedDate != null)
                    mr_problem_listObj.date_diagnosed = RdpDateOfService.SelectedDate;
                else
                    mr_problem_listObj.date_diagnosed = DateTime.Now;
                mr_problem_listObj.date_created = mr_problem_listObj.date_last_updated = DateTime.Now;
                mr_problem_listObj.created_by_user_id = mr_problem_listObj.last_updated_by_user_id = App.global_user.user_id;

                if (icd9CodeId != null)
                    mr_problem_listObj.code = icd9CodeId;
                //saveIcd10 ? icd10CodeId : icd9CodeId;

                //mr_problem_listObj.icd10_code_id = saveIcd10 ? icd9CodeId : icd10CodeId;

                mr_problem_listObj.status = HardcodedValues.ProblemListStatus[0];
                mr_problem_listObj.is_icd10 = saveIcd10;
                // mr_problem_listObj.icd9_code2 = "AIALITY23";
                mr_problem_listObj.physician_id = ((CustomFormattedPersonMinimumDetails)DdlPhysicianPstChrg.SelectedItem).physician_id; //((IQueryable<CustomFormattedPersonMinimumDetails>)DdlPhysicianPstChrg.ItemsSource.AsQueryable()).Where(q => q.physician_id == cfAppointment.physicianId).FirstOrDefault().physician_id;

                postBillingDomainContext.mr_problem_lists.Add(mr_problem_listObj);
            }
        }

        private void DpToDateR2_KeyUp(object sender, KeyEventArgs e)
        {

        }

        private void DpFromDateR2_KeyUp(object sender, KeyEventArgs e)
        {
            try
            {

                RadDatePicker dpDatePicker = (RadDatePicker)sender;
                int DateLength = dpDatePicker.CurrentDateTimeText.Trim().Length;

                if (dpDatePicker.CurrentDateTimeText.Trim().Contains("/") == false)
                {
                    switch (DateLength)
                    {
                        case 8:
                            this.Focus();
                            dpDatePicker.Focus();
                            break;
                    }

                }
                else
                {
                    switch (DateLength)
                    {
                        case 10:
                            this.Focus();
                            dpDatePicker.Focus();
                            break;
                    }
                }



            }
            catch (Exception ex)
            {

            }
        }

        private void DpFromDateR2_ParseDateTimeValue(object sender, Telerik.Windows.Controls.ParseDateTimeEventArgs args)
        {
            if (!args.IsParsingSuccessful) //ie: Can't parse the date the user has entered
            {
                DateTime time;

                if (CommonMethods.TryParseNumberAsDate(args.TextToParse, out time))
                {
                    args.Result = time;

                    args.IsParsingSuccessful = true;
                }
                else
                {
                    RadDatePicker dpDatePicker = (RadDatePicker)sender;
                    dpDatePicker.CurrentDateTimeText = null;
                    dpDatePicker.DateTimeText = "";
                    dpDatePicker.DateTimeWatermarkContent = "";
                }
            }
        }

        private void DpToDateR2_ParseDateTimeValue(object sender, Telerik.Windows.Controls.ParseDateTimeEventArgs args)
        {

        }

        private void chkModifyUnitCharge_Checked(object sender, RoutedEventArgs e)
        {
            try
            {
                CheckBox chk = (CheckBox)sender;
                if (chk.IsChecked.Value)
                {
                    chk.Parent.FindChildByType<RadMaskedTextBox>().IsEnabled = true;
                    chk.Parent.FindChildByType<RadMaskedTextBox>().Focus();
                }
                else
                {
                    chk.Parent.FindChildByType<RadMaskedTextBox>().IsEnabled = false;
                    chk.Parent.FindChildByType<RadMaskedTextBox>().Value = null;
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void chkModifyUnitCharge_Unchecked(object sender, RoutedEventArgs e)
        {

        }

        private void DpToDateR2_SelectionChanged(object sender, Telerik.Windows.Controls.SelectionChangedEventArgs e)
        {
            try
            {
                RadDatePicker rdp = (RadDatePicker)sender;
                CustomFormattedCPTDiagnosisAssociation cfcptda = rdp.ParentOfType<GridViewRow>().DataContext as CustomFormattedCPTDiagnosisAssociation;
                if (rdp.Name == "DpFromDateR2")
                {
                    if (cfcptda.service_start_date > cfcptda.service_end_date)
                    {
                        cfcptda.service_start_date = cfcptda.service_end_date;
                        InformationWindow iw = new InformationWindow("Service start date can not be future than Service end date.");
                        iw.Show();
                    }
                }
                else if (rdp.Name == "DpToDateR2")
                {
                    if (cfcptda.service_start_date > cfcptda.service_end_date)
                    {
                        cfcptda.service_end_date = cfcptda.service_start_date;
                        InformationWindow iw = new InformationWindow("Service end date can not be past than Service start date.");
                        iw.Show();
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }


        //private void ChkDc_UnChecked(object sender, RoutedEventArgs e)
        //{
        //         CheckBox cb = (CheckBox)sender;
        //    System.Collections.Generic.Dictionary<int, string> icdCheckedItems = new System.Collections.Generic.Dictionary<int, string>();
        //    int icdSelectedCount = 0;
        //    CustomFormattedCPTDiagnosisAssociation cfcptda = cb.DataContext as CustomFormattedCPTDiagnosisAssociation;
        //       //Visibility Converter for Pointers
        //    string pointerText = string.Empty;
        //    if (cfcptda.assessment_diagnosis_code1_checked)
        //    {

        //    }
        //}

        private void ChkDc_Checked(object sender, RoutedEventArgs e)
        {
            CheckBox cb = (CheckBox)sender;
            System.Collections.Generic.Dictionary<int, string> icdCheckedItems = new System.Collections.Generic.Dictionary<int, string>();
            int icdSelectedCount = 0;
            CustomFormattedCPTDiagnosisAssociation cfcptda = cb.DataContext as CustomFormattedCPTDiagnosisAssociation;
            if ((cfcptda.controlsLoaded == null || !cfcptda.controlsLoaded.Value) && cfcptda.pointers != null && cfcptda.pointers.Length > 0)
                return;
            CustomFormattedCPTDiagnosisAssociation cfcChangeptda = cb.DataContext as CustomFormattedCPTDiagnosisAssociation;
            //Visibility Converter for Pointers
            string pointerText = string.Empty;

            if (cb.Name == "ChkDc1")
            {
                cfcChangeptda.assessment_diagnosis_code1_checked = (bool)cb.IsChecked;
            }
            else if (cb.Name == "ChkDc2")
            {
                cfcChangeptda.assessment_diagnosis_code2_checked = (bool)cb.IsChecked;
            }
            else if (cb.Name == "ChkDc3")
            {
                cfcChangeptda.assessment_diagnosis_code3_checked = (bool)cb.IsChecked;
            }
            else if (cb.Name == "ChkDc4")
            {
                cfcChangeptda.assessment_diagnosis_code4_checked = (bool)cb.IsChecked;
            }
            else if (cb.Name == "ChkDc5")
            {
                cfcChangeptda.assessment_diagnosis_code5_checked = (bool)cb.IsChecked;
            }
            else if (cb.Name == "ChkDc6")
            {
                cfcChangeptda.assessment_diagnosis_code6_checked = (bool)cb.IsChecked;
            }
            else if (cb.Name == "ChkDc7")
            {
                cfcChangeptda.assessment_diagnosis_code7_checked = (bool)cb.IsChecked;
            }
            else if (cb.Name == "ChkDc8")
            {
                cfcChangeptda.assessment_diagnosis_code8_checked = (bool)cb.IsChecked;
            }
            else if (cb.Name == "ChkDc9")
            {
                cfcChangeptda.assessment_diagnosis_code9_checked = (bool)cb.IsChecked;
            }
            else if (cb.Name == "ChkDc10")
            {
                cfcChangeptda.assessment_diagnosis_code10_checked = (bool)cb.IsChecked;
            }
            else if (cb.Name == "ChkDc11")
            {
                cfcChangeptda.assessment_diagnosis_code11_checked = (bool)cb.IsChecked;
            }
            else if (cb.Name == "ChkDc12")
            {
                cfcChangeptda.assessment_diagnosis_code12_checked = (bool)cb.IsChecked;
            }

            ////
            if (cfcptda.assessment_diagnosis_code1_checked)
            {
                pointerText = "A";
                icdSelectedCount += 1;
                icdCheckedItems.Add(1, "ChkDc1");
            }
            if (cfcptda.assessment_diagnosis_code2_checked)
            {
                pointerText += "B";
                icdSelectedCount += 1;
                icdCheckedItems.Add(2, "ChkDc2");
            }
            if (cfcptda.assessment_diagnosis_code3_checked)
            {
                pointerText += "C";
                icdSelectedCount += 1;
                icdCheckedItems.Add(3, "ChkDc3");
            }
            if (cfcptda.assessment_diagnosis_code4_checked)
            {
                pointerText += "D";
                icdSelectedCount += 1;
                icdCheckedItems.Add(4, "ChkDc4");
            }
            if (cfcptda.assessment_diagnosis_code5_checked)
            {
                pointerText += "E";
                icdSelectedCount += 1;
                icdCheckedItems.Add(5, "ChkDc5");
            }
            if (cfcptda.assessment_diagnosis_code6_checked)
            {
                pointerText += "F";
                icdSelectedCount += 1;
                icdCheckedItems.Add(6, "ChkDc6");
            }
            if (cfcptda.assessment_diagnosis_code7_checked)
            {
                pointerText += "G";
                icdSelectedCount += 1;
                icdCheckedItems.Add(7, "ChkDc7");
            }
            if (cfcptda.assessment_diagnosis_code8_checked)
            {
                pointerText += "H";
                icdSelectedCount += 1;
                icdCheckedItems.Add(8, "ChkDc8");
            }
            if (cfcptda.assessment_diagnosis_code9_checked)
            {
                pointerText += "I";
                icdSelectedCount += 1;
                icdCheckedItems.Add(9, "ChkDc9");
            }
            if (cfcptda.assessment_diagnosis_code10_checked)
            {
                pointerText += "J";
                icdSelectedCount += 1;
                icdCheckedItems.Add(10, "ChkDc10");
            }
            if (cfcptda.assessment_diagnosis_code11_checked)
            {
                pointerText += "K";
                icdSelectedCount += 1;
                icdCheckedItems.Add(11, "ChkDc11");
            }
            if (cfcptda.assessment_diagnosis_code12_checked)
            {
                pointerText += "L";
                icdSelectedCount += 1;
                icdCheckedItems.Add(12, "ChkDc12");
            }
            //if (icdSelectedCount > 3 && !icdCheckedItems.Values.Contains(cb.Name))
            if (icdSelectedCount > 3 && icdCheckedItems.Count > 4)
            {

                cb.IsChecked = false;
                InformationWindow iw = new InformationWindow("ONLY up to 4 ICD9 codes can be checked for each CPT Code.");
                iw.Show();
            }

            UpdateIcdPointers(ref cfcptda, ref cfcChangeptda, icdWidget);

        }



        private void BtnProceed_Click(object sender, RoutedEventArgs e)
        {
            SpLevelOfService.Visibility = Visibility.Visible;
        }

        private void RadTabControl1_SelectionChanged(object sender, Telerik.Windows.Controls.RadSelectionChangedEventArgs e)
        {
            if (RadTabControl1 != null)
            {
                if (RadTabControl1.SelectedIndex != 3)
                {
                    if (RadTabControl1.SelectedIndex == 0)
                    {
                        this.BtnPrevious.Visibility = System.Windows.Visibility.Collapsed;
                        BtnNext.Visibility = System.Windows.Visibility.Visible;
                    }
                    else
                    {
                        this.BtnPrevious.Visibility = System.Windows.Visibility.Visible;
                        BtnNext.Visibility = System.Windows.Visibility.Visible;
                    }

                    if (IsTabValidOnNext())
                    {
                        if (RadTabControl1.SelectedIndex == 2)
                        {
                            SaveICDSelectionOrder();
                            if (isCptCollectionChanged || isIcdCollectionChanged || isFacilityChanged)
                                BindCptIcdAssociation();
                            this.BtnSaveToBilling.Visibility = Visibility.Visible;
                            this.BtnApproveAndSubmitClaims.Visibility = Visibility.Visible;
                            //this.BtnSaveAndPrintHCFA.Visibility = System.Windows.Visibility.Visible;
                            isCptCollectionChanged = false;
                            isIcdCollectionChanged = false;
                            isFacilityChanged = false;
                        }
                    }
                    else
                    {
                        this.BtnSaveToBilling.Visibility = Visibility.Collapsed;
                        this.BtnApproveAndSubmitClaims.Visibility = Visibility.Collapsed;
                        //this.BtnSaveAndPrintHCFA.Visibility = System.Windows.Visibility.Collapsed;
                    }
                }
                else
                {
                    this.BtnPrevious.Visibility = System.Windows.Visibility.Visible;
                    BtnNext.Visibility = System.Windows.Visibility.Collapsed;
                }
                //if (RadTabControl1.SelectedIndex == 2)
                //{
                //    if (IsTabValidOnNext())
                //    {
                //        BindCptIcdAssociation();
                //        this.BtnSaveToBilling.Visibility = Visibility.Visible;
                //        this.BtnApproveAndSubmitClaims.Visibility = Visibility.Visible;
                //        //this.BtnNextPrevious.Content = "Previous";                        
                //    }                   
                //    else
                //        RadTabControl1.SelectedIndex = 0;
                //}
                //else if (RadTabControl1.SelectedIndex == 0)
                //{
                //    this.BtnSaveToBilling.Visibility = Visibility.Collapsed;
                //    this.BtnApproveAndSubmitClaims.Visibility = Visibility.Collapsed;
                //    //this.BtnNextPrevious.Content = "Next";                                   
                //}
            }
        }

        private void SaveICDSelectionOrder()
        {


        }

        private void BtnPrevious_Click(object sender, RoutedEventArgs e)
        {
            if (RadTabControl1.SelectedIndex == 0 || RadTabControl1.SelectedIndex == 1)
            {
                BtnPrevious.Visibility = System.Windows.Visibility.Collapsed;
                RadTabControl1.SelectedIndex = 0;
            }
            else
            {
                BtnPrevious.Visibility = System.Windows.Visibility.Visible;
                RadTabControl1.SelectedIndex = RadTabControl1.SelectedIndex - 1;
            }
            if (RadTabControl1.SelectedIndex == 3)
                BtnNext.Visibility = System.Windows.Visibility.Collapsed;
            else
                BtnNext.Visibility = System.Windows.Visibility.Visible;
        }

        private void BtnNext_Click(object sender, RoutedEventArgs e)
        {
            if (RadTabControl1.SelectedIndex == 2 || RadTabControl1.SelectedIndex == 3 || RadTabControl1.SelectedIndex == 4)
            {

                if (RadTabControl1.SelectedIndex == 2)
                {
                    BtnNext.Visibility = System.Windows.Visibility.Visible;
                    RadTabControl1.SelectedIndex = 3;
                }
                else if (RadTabControl1.SelectedIndex == 3)
                {

                    RadTabControl1.SelectedIndex = 4;

                }
                if (RadTabControl1.SelectedIndex == 3)
                {
                    BtnNext.Visibility = System.Windows.Visibility.Visible;

                }
                if (RadTabControl1.SelectedIndex == 4)
                    BtnNext.Visibility = System.Windows.Visibility.Collapsed;
            }
            else
            {
                BtnNext.Visibility = System.Windows.Visibility.Visible;
                RadTabControl1.SelectedIndex = RadTabControl1.SelectedIndex + 1;
            }
            if (RadTabControl1.SelectedIndex == 0)
                BtnPrevious.Visibility = System.Windows.Visibility.Collapsed;
            else
                BtnPrevious.Visibility = System.Windows.Visibility.Visible;
        }

        private void BindCptIcdAssociation()
        {
            if (isCptCollectionChanged || isIcdCollectionChanged)
            {
                //Socrates.Views.Charts.Widgets.CPTCodes cptWidget = (Socrates.Views.Charts.Widgets.CPTCodes)SpIcdCpt.Children.ElementAt(0);
                //Socrates.Views.Charts.Widgets.ICD9Codes icdWidget = (Socrates.Views.Charts.Widgets.ICD9Codes)SpIcdCpt.Children.ElementAt(2);
                if (lstcurrent_custom_cpt_diagnosis_association.Count() != 0)
                    lstcurrent_custom_cpt_diagnosis_association.RemoveRange(0, lstcurrent_custom_cpt_diagnosis_association.Count());
                foreach (cpt_code cpt in cptWidget.mrDxCPTCollection)
                {
                    CustomFormattedCPTDiagnosisAssociation oldcfcptda = null;
                    if (this.RadGvCPTDiagnosis.ItemsSource != null)
                    {
                        //oldcfcptda = lstPast_custom_cpt_diagnosis_association.Where(q => q.cpt_code == cpt.cpt_code1 && q.is_cpt_deleted == "is_cpt_deleted").FirstOrDefault();
                        oldcfcptda = ((List<CustomFormattedCPTDiagnosisAssociation>)this.RadGvCPTDiagnosis.ItemsSource).Where(q => q.cpt_code == cpt.cpt_code1 && q.is_cpt_deleted == "Collapsed").FirstOrDefault();
                    }
                    if (oldcfcptda == null)
                    {
                        CustomFormattedCPTDiagnosisAssociation newcfcptda = new CustomFormattedCPTDiagnosisAssociation();
                        newcfcptda.cpt_code = cpt.cpt_code1;
                        newcfcptda.cpt_diagnosis_association_id = null;
                        newcfcptda.cpt_code_description = cpt.description;
                        newcfcptda.service_start_date = RdpDateOfService.SelectedDate.Value;
                        newcfcptda.service_end_date = RdpDateOfService.SelectedDate.Value;
                        newcfcptda.current_date = DateTime.Now;
                        if (DdlFacility.SelectedItem != null)
                            newcfcptda.posc = ((facility)DdlFacility.SelectedItem).place_of_service_code;
                        else if (cfAppointment != null)
                            newcfcptda.posc = cfAppointment.placeOfServiceCode;
                        newcfcptda.units = "1";
                        newcfcptda.decimalunits = 1;
                        UpdateIcdChangesToCpt(ref newcfcptda, icdWidget);
                        #region Commentted
                        //newcfcptda.assessment_diagnosis_code2_id = cfcptda.assessment_diagnosis_code2_id;
                        //newcfcptda.assessment_diagnosis_code3_id = cfcptda.assessment_diagnosis_code3_id;
                        //newcfcptda.assessment_diagnosis_code4_id = cfcptda.assessment_diagnosis_code4_id;
                        //newcfcptda.assessment_diagnosis_code5_id = cfcptda.assessment_diagnosis_code5_id;
                        //newcfcptda.assessment_diagnosis_code6_id = cfcptda.assessment_diagnosis_code6_id;
                        //newcfcptda.assessment_diagnosis_code7_id = cfcptda.assessment_diagnosis_code7_id;
                        //newcfcptda.assessment_diagnosis_code8_id = cfcptda.assessment_diagnosis_code8_id;
                        //newcfcptda.assessment_diagnosis_code2 = cfcptda.assessment_diagnosis_code2;
                        //newcfcptda.assessment_diagnosis_code3 = cfcptda.assessment_diagnosis_code3;
                        //newcfcptda.assessment_diagnosis_code4 = cfcptda.assessment_diagnosis_code4;
                        //newcfcptda.assessment_diagnosis_code5 = cfcptda.assessment_diagnosis_code5;
                        //newcfcptda.assessment_diagnosis_code6 = cfcptda.assessment_diagnosis_code6;
                        //newcfcptda.assessment_diagnosis_code7 = cfcptda.assessment_diagnosis_code7;
                        //newcfcptda.assessment_diagnosis_code8 = cfcptda.assessment_diagnosis_code8;

                        //if (cfcptda.assessment_diagnosis_code2_checked || cfcptda.assessment_diagnosis_code2_visibility == "Collapsed")
                        //{
                        //    newcfcptda.assessment_diagnosis_code2_checked = false;
                        //    newcfcptda.assessment_diagnosis_code2_visibility = "Collapsed";
                        //}
                        //else
                        //{
                        //    newcfcptda.assessment_diagnosis_code2_checked = cfcptda.assessment_diagnosis_code2_checked;
                        //    newcfcptda.assessment_diagnosis_code2_visibility = cfcptda.assessment_diagnosis_code2_visibility;
                        //}
                        //if (cfcptda.assessment_diagnosis_code3_checked || cfcptda.assessment_diagnosis_code3_visibility == "Collapsed")
                        //{
                        //    newcfcptda.assessment_diagnosis_code3_checked = false;
                        //    newcfcptda.assessment_diagnosis_code3_visibility = "Collapsed";
                        //}
                        //else
                        //{
                        //    newcfcptda.assessment_diagnosis_code3_checked = cfcptda.assessment_diagnosis_code3_checked;
                        //    newcfcptda.assessment_diagnosis_code3_visibility = cfcptda.assessment_diagnosis_code3_visibility;
                        //}
                        //if (cfcptda.assessment_diagnosis_code4_checked || cfcptda.assessment_diagnosis_code4_visibility == "Collapsed")
                        //{
                        //    newcfcptda.assessment_diagnosis_code4_checked = false;
                        //    newcfcptda.assessment_diagnosis_code4_visibility = "Collapsed";
                        //}
                        //else
                        //{
                        //    newcfcptda.assessment_diagnosis_code4_checked = cfcptda.assessment_diagnosis_code4_checked;
                        //    newcfcptda.assessment_diagnosis_code4_visibility = cfcptda.assessment_diagnosis_code4_visibility;
                        //}
                        //if (cfcptda.assessment_diagnosis_code5_checked || cfcptda.assessment_diagnosis_code5_visibility == "Collapsed")
                        //{
                        //    newcfcptda.assessment_diagnosis_code5_checked = false;
                        //    newcfcptda.assessment_diagnosis_code5_visibility = "Collapsed";
                        //}
                        //else
                        //{
                        //    newcfcptda.assessment_diagnosis_code5_checked = cfcptda.assessment_diagnosis_code5_checked;
                        //    newcfcptda.assessment_diagnosis_code5_visibility = cfcptda.assessment_diagnosis_code5_visibility;
                        //}
                        //if (cfcptda.assessment_diagnosis_code6_checked || cfcptda.assessment_diagnosis_code6_visibility == "Collapsed")
                        //{
                        //    newcfcptda.assessment_diagnosis_code6_checked = false;
                        //    newcfcptda.assessment_diagnosis_code6_visibility = "Collapsed";
                        //}
                        //else
                        //{
                        //    newcfcptda.assessment_diagnosis_code6_checked = cfcptda.assessment_diagnosis_code6_checked;
                        //    newcfcptda.assessment_diagnosis_code6_visibility = cfcptda.assessment_diagnosis_code6_visibility;
                        //}
                        //if (cfcptda.assessment_diagnosis_code7_checked || cfcptda.assessment_diagnosis_code7_visibility == "Collapsed")
                        //{
                        //    newcfcptda.assessment_diagnosis_code7_checked = false;
                        //    newcfcptda.assessment_diagnosis_code7_visibility = "Collapsed";
                        //}
                        //else
                        //{
                        //    newcfcptda.assessment_diagnosis_code7_checked = cfcptda.assessment_diagnosis_code7_checked;
                        //    newcfcptda.assessment_diagnosis_code7_visibility = cfcptda.assessment_diagnosis_code7_visibility;
                        //}
                        //if (cfcptda.assessment_diagnosis_code8_checked || cfcptda.assessment_diagnosis_code8_visibility == "Collapsed")
                        //{
                        //    newcfcptda.assessment_diagnosis_code8_checked = false;
                        //    newcfcptda.assessment_diagnosis_code8_visibility = "Collapsed";
                        //}
                        //else
                        //{
                        //    newcfcptda.assessment_diagnosis_code8_checked = cfcptda.assessment_diagnosis_code8_checked;
                        //    newcfcptda.assessment_diagnosis_code8_visibility = cfcptda.assessment_diagnosis_code8_visibility;
                        //}
                        //newcfcptda.assessment_diagnosis_code_description2 = cfcptda.assessment_diagnosis_code_description2;
                        //newcfcptda.assessment_diagnosis_code_description3 = cfcptda.assessment_diagnosis_code_description3;
                        //newcfcptda.assessment_diagnosis_code_description4 = cfcptda.assessment_diagnosis_code_description4;
                        //newcfcptda.assessment_diagnosis_code_description5 = cfcptda.assessment_diagnosis_code_description5;
                        //newcfcptda.assessment_diagnosis_code_description6 = cfcptda.assessment_diagnosis_code_description6;
                        //newcfcptda.assessment_diagnosis_code_description7 = cfcptda.assessment_diagnosis_code_description7;
                        //newcfcptda.assessment_diagnosis_code_description8 = cfcptda.assessment_diagnosis_code_description8;
                        //newcfcptda.cpt_code_modifier1 = cfcptda.cpt_code_modifier1;
                        //newcfcptda.cpt_code_modifier2 = cfcptda.cpt_code_modifier2;
                        //newcfcptda.cpt_code_modifier3 = cfcptda.cpt_code_modifier3;
                        //newcfcptda.cpt_code_modifier4 = cfcptda.cpt_code_modifier4;
                        //newcfcptda.decimalunits = cfcptda.decimalunits;
                        //newcfcptda.units = cfcptda.units;
                        //newcfcptda.posc = cfcptda.posc;
                        //newcfcptda.pastUnits = cfcptda.pastUnits;
                        //newcfcptda.pastPOSC = cfcptda.pastPOSC;
                        //newcfcptda.service_start_date = cfcptda.service_start_date;
                        //newcfcptda.service_end_date = cfcptda.service_end_date;
                        //newcfcptda.insurance_prior_authorization_number = cfcptda.insurance_prior_authorization_number;
                        //newcfcptda.modify_unit_charge = cfcptda.modify_unit_charge;
                        //newcfcptda.procedure_unit_charge = cfcptda.procedure_unit_charge;
                        //newcfcptda.modified_procedure_unit_charge = cfcptda.modified_procedure_unit_charge;
                        //newcfcptda.rvu_value = cfcptda.rvu_value;
                        #endregion
                        newcfcptda.is_cpt_deleted = "Collapsed";
                        if (!string.IsNullOrEmpty(priorAuthorizationNumber))
                            newcfcptda.insurance_prior_authorization_number = priorAuthorizationNumber;

                        lstcurrent_custom_cpt_diagnosis_association.Add(newcfcptda);
                    }
                    else
                    {
                        if (isIcdCollectionChanged)
                        {
                            UpdateIcdChangesToCpt(ref oldcfcptda, icdWidget);
                            lstcurrent_custom_cpt_diagnosis_association.Add(oldcfcptda);
                        }
                        else
                            lstcurrent_custom_cpt_diagnosis_association.Add(oldcfcptda);
                    }
                }
                if (mrPatientEncounter != null && !string.IsNullOrEmpty(mrPatientEncounter.level_of_service_cpt_code) && TxtLevelOfSerivce.Text.Trim() != string.Empty)
                {
                    if (this.RadGvCPTDiagnosis.ItemsSource != null)
                    {
                        CustomFormattedCPTDiagnosisAssociation cptOS = ((List<CustomFormattedCPTDiagnosisAssociation>)this.RadGvCPTDiagnosis.ItemsSource).Where(q => q.is_cpt_level_of_service == true).FirstOrDefault();
                        //CustomFormattedCPTDiagnosisAssociation cptOS = lstPast_custom_cpt_diagnosis_association.Where(q => q.is_cpt_level_of_service == true).FirstOrDefault();
                        if (cptOS != null)
                        {
                            if (isIcdCollectionChanged)
                                UpdateIcdChangesToCpt(ref cptOS, icdWidget);
                            lstcurrent_custom_cpt_diagnosis_association.Add(cptOS);
                        }
                    }
                    else if (lstPast_custom_cpt_diagnosis_association != null)
                    {
                        CustomFormattedCPTDiagnosisAssociation cptOS = lstPast_custom_cpt_diagnosis_association.Where(q => q.is_cpt_level_of_service == true).FirstOrDefault();
                        if (cptOS != null)
                        {
                            if (isIcdCollectionChanged)
                                UpdateIcdChangesToCpt(ref cptOS, icdWidget);
                            lstcurrent_custom_cpt_diagnosis_association.Add(cptOS);
                        }
                    }
                }
                else if ((TxtLevelOfSerivce.Text.Trim() != string.Empty && mrPatientEncounter == null) || (mrPatientEncounter != null && string.IsNullOrEmpty(mrPatientEncounter.level_of_service_cpt_code) && TxtLevelOfSerivce.Text.Trim() != string.Empty))
                {
                    if (this.RadGvCPTDiagnosis.ItemsSource != null)
                    {
                        CustomFormattedCPTDiagnosisAssociation cptOS = ((List<CustomFormattedCPTDiagnosisAssociation>)this.RadGvCPTDiagnosis.ItemsSource).Where(q => q.is_cpt_level_of_service == true).FirstOrDefault();
                        //CustomFormattedCPTDiagnosisAssociation cptOS = lstPast_custom_cpt_diagnosis_association.Where(q => q.is_cpt_level_of_service == true).FirstOrDefault();
                        if (cptOS != null)
                        {
                            if (isIcdCollectionChanged)
                                UpdateIcdChangesToCpt(ref cptOS, icdWidget);
                            lstcurrent_custom_cpt_diagnosis_association.Add(cptOS);
                        }
                    }
                }
            }
            GetRVUValues();
        }

        string oldPointers;
        private void UpdateIcdPointers(ref CustomFormattedCPTDiagnosisAssociation newcfcptda, ref CustomFormattedCPTDiagnosisAssociation cfcChangeptda, Socrates.Views.Charts.Widgets.ICD9Codes icdWidget)
        {

            //if (icdWidget.mrDxCollectionCustomObjects.Count() > 0)
            if (icdWidget.mrDxCollectionCustomObjects.Count() > 0)
            {
                newcfcptda.assessment_diagnosis_code1_id = icdWidget.mrDxCollectionCustomObjects[0].code_id;
                newcfcptda.assessment_diagnosis_code1 = icdWidget.mrDxCollectionCustomObjects[0].code;
                if (icdWidget.mrDxCollectionCustomObjects.Count() < 5)
                {
                    newcfcptda.assessment_diagnosis_code1_checked = true;
                    newcfcptda.assessment_diagnosis_code1_visibility = "Visible";
                }
                else
                    newcfcptda.assessment_diagnosis_code1_visibility = "Visible";
                newcfcptda.assessment_diagnosis_code_description1 = icdWidget.mrDxCollectionCustomObjects[0].description;

                //newcfcptda.assessment_diagnosis_code1_id = icdWidget._selectedCodes[0].code_id;
                //newcfcptda.assessment_diagnosis_code1 = icdWidget._selectedCodes[0].code.icd9_code;

                newcfcptda.a = "A";
                if (icdWidget.mrDxCollectionCustomObjects.Count() < 13)
                {
                    newcfcptda.assessment_diagnosis_code1_checked = cfcChangeptda.assessment_diagnosis_code1_checked;
                    if (cfcChangeptda.assessment_diagnosis_code1_checked)
                    {
                        //if (!newcfcptda.pointers.Contains("A"))
                        newcfcptda.pointers = "A";
                        if (!dictionaryofPointers.Contains("A"))
                            dictionaryofPointers.Add("A");
                    }
                    //else if (newcfcptda.pointers.Length == 0)
                    else
                    {
                        newcfcptda.pointers = "";
                        dictionaryofPointers.Remove("A");

                    }

                    newcfcptda.assessment_diagnosis_code1_visibility = "Visible";
                }
                else
                    newcfcptda.assessment_diagnosis_code1_visibility = "Visible";
                newcfcptda.assessment_diagnosis_code_description1 = icdWidget.mrDxCollectionCustomObjects[0].description;
                // newcfcptda.assessment_diagnosis_code_icd10_1 = icdWidget._selectedCodes[0].icd10_code;


            }
            if (icdWidget.mrDxCollectionCustomObjects.Count() > 1)
            {
                newcfcptda.assessment_diagnosis_code2_id = icdWidget.mrDxCollectionCustomObjects[1].code_id;
                newcfcptda.assessment_diagnosis_code2 = icdWidget.mrDxCollectionCustomObjects[1].code;
                if (icdWidget.mrDxCollectionCustomObjects.Count() < 5)
                {
                    newcfcptda.assessment_diagnosis_code2_checked = true;
                    newcfcptda.assessment_diagnosis_code2_visibility = "Visible";
                }
                else
                    newcfcptda.assessment_diagnosis_code2_visibility = "Visible";
                newcfcptda.assessment_diagnosis_code_description2 = icdWidget.mrDxCollectionCustomObjects[1].description;

                //newcfcptda.assessment_diagnosis_code2_id = icdWidget._selectedCodes[1].code_id;
                //newcfcptda.assessment_diagnosis_code2 = icdWidget._selectedCodes[1].icd9_code;
                newcfcptda.b = "B";
                if (icdWidget.mrDxCollectionCustomObjects.Count() < 13)
                {

                    newcfcptda.assessment_diagnosis_code2_checked = cfcChangeptda.assessment_diagnosis_code2_checked;
                    if (cfcChangeptda.assessment_diagnosis_code2_checked)
                    {
                        if (!dictionaryofPointers.Contains("B"))
                            dictionaryofPointers.Add("B");
                        if (!newcfcptda.pointers.Contains("B"))
                            newcfcptda.pointers = newcfcptda.pointers + "B";
                    }

                    else if (newcfcptda.pointers.Length == 0)
                        newcfcptda.pointers = "";
                    newcfcptda.assessment_diagnosis_code2_visibility = "Visible";

                    if (!cfcChangeptda.assessment_diagnosis_code2_checked)
                        dictionaryofPointers.Remove("B");

                }
                else
                    newcfcptda.assessment_diagnosis_code2_visibility = "Visible";
                newcfcptda.assessment_diagnosis_code_description2 = icdWidget.mrDxCollectionCustomObjects[1].description;
                // newcfcptda.assessment_diagnosis_code_icd10_2 = icdWidget._selectedCodes[1].icd10_code;
            }
            else
            {
                newcfcptda.assessment_diagnosis_code2_checked = false;
                newcfcptda.assessment_diagnosis_code2_visibility = "Collapsed";
                newcfcptda.b = "";
            }

            if (icdWidget.mrDxCollectionCustomObjects.Count() > 2)
            {
                newcfcptda.assessment_diagnosis_code3_id = icdWidget.mrDxCollectionCustomObjects[2].code_id;
                newcfcptda.assessment_diagnosis_code3 = icdWidget.mrDxCollectionCustomObjects[2].code;
                if (icdWidget.mrDxCollectionCustomObjects.Count() < 5)
                {
                    newcfcptda.assessment_diagnosis_code3_checked = true;
                    newcfcptda.assessment_diagnosis_code3_visibility = "Visible";
                }
                else
                    newcfcptda.assessment_diagnosis_code3_visibility = "Visible";
                newcfcptda.assessment_diagnosis_code_description3 = icdWidget.mrDxCollectionCustomObjects[2].description;
                //newcfcptda.assessment_diagnosis_code3_id = icdWidget._selectedCodes[2].code_id;
                //newcfcptda.assessment_diagnosis_code3 = icdWidget._selectedCodes[2].icd9_code;
                newcfcptda.c = "C";
                if (icdWidget.mrDxCollectionCustomObjects.Count() < 13)
                {

                    newcfcptda.assessment_diagnosis_code3_checked = cfcChangeptda.assessment_diagnosis_code3_checked;
                    if (cfcChangeptda.assessment_diagnosis_code3_checked)
                    {
                        if (!dictionaryofPointers.Contains("C"))
                            dictionaryofPointers.Add("C");
                        if (!newcfcptda.pointers.Contains("C"))
                            newcfcptda.pointers = newcfcptda.pointers + "C";
                    }
                    else if (newcfcptda.pointers.Length == 0)
                        newcfcptda.pointers = "";
                    newcfcptda.assessment_diagnosis_code3_visibility = "Visible";
                    if (!cfcChangeptda.assessment_diagnosis_code3_checked)
                        dictionaryofPointers.Remove("C");
                }
                else
                    newcfcptda.assessment_diagnosis_code3_visibility = "Visible";
                newcfcptda.assessment_diagnosis_code_description3 = icdWidget.mrDxCollectionCustomObjects[2].description;
                //newcfcptda.assessment_diagnosis_code_icd10_3 = icdWidget._selectedCodes[2].icd10_code;
            }
            else
            {
                newcfcptda.assessment_diagnosis_code3_checked = false;
                newcfcptda.assessment_diagnosis_code3_visibility = "Collapsed";
                newcfcptda.c = "";
            }
            if (icdWidget.mrDxCollectionCustomObjects.Count() > 3)
            {
                newcfcptda.assessment_diagnosis_code4_id = icdWidget.mrDxCollectionCustomObjects[3].code_id;
                newcfcptda.assessment_diagnosis_code4 = icdWidget.mrDxCollectionCustomObjects[3].code;
                if (icdWidget.mrDxCollectionCustomObjects.Count() < 5)
                {
                    newcfcptda.assessment_diagnosis_code4_checked = true;
                    newcfcptda.assessment_diagnosis_code4_visibility = "Visible";
                }
                else
                    newcfcptda.assessment_diagnosis_code4_visibility = "Visible";
                newcfcptda.assessment_diagnosis_code_description4 = icdWidget.mrDxCollectionCustomObjects[3].description;
                //                newcfcptda.assessment_diagnosis_code4_id = icdWidget._selectedCodes[3].code_id;
                //  newcfcptda.assessment_diagnosis_code4 = icdWidget._selectedCodes[3].icd9_code;
                newcfcptda.d = "D";
                if (icdWidget.mrDxCollectionCustomObjects.Count() < 13)
                {

                    newcfcptda.assessment_diagnosis_code4_checked = cfcChangeptda.assessment_diagnosis_code4_checked;
                    if (cfcChangeptda.assessment_diagnosis_code4_checked)
                    {
                        if (!dictionaryofPointers.Contains("D"))
                            dictionaryofPointers.Add("D");
                        if (!newcfcptda.pointers.Contains("D"))
                            newcfcptda.pointers = newcfcptda.pointers + "D";
                    }
                    else if (newcfcptda.pointers.Length == 0)
                        newcfcptda.pointers = "";
                    newcfcptda.assessment_diagnosis_code4_visibility = "Visible";
                    if (!cfcChangeptda.assessment_diagnosis_code4_checked)
                    {
                        dictionaryofPointers.Remove("D");
                    }
                }
                else
                    newcfcptda.assessment_diagnosis_code4_visibility = "Visible";
                newcfcptda.assessment_diagnosis_code_description4 = icdWidget.mrDxCollectionCustomObjects[3].description;
                // newcfcptda.assessment_diagnosis_code_icd10_4 = icdWidget._selectedCodes[3].icd10_code;
            }
            else
            {
                newcfcptda.assessment_diagnosis_code4_checked = false;
                newcfcptda.assessment_diagnosis_code4_visibility = "Collapsed";
                newcfcptda.d = "";
            }
            if (icdWidget.mrDxCollectionCustomObjects.Count() > 4)
            {
                newcfcptda.assessment_diagnosis_code5_id = icdWidget.mrDxCollectionCustomObjects[4].code_id;
                newcfcptda.assessment_diagnosis_code5 = icdWidget.mrDxCollectionCustomObjects[4].code;
                if (icdWidget.mrDxCollectionCustomObjects.Count() < 5)
                {
                    newcfcptda.assessment_diagnosis_code5_checked = true;
                    newcfcptda.assessment_diagnosis_code5_visibility = "Visible";
                }
                else
                    newcfcptda.assessment_diagnosis_code5_visibility = "Visible";
                newcfcptda.assessment_diagnosis_code_description5 = icdWidget.mrDxCollectionCustomObjects[4].description;

                //newcfcptda.assessment_diagnosis_code5_id = icdWidget._selectedCodes[4].code_id;
                //newcfcptda.assessment_diagnosis_code5 = icdWidget._selectedCodes[4].icd9_code;
                newcfcptda.e = "E";
                if (icdWidget.mrDxCollectionCustomObjects.Count() < 13)
                {

                    if (cfcChangeptda.assessment_diagnosis_code5_checked)
                    {
                        if (!dictionaryofPointers.Contains("E"))
                            dictionaryofPointers.Add("E");
                        if (!newcfcptda.pointers.Contains("E"))
                            newcfcptda.pointers = newcfcptda.pointers + "E";
                    }
                    else if (newcfcptda.pointers.Length == 0)
                        newcfcptda.pointers = "";

                    newcfcptda.assessment_diagnosis_code5_checked = cfcChangeptda.assessment_diagnosis_code5_checked;
                    newcfcptda.assessment_diagnosis_code5_visibility = "Visible";
                    if (!cfcChangeptda.assessment_diagnosis_code5_checked)
                    {
                        dictionaryofPointers.Remove("E");
                    }
                }
                else
                    newcfcptda.assessment_diagnosis_code5_visibility = "Visible";
                newcfcptda.assessment_diagnosis_code_description5 = icdWidget.mrDxCollectionCustomObjects[4].description;
                // newcfcptda.assessment_diagnosis_code_icd10_5 = icdWidget._selectedCodes[4].icd10_code;
            }
            else
            {
                newcfcptda.assessment_diagnosis_code5_checked = false;
                newcfcptda.assessment_diagnosis_code5_visibility = "Collapsed";
                newcfcptda.e = "";
            }
            if (icdWidget.mrDxCollectionCustomObjects.Count() > 5)
            {
                newcfcptda.assessment_diagnosis_code6_id = icdWidget.mrDxCollectionCustomObjects[5].code_id;
                newcfcptda.assessment_diagnosis_code6 = icdWidget.mrDxCollectionCustomObjects[5].code;
                if (icdWidget.mrDxCollectionCustomObjects.Count() < 5)
                {
                    newcfcptda.assessment_diagnosis_code6_checked = true;
                    newcfcptda.assessment_diagnosis_code6_visibility = "Visible";
                }
                else
                    newcfcptda.assessment_diagnosis_code6_visibility = "Visible";
                newcfcptda.assessment_diagnosis_code_description6 = icdWidget.mrDxCollectionCustomObjects[5].description;

                //newcfcptda.assessment_diagnosis_code6_id = icdWidget._selectedCodes[5].code_id;
                //newcfcptda.assessment_diagnosis_code6 = icdWidget._selectedCodes[5].icd9_code;
                newcfcptda.f = "F";
                if (icdWidget.mrDxCollectionCustomObjects.Count() < 13)
                {

                    if (cfcChangeptda.assessment_diagnosis_code6_checked)
                    {
                        if (!dictionaryofPointers.Contains("F"))
                            dictionaryofPointers.Add("F");
                        if (!newcfcptda.pointers.Contains("F"))
                            newcfcptda.pointers = newcfcptda.pointers + "F";
                    }
                    else if (newcfcptda.pointers.Length == 0)
                        newcfcptda.pointers = "";
                    newcfcptda.assessment_diagnosis_code6_checked = cfcChangeptda.assessment_diagnosis_code6_checked;
                    newcfcptda.assessment_diagnosis_code6_visibility = "Visible";

                    if (!cfcChangeptda.assessment_diagnosis_code6_checked)
                    {
                        dictionaryofPointers.Remove("F");
                    }
                }
                else
                    newcfcptda.assessment_diagnosis_code6_visibility = "Visible";
                newcfcptda.assessment_diagnosis_code_description6 = icdWidget.mrDxCollectionCustomObjects[5].description;
                //newcfcptda.assessment_diagnosis_code_icd10_6 = icdWidget._selectedCodes[5].icd10_code;
            }
            else
            {
                newcfcptda.assessment_diagnosis_code6_checked = false;
                newcfcptda.assessment_diagnosis_code6_visibility = "Collapsed";
                newcfcptda.f = "";
            }
            if (icdWidget.mrDxCollectionCustomObjects.Count() > 6)
            {
                newcfcptda.assessment_diagnosis_code7_id = icdWidget.mrDxCollectionCustomObjects[6].code_id;
                newcfcptda.assessment_diagnosis_code7 = icdWidget.mrDxCollectionCustomObjects[6].code;
                if (icdWidget.mrDxCollectionCustomObjects.Count() < 5)
                {
                    newcfcptda.assessment_diagnosis_code7_checked = true;
                    newcfcptda.assessment_diagnosis_code7_visibility = "Visible";
                }
                else
                    newcfcptda.assessment_diagnosis_code7_visibility = "Visible";
                newcfcptda.assessment_diagnosis_code_description7 = icdWidget.mrDxCollectionCustomObjects[6].description;

                //newcfcptda.assessment_diagnosis_code7_id = icdWidget._selectedCodes[6].code_id;
                //newcfcptda.assessment_diagnosis_code7 = icdWidget._selectedCodes[6].icd9_code;
                newcfcptda.g = "G";
                if (icdWidget.mrDxCollectionCustomObjects.Count() < 13)
                {
                    if (cfcChangeptda.assessment_diagnosis_code7_checked)
                    {
                        if (!dictionaryofPointers.Contains("G"))
                            dictionaryofPointers.Add("G");
                        if (!newcfcptda.pointers.Contains("G"))
                            newcfcptda.pointers = newcfcptda.pointers + "G";
                    }
                    else if (newcfcptda.pointers.Length == 0)
                        newcfcptda.pointers = "";
                    newcfcptda.assessment_diagnosis_code7_checked = cfcChangeptda.assessment_diagnosis_code7_checked;
                    newcfcptda.assessment_diagnosis_code7_visibility = "Visible";
                }
                else
                    newcfcptda.assessment_diagnosis_code7_visibility = "Visible";
                newcfcptda.assessment_diagnosis_code_description7 = icdWidget.mrDxCollectionCustomObjects[6].description;
                //newcfcptda.assessment_diagnosis_code_icd10_7 = icdWidget._selectedCodes[6].icd10_code;

                if (!cfcChangeptda.assessment_diagnosis_code7_checked)
                {
                    dictionaryofPointers.Remove("G");
                }
            }
            else
            {
                newcfcptda.assessment_diagnosis_code7_checked = false;
                newcfcptda.assessment_diagnosis_code7_visibility = "Collapsed";
                newcfcptda.g = "";
            }
            if (icdWidget.mrDxCollectionCustomObjects.Count() > 7)
            {
                newcfcptda.assessment_diagnosis_code8_id = icdWidget.mrDxCollectionCustomObjects[7].code_id;
                newcfcptda.assessment_diagnosis_code8 = icdWidget.mrDxCollectionCustomObjects[7].code;
                if (icdWidget.mrDxCollectionCustomObjects.Count() < 5)
                {
                    newcfcptda.assessment_diagnosis_code8_checked = true;
                    newcfcptda.assessment_diagnosis_code8_visibility = "Visible";
                }
                else
                    newcfcptda.assessment_diagnosis_code8_visibility = "Visible";
                newcfcptda.assessment_diagnosis_code_description8 = icdWidget.mrDxCollectionCustomObjects[7].description;

                //newcfcptda.assessment_diagnosis_code8_id = icdWidget._selectedCodes[7].code_id;
                //newcfcptda.assessment_diagnosis_code8 = icdWidget._selectedCodes[7].icd9_code;
                newcfcptda.h = "H";
                if (icdWidget.mrDxCollectionCustomObjects.Count() < 13)
                {
                    if (cfcChangeptda.assessment_diagnosis_code8_checked)
                    {
                        if (!dictionaryofPointers.Contains("H"))
                            dictionaryofPointers.Add("H");
                        if (!newcfcptda.pointers.Contains("H"))
                            newcfcptda.pointers = newcfcptda.pointers + "H";
                    }
                    else if (newcfcptda.pointers.Length == 0)
                        newcfcptda.pointers = "";
                    newcfcptda.assessment_diagnosis_code8_checked = cfcChangeptda.assessment_diagnosis_code8_checked;
                    newcfcptda.assessment_diagnosis_code8_visibility = "Visible";
                }
                else
                    newcfcptda.assessment_diagnosis_code8_visibility = "Visible";
                newcfcptda.assessment_diagnosis_code_description8 = icdWidget.mrDxCollectionCustomObjects[7].description;
                // newcfcptda.assessment_diagnosis_code_icd10_8 = icdWidget._selectedCodes[7].icd10_code;

                if (!cfcChangeptda.assessment_diagnosis_code8_checked)
                {
                    dictionaryofPointers.Remove("H");
                }
            }
            else
            {
                newcfcptda.assessment_diagnosis_code8_checked = false;
                newcfcptda.assessment_diagnosis_code8_visibility = "Collapsed";
                newcfcptda.h = "";
            }
            if (icdWidget.mrDxCollectionCustomObjects.Count() > 8)
            {

                newcfcptda.assessment_diagnosis_code9_id = icdWidget.mrDxCollectionCustomObjects[8].code_id;
                newcfcptda.assessment_diagnosis_code9 = icdWidget.mrDxCollectionCustomObjects[8].code;
                newcfcptda.i = "I";
                if (icdWidget.mrDxCollectionCustomObjects.Count() < 13)
                {
                    if (cfcChangeptda.assessment_diagnosis_code9_checked)
                    {
                        if (!dictionaryofPointers.Contains("I"))
                            dictionaryofPointers.Add("I");
                        if (!newcfcptda.pointers.Contains("I"))
                            newcfcptda.pointers = newcfcptda.pointers + "I";
                    }
                    else if (newcfcptda.pointers.Length == 0)
                        newcfcptda.pointers = "";
                    newcfcptda.assessment_diagnosis_code9_checked = cfcChangeptda.assessment_diagnosis_code9_checked;
                    newcfcptda.assessment_diagnosis_code9_visibility = "Visible";
                }
                else
                    newcfcptda.assessment_diagnosis_code9_visibility = "Visible";
                newcfcptda.assessment_diagnosis_code_description9 = icdWidget.mrDxCollectionCustomObjects[8].description;
                // newcfcptda.assessment_diagnosis_code_icd10_9 = icdWidget._selectedCodes[8].icd10_code;
                if (!cfcChangeptda.assessment_diagnosis_code9_checked)
                {
                    dictionaryofPointers.Remove("I");
                }
            }
            else
            {
                newcfcptda.assessment_diagnosis_code9_checked = false;
                newcfcptda.assessment_diagnosis_code9_visibility = "Collapsed";
                newcfcptda.i = "";
            }

            if (icdWidget.mrDxCollectionCustomObjects.Count() > 9)
            {

                newcfcptda.assessment_diagnosis_code10_id = icdWidget.mrDxCollectionCustomObjects[9].code_id;
                newcfcptda.assessment_diagnosis_code10 = icdWidget.mrDxCollectionCustomObjects[9].code;
                newcfcptda.j = "J";
                if (icdWidget.mrDxCollectionCustomObjects.Count() < 13)
                {
                    if (cfcChangeptda.assessment_diagnosis_code10_checked)
                    {
                        if (!dictionaryofPointers.Contains("J"))
                            dictionaryofPointers.Add("J");
                        if (!newcfcptda.pointers.Contains("J"))
                            newcfcptda.pointers = newcfcptda.pointers + "J";
                    }
                    else if (newcfcptda.pointers.Length == 0)
                        newcfcptda.pointers = "";
                    newcfcptda.assessment_diagnosis_code10_checked = cfcChangeptda.assessment_diagnosis_code10_checked;
                    newcfcptda.assessment_diagnosis_code10_visibility = "Visible";

                    if (!cfcChangeptda.assessment_diagnosis_code10_checked)
                    {
                        dictionaryofPointers.Remove("J");
                    }
                }
                else
                    newcfcptda.assessment_diagnosis_code10_visibility = "Visible";
                newcfcptda.assessment_diagnosis_code_description10 = icdWidget.mrDxCollectionCustomObjects[9].description;
                // newcfcptda.assessment_diagnosis_code_icd10_10 = icdWidget._selectedCodes[9].icd10_code;
            }
            else
            {
                newcfcptda.assessment_diagnosis_code10_checked = false;
                newcfcptda.assessment_diagnosis_code10_visibility = "Collapsed";
                newcfcptda.j = "";
            }

            if (icdWidget.mrDxCollectionCustomObjects.Count() > 10)
            {

                newcfcptda.assessment_diagnosis_code11_id = icdWidget.mrDxCollectionCustomObjects[10].code_id;
                newcfcptda.assessment_diagnosis_code11 = icdWidget.mrDxCollectionCustomObjects[10].code;
                newcfcptda.k = "K";
                if (icdWidget.mrDxCollectionCustomObjects.Count() < 13)
                {
                    if (cfcChangeptda.assessment_diagnosis_code11_checked)
                    {
                        if (!dictionaryofPointers.Contains("K"))
                            dictionaryofPointers.Add("K");
                        if (!newcfcptda.pointers.Contains("K"))
                            newcfcptda.pointers = newcfcptda.pointers + "K";
                    }
                    else if (newcfcptda.pointers.Length == 0)
                        newcfcptda.pointers = "";
                    newcfcptda.assessment_diagnosis_code11_checked = cfcChangeptda.assessment_diagnosis_code11_checked;
                    newcfcptda.assessment_diagnosis_code11_visibility = "Visible";
                    if (!cfcChangeptda.assessment_diagnosis_code11_checked)
                    {
                        dictionaryofPointers.Remove("K");
                    }
                }
                else
                    newcfcptda.assessment_diagnosis_code11_visibility = "Visible";
                newcfcptda.assessment_diagnosis_code_description11 = icdWidget.mrDxCollectionCustomObjects[10].description;
                // newcfcptda.assessment_diagnosis_code_icd10_11 = icdWidget._selectedCodes[10].icd10_code;
            }
            else
            {
                newcfcptda.assessment_diagnosis_code11_checked = false;
                newcfcptda.assessment_diagnosis_code11_visibility = "Collapsed";
                newcfcptda.k = "";
            }

            if (icdWidget.mrDxCollectionCustomObjects.Count() > 11)
            {

                newcfcptda.assessment_diagnosis_code12_id = icdWidget.mrDxCollectionCustomObjects[11].code_id;
                newcfcptda.assessment_diagnosis_code12 = icdWidget.mrDxCollectionCustomObjects[11].code;
                newcfcptda.l = "L";
                if (icdWidget.mrDxCollectionCustomObjects.Count() < 13)
                {
                    if (cfcChangeptda.assessment_diagnosis_code12_checked)
                    {
                        if (!dictionaryofPointers.Contains("L"))
                            dictionaryofPointers.Add("L");
                        if (!newcfcptda.pointers.Contains("L"))
                            newcfcptda.pointers = newcfcptda.pointers + "L";
                    }
                    else if (newcfcptda.pointers.Length == 0)
                        newcfcptda.pointers = "";
                    newcfcptda.assessment_diagnosis_code12_checked = cfcChangeptda.assessment_diagnosis_code12_checked;
                    newcfcptda.assessment_diagnosis_code12_visibility = "Visible";
                    if (!cfcChangeptda.assessment_diagnosis_code12_checked)
                    {
                        dictionaryofPointers.Remove("L");
                    }
                }
                else
                    newcfcptda.assessment_diagnosis_code12_visibility = "Visible";
                newcfcptda.assessment_diagnosis_code_description12 = icdWidget.mrDxCollectionCustomObjects[11].description;
                // newcfcptda.assessment_diagnosis_code_icd10_12 = icdWidget._selectedCodes[11].icd10_code;
            }
            else
            {
                newcfcptda.assessment_diagnosis_code12_checked = false;
                newcfcptda.assessment_diagnosis_code12_visibility = "Collapsed";
                newcfcptda.l = "";
            }

            string str = string.Empty;
            foreach (string key in dictionaryofPointers)
            {
                str += key;
            }
            newcfcptda.pointers = str;//Reverse(newcfcptda.pointers);
            cfcChangeptda.pointers = str;
            oldPointers = newcfcptda.pointers;
        }
        public static string Reverse(string s)
        {
            char[] charArray = s.ToCharArray();
            Array.Reverse(charArray);
            return new string(charArray);
        }
        private void UpdateIcdChangesToCpt(ref CustomFormattedCPTDiagnosisAssociation newcfcptda, Socrates.Views.Charts.Widgets.ICD9Codes icdWidget)
        {
            //if (icdWidget.mrDxCollectionCustomObjects.Count() > 0)
            if (icdWidget.mrDxCollectionCustomObjects.Count() > 0)
            {
                newcfcptda.assessment_diagnosis_code1_id = icdWidget.mrDxCollectionCustomObjects[0].code_id;
                newcfcptda.assessment_diagnosis_code1 = icdWidget.mrDxCollectionCustomObjects[0].code;
                if (icdWidget.mrDxCollectionCustomObjects.Count() < 5)
                {
                    newcfcptda.assessment_diagnosis_code1_checked = true;
                    newcfcptda.assessment_diagnosis_code1_visibility = "Visible";
                }
                else
                    newcfcptda.assessment_diagnosis_code1_visibility = "Visible";
                newcfcptda.assessment_diagnosis_code_description1 = icdWidget.mrDxCollectionCustomObjects[0].description;

                // newcfcptda.assessment_diagnosis_code1_id = icdWidget._selectedCodes[0].code_id;
                // newcfcptda.assessment_diagnosis_code1 = icdWidget._selectedCodes[0].icd9_code;
                newcfcptda.a = "A";
                if (icdWidget.mrDxCollectionCustomObjects.Count() < 5)
                {

                    newcfcptda.assessment_diagnosis_code1_checked = true;
                    //if (!newcfcptda.pointers.Contains("A"))
                    //   newcfcptda.pointers = newcfcptda.pointers + "A";
                    newcfcptda.assessment_diagnosis_code1_visibility = "Visible";
                }
                else
                    newcfcptda.assessment_diagnosis_code1_visibility = "Visible";
                newcfcptda.assessment_diagnosis_code_description1 = icdWidget.mrDxCollectionCustomObjects[0].description;
                // newcfcptda.assessment_diagnosis_code_icd10_1 = icdWidget._selectedCodes[0].icd10_code;


            }
            if (icdWidget.mrDxCollectionCustomObjects.Count() > 1)
            {
                newcfcptda.assessment_diagnosis_code2_id = icdWidget.mrDxCollectionCustomObjects[1].code_id;
                newcfcptda.assessment_diagnosis_code2 = icdWidget.mrDxCollectionCustomObjects[1].code;
                if (icdWidget.mrDxCollectionCustomObjects.Count() < 5)
                {
                    newcfcptda.assessment_diagnosis_code2_checked = true;
                    newcfcptda.assessment_diagnosis_code2_visibility = "Visible";
                }
                else
                    newcfcptda.assessment_diagnosis_code2_visibility = "Visible";
                newcfcptda.assessment_diagnosis_code_description2 = icdWidget.mrDxCollectionCustomObjects[1].description;

                //newcfcptda.assessment_diagnosis_code2_id = icdWidget._selectedCodes[1].code_id;
                //newcfcptda.assessment_diagnosis_code2 = icdWidget._selectedCodes[1].icd9_code;
                newcfcptda.b = "B";
                if (icdWidget.mrDxCollectionCustomObjects.Count() < 5)
                {
                    //if (!newcfcptda.pointers.Contains("B"))
                    //    newcfcptda.pointers = newcfcptda.pointers + "B";
                    // newcfcptda.pointers = newcfcptda.pointers + "B";
                    newcfcptda.assessment_diagnosis_code2_checked = true;
                    newcfcptda.assessment_diagnosis_code2_visibility = "Visible";
                }
                else
                    newcfcptda.assessment_diagnosis_code2_visibility = "Visible";
                newcfcptda.assessment_diagnosis_code_description2 = icdWidget.mrDxCollectionCustomObjects[1].description;
                //newcfcptda.assessment_diagnosis_code_icd10_2 = icdWidget._selectedCodes[1].icd10_code;
            }
            else
            {
                newcfcptda.assessment_diagnosis_code2_checked = false;
                newcfcptda.assessment_diagnosis_code2_visibility = "Collapsed";
            }

            if (icdWidget.mrDxCollectionCustomObjects.Count() > 2)
            {
                newcfcptda.assessment_diagnosis_code3_id = icdWidget.mrDxCollectionCustomObjects[2].code_id;
                newcfcptda.assessment_diagnosis_code3 = icdWidget.mrDxCollectionCustomObjects[2].code;
                if (icdWidget.mrDxCollectionCustomObjects.Count() < 5)
                {
                    newcfcptda.assessment_diagnosis_code3_checked = true;
                    newcfcptda.assessment_diagnosis_code3_visibility = "Visible";
                }
                else
                    newcfcptda.assessment_diagnosis_code3_visibility = "Visible";
                newcfcptda.assessment_diagnosis_code_description3 = icdWidget.mrDxCollectionCustomObjects[2].description;
                //newcfcptda.assessment_diagnosis_code3_id = icdWidget._selectedCodes[2].code_id;
                //newcfcptda.assessment_diagnosis_code3 = icdWidget._selectedCodes[2].icd9_code;
                newcfcptda.c = "C";
                if (icdWidget.mrDxCollectionCustomObjects.Count() < 5)
                {
                    //if (!newcfcptda.pointers.Contains("C"))
                    //    newcfcptda.pointers = newcfcptda.pointers + "C";
                    // newcfcptda.pointers = newcfcptda.pointers + "C";
                    newcfcptda.assessment_diagnosis_code3_checked = true;
                    newcfcptda.assessment_diagnosis_code3_visibility = "Visible";
                }
                else
                    newcfcptda.assessment_diagnosis_code3_visibility = "Visible";
                newcfcptda.assessment_diagnosis_code_description3 = icdWidget.mrDxCollectionCustomObjects[2].description;
                //newcfcptda.assessment_diagnosis_code_icd10_3 = icdWidget._selectedCodes[2].icd10_code;
            }
            else
            {
                newcfcptda.assessment_diagnosis_code3_checked = false;
                newcfcptda.assessment_diagnosis_code3_visibility = "Collapsed";
            }
            if (icdWidget.mrDxCollectionCustomObjects.Count() > 3)
            {
                newcfcptda.assessment_diagnosis_code4_id = icdWidget.mrDxCollectionCustomObjects[3].code_id;
                newcfcptda.assessment_diagnosis_code4 = icdWidget.mrDxCollectionCustomObjects[3].code;
                if (icdWidget.mrDxCollectionCustomObjects.Count() < 5)
                {
                    newcfcptda.assessment_diagnosis_code4_checked = true;
                    newcfcptda.assessment_diagnosis_code4_visibility = "Visible";
                }
                else
                    newcfcptda.assessment_diagnosis_code4_visibility = "Visible";
                newcfcptda.assessment_diagnosis_code_description4 = icdWidget.mrDxCollectionCustomObjects[3].description;
                //newcfcptda.assessment_diagnosis_code4_id = icdWidget._selectedCodes[3].code_id;
                //newcfcptda.assessment_diagnosis_code4 = icdWidget._selectedCodes[3].icd9_code;
                newcfcptda.d = "D";
                if (icdWidget.mrDxCollectionCustomObjects.Count() < 5)
                {
                    //if (!newcfcptda.pointers.Contains("D"))
                    //    newcfcptda.pointers = newcfcptda.pointers + "D";
                    // newcfcptda.pointers = newcfcptda.pointers + "D";
                    newcfcptda.assessment_diagnosis_code4_checked = true;
                    newcfcptda.assessment_diagnosis_code4_visibility = "Visible";
                }
                else
                    newcfcptda.assessment_diagnosis_code4_visibility = "Visible";
                newcfcptda.assessment_diagnosis_code_description4 = icdWidget.mrDxCollectionCustomObjects[3].description;
                // newcfcptda.assessment_diagnosis_code_icd10_4 = icdWidget._selectedCodes[3].icd10_code;
            }
            else
            {
                newcfcptda.assessment_diagnosis_code4_checked = false;
                newcfcptda.assessment_diagnosis_code4_visibility = "Collapsed";
            }
            if (icdWidget.mrDxCollectionCustomObjects.Count() > 4)
            {
                newcfcptda.assessment_diagnosis_code5_id = icdWidget.mrDxCollectionCustomObjects[4].code_id;
                newcfcptda.assessment_diagnosis_code5 = icdWidget.mrDxCollectionCustomObjects[4].code;
                if (icdWidget.mrDxCollectionCustomObjects.Count() < 5)
                {
                    newcfcptda.assessment_diagnosis_code5_checked = true;
                    newcfcptda.assessment_diagnosis_code5_visibility = "visible";
                }
                else
                    newcfcptda.assessment_diagnosis_code5_visibility = "visible";
                newcfcptda.assessment_diagnosis_code_description5 = icdWidget.mrDxCollectionCustomObjects[4].description;

                //newcfcptda.assessment_diagnosis_code5_id = icdWidget._selectedCodes[4].code_id;
                //newcfcptda.assessment_diagnosis_code5 = icdWidget._selectedCodes[4].icd9_code;
                newcfcptda.e = "E";
                if (icdWidget.mrDxCollectionCustomObjects.Count() < 5)
                {
                    //if (!newcfcptda.pointers.Contains("E"))
                    //    newcfcptda.pointers = newcfcptda.pointers + "E";
                    // newcfcptda.pointers = newcfcptda.pointers + "E";
                    newcfcptda.assessment_diagnosis_code5_checked = true;
                    newcfcptda.assessment_diagnosis_code5_visibility = "Visible";
                }
                else
                    newcfcptda.assessment_diagnosis_code5_visibility = "Visible";
                newcfcptda.assessment_diagnosis_code_description5 = icdWidget.mrDxCollectionCustomObjects[4].description;
                //newcfcptda.assessment_diagnosis_code_icd10_5 = icdWidget._selectedCodes[4].icd10_code;
            }
            else
            {
                newcfcptda.assessment_diagnosis_code5_checked = false;
                newcfcptda.assessment_diagnosis_code5_visibility = "Collapsed";
            }
            if (icdWidget.mrDxCollectionCustomObjects.Count() > 5)
            {
                newcfcptda.assessment_diagnosis_code6_id = icdWidget.mrDxCollectionCustomObjects[5].code_id;
                newcfcptda.assessment_diagnosis_code6 = icdWidget.mrDxCollectionCustomObjects[5].code;
                if (icdWidget.mrDxCollectionCustomObjects.Count() < 5)
                {
                    newcfcptda.assessment_diagnosis_code6_checked = true;
                    newcfcptda.assessment_diagnosis_code6_visibility = "Visible";
                }
                else
                    newcfcptda.assessment_diagnosis_code6_visibility = "Visible";
                newcfcptda.assessment_diagnosis_code_description6 = icdWidget.mrDxCollectionCustomObjects[5].description;

                //newcfcptda.assessment_diagnosis_code6_id = icdWidget._selectedCodes[5].code_id;
                //newcfcptda.assessment_diagnosis_code6 = icdWidget._selectedCodes[5].icd9_code;
                newcfcptda.f = "F";
                if (icdWidget.mrDxCollectionCustomObjects.Count() < 5)
                {
                    //if (!newcfcptda.pointers.Contains("F"))
                    //    newcfcptda.pointers = newcfcptda.pointers + "F";
                    //newcfcptda.pointers = newcfcptda.pointers + "F";
                    newcfcptda.assessment_diagnosis_code6_checked = true;
                    newcfcptda.assessment_diagnosis_code6_visibility = "Visible";
                }
                else
                    newcfcptda.assessment_diagnosis_code6_visibility = "Visible";
                newcfcptda.assessment_diagnosis_code_description6 = icdWidget.mrDxCollectionCustomObjects[5].description;
                //newcfcptda.assessment_diagnosis_code_icd10_6 = icdWidget._selectedCodes[5].icd10_code;
            }
            else
            {
                newcfcptda.assessment_diagnosis_code6_checked = false;
                newcfcptda.assessment_diagnosis_code6_visibility = "Collapsed";
            }
            if (icdWidget.mrDxCollectionCustomObjects.Count() > 6)
            {
                newcfcptda.assessment_diagnosis_code7_id = icdWidget.mrDxCollectionCustomObjects[6].code_id;
                newcfcptda.assessment_diagnosis_code7 = icdWidget.mrDxCollectionCustomObjects[6].code;
                if (icdWidget.mrDxCollectionCustomObjects.Count() < 5)
                {
                    newcfcptda.assessment_diagnosis_code7_checked = true;
                    newcfcptda.assessment_diagnosis_code7_visibility = "Visible";
                }
                else
                    newcfcptda.assessment_diagnosis_code7_visibility = "Visible";
                newcfcptda.assessment_diagnosis_code_description7 = icdWidget.mrDxCollectionCustomObjects[6].description;

                //newcfcptda.assessment_diagnosis_code7_id = icdWidget._selectedCodes[6].code_id;
                //newcfcptda.assessment_diagnosis_code7 = icdWidget._selectedCodes[6].icd9_code;
                newcfcptda.g = "G";
                if (icdWidget.mrDxCollectionCustomObjects.Count() < 5)
                {
                    //if (!newcfcptda.pointers.Contains("G"))
                    //    newcfcptda.pointers = newcfcptda.pointers + "G";
                    //newcfcptda.pointers = newcfcptda.pointers + "G";
                    newcfcptda.assessment_diagnosis_code7_checked = true;
                    newcfcptda.assessment_diagnosis_code7_visibility = "Visible";
                }
                else
                    newcfcptda.assessment_diagnosis_code7_visibility = "Visible";
                newcfcptda.assessment_diagnosis_code_description7 = icdWidget.mrDxCollectionCustomObjects[6].description;
                //newcfcptda.assessment_diagnosis_code_icd10_7 = icdWidget._selectedCodes[6].icd10_code;
            }
            else
            {
                newcfcptda.assessment_diagnosis_code7_checked = false;
                newcfcptda.assessment_diagnosis_code7_visibility = "Collapsed";
            }
            if (icdWidget.mrDxCollectionCustomObjects.Count() > 7)
            {
                newcfcptda.assessment_diagnosis_code8_id = icdWidget.mrDxCollectionCustomObjects[7].code_id;
                newcfcptda.assessment_diagnosis_code8 = icdWidget.mrDxCollectionCustomObjects[7].code;
                if (icdWidget.mrDxCollectionCustomObjects.Count() < 5)
                {
                    newcfcptda.assessment_diagnosis_code8_checked = true;
                    newcfcptda.assessment_diagnosis_code8_visibility = "Visible";
                }
                else
                    newcfcptda.assessment_diagnosis_code8_visibility = "Visible";
                newcfcptda.assessment_diagnosis_code_description8 = icdWidget.mrDxCollectionCustomObjects[7].description;

                //newcfcptda.assessment_diagnosis_code8_id = icdWidget._selectedCodes[7].code_id;
                //newcfcptda.assessment_diagnosis_code8 = icdWidget._selectedCodes[7].icd9_code;
                newcfcptda.h = "H";
                if (icdWidget.mrDxCollectionCustomObjects.Count() < 5)
                {
                    //if (!newcfcptda.pointers.Contains("H"))
                    //    newcfcptda.pointers = newcfcptda.pointers + "H";
                    //  newcfcptda.pointers = newcfcptda.pointers + "H";
                    newcfcptda.assessment_diagnosis_code8_checked = true;
                    newcfcptda.assessment_diagnosis_code8_visibility = "Visible";
                }
                else
                    newcfcptda.assessment_diagnosis_code8_visibility = "Visible";
                newcfcptda.assessment_diagnosis_code_description8 = icdWidget.mrDxCollectionCustomObjects[7].description;
                // newcfcptda.assessment_diagnosis_code_icd10_8 = icdWidget._selectedCodes[7].icd10_code;
            }
            else
            {
                newcfcptda.assessment_diagnosis_code8_checked = false;
                newcfcptda.assessment_diagnosis_code8_visibility = "Collapsed";
            }
            if (icdWidget.mrDxCollectionCustomObjects.Count() > 8)
            {

                newcfcptda.assessment_diagnosis_code9_id = icdWidget.mrDxCollectionCustomObjects[8].code_id;
                newcfcptda.assessment_diagnosis_code9 = icdWidget.mrDxCollectionCustomObjects[8].code;
                newcfcptda.i = "I";
                if (icdWidget.mrDxCollectionCustomObjects.Count() < 5)
                {
                    //if (!newcfcptda.pointers.Contains("I"))
                    //    newcfcptda.pointers = newcfcptda.pointers + "I";
                    //newcfcptda.pointers = newcfcptda.pointers + "I";
                    newcfcptda.assessment_diagnosis_code9_checked = true;
                    newcfcptda.assessment_diagnosis_code9_visibility = "Visible";
                }
                else
                    newcfcptda.assessment_diagnosis_code9_visibility = "Visible";
                newcfcptda.assessment_diagnosis_code_description9 = icdWidget.mrDxCollectionCustomObjects[8].description;
                //newcfcptda.assessment_diagnosis_code_icd10_9 = icdWidget._selectedCodes[8].icd10_code;
            }
            else
            {
                newcfcptda.assessment_diagnosis_code9_checked = false;
                newcfcptda.assessment_diagnosis_code9_visibility = "Collapsed";
            }

            if (icdWidget.mrDxCollectionCustomObjects.Count() > 9)
            {

                newcfcptda.assessment_diagnosis_code10_id = icdWidget.mrDxCollectionCustomObjects[9].code_id;
                newcfcptda.assessment_diagnosis_code10 = icdWidget.mrDxCollectionCustomObjects[9].code;
                newcfcptda.j = "J";
                if (icdWidget.mrDxCollectionCustomObjects.Count() < 5)
                {
                    //if (!newcfcptda.pointers.Contains("J"))
                    //    newcfcptda.pointers = newcfcptda.pointers + "J";
                    //newcfcptda.pointers = newcfcptda.pointers + "J";
                    newcfcptda.assessment_diagnosis_code10_checked = true;
                    newcfcptda.assessment_diagnosis_code10_visibility = "Visible";
                }
                else
                    newcfcptda.assessment_diagnosis_code10_visibility = "Visible";
                newcfcptda.assessment_diagnosis_code_description10 = icdWidget.mrDxCollectionCustomObjects[9].description;
                //newcfcptda.assessment_diagnosis_code_icd10_11 = icdWidget._selectedCodes[9].icd10_code;
            }
            else
            {
                newcfcptda.assessment_diagnosis_code10_checked = false;
                newcfcptda.assessment_diagnosis_code10_visibility = "Collapsed";
            }

            if (icdWidget.mrDxCollectionCustomObjects.Count() > 10)
            {

                newcfcptda.assessment_diagnosis_code11_id = icdWidget.mrDxCollectionCustomObjects[10].code_id;
                newcfcptda.assessment_diagnosis_code11 = icdWidget.mrDxCollectionCustomObjects[10].code;
                newcfcptda.k = "K";
                if (icdWidget.mrDxCollectionCustomObjects.Count() < 5)
                {
                    //if (!newcfcptda.pointers.Contains("K"))
                    //    newcfcptda.pointers = newcfcptda.pointers + "K";
                    //newcfcptda.pointers = newcfcptda.pointers + "K";
                    newcfcptda.assessment_diagnosis_code11_checked = true;
                    newcfcptda.assessment_diagnosis_code11_visibility = "Visible";
                }
                else
                    newcfcptda.assessment_diagnosis_code11_visibility = "Visible";
                newcfcptda.assessment_diagnosis_code_description11 = icdWidget.mrDxCollectionCustomObjects[10].description;
                // newcfcptda.assessment_diagnosis_code_icd10_11 = icdWidget._selectedCodes[10].icd10_code;
            }
            else
            {
                newcfcptda.assessment_diagnosis_code11_checked = false;
                newcfcptda.assessment_diagnosis_code11_visibility = "Collapsed";
            }

            if (icdWidget.mrDxCollectionCustomObjects.Count() > 11)
            {

                newcfcptda.assessment_diagnosis_code12_id = icdWidget.mrDxCollectionCustomObjects[11].code_id;
                newcfcptda.assessment_diagnosis_code12 = icdWidget.mrDxCollectionCustomObjects[11].code;
                newcfcptda.l = "L";
                if (icdWidget.mrDxCollectionCustomObjects.Count() < 5)
                {
                    //if (!newcfcptda.pointers.Contains("L"))
                    //    newcfcptda.pointers = newcfcptda.pointers + "L";
                    //newcfcptda.pointers = newcfcptda.pointers + "L";
                    newcfcptda.assessment_diagnosis_code12_checked = true;
                    newcfcptda.assessment_diagnosis_code12_visibility = "Visible";
                }
                else
                    newcfcptda.assessment_diagnosis_code12_visibility = "Visible";
                newcfcptda.assessment_diagnosis_code_description12 = icdWidget.mrDxCollectionCustomObjects[11].description;
                //newcfcptda.assessment_diagnosis_code_icd10_12 = icdWidget._selectedCodes[11].icd10_code;
            }
            else
            {
                newcfcptda.assessment_diagnosis_code12_checked = false;
                newcfcptda.assessment_diagnosis_code12_visibility = "Collapsed";
            }

        }

        private void UpdatePIP()
        {
            foreach (patient_insurance_provider pip in lstPIP)
            {
                if (pip.order == 1)
                {
                    pip.prior_authorization_number = priorAuthorizationNumber;
                    pip.referral_start_date = dpReferralStartDate.SelectedDate;
                    pip.referral_expiry_date = dpReferralExpiryDate.SelectedDate;
                    if (tbVisitsUsed.Value != null)
                        pip.visits_used = Convert.ToInt32(tbVisitsUsed.Value);
                    else
                        pip.visits_used = null;
                    if (tbAllowedVisits.Value != null)
                        pip.allowed_visits = Convert.ToInt32(tbAllowedVisits.Value);
                    else
                        pip.allowed_visits = null;
                }
            }
        }

        private bool IsTabValidOnNext()
        {
            bool isValid = true;
            bool isTabOneValid = true;
            bool isTabTwoValid = true;
            //Socrates.Views.Charts.Widgets.CPTCodes cptWidget = (Socrates.Views.Charts.Widgets.CPTCodes)SpIcdCpt.Children.ElementAt(0);
            //Socrates.Views.Charts.Widgets.ICD9Codes icdWidget = (Socrates.Views.Charts.Widgets.ICD9Codes)SpIcdCpt.Children.ElementAt(2);
            this.tbChiefComplaint.ClearValidationError();
            if (tbChiefComplaint.Value == null || string.IsNullOrEmpty(tbChiefComplaint.Value.ToString()))
            {
                this.tbChiefComplaint.SetValidation("Please enter chief complaint.");
                this.tbChiefComplaint.RaiseValidationError();
                isValid = false;
                isTabOneValid = false;
            }

            this.RdpDateOfService.ClearValidationError();
            if (RdpDateOfService.SelectedDate == null)
            {
                this.RdpDateOfService.SetValidation("Please select date of service.");
                this.RdpDateOfService.RaiseValidationError();
                isValid = false;
                isTabOneValid = false;
            }

            this.DdlPhysicianPstChrg.ClearValidationError();
            if (DdlPhysicianPstChrg.SelectedIndex == -1)
            {
                this.DdlPhysicianPstChrg.SetValidation("Please select physician.");
                this.DdlPhysicianPstChrg.RaiseValidationError();
                isValid = false;
                isTabOneValid = false;
            }

            this.DdlFacility.ClearValidationError();
            if (DdlFacility.SelectedIndex == -1)
            {
                this.DdlFacility.SetValidation("Please select Facility.");
                this.DdlFacility.RaiseValidationError();
                isValid = false;
                isTabOneValid = false;
            }

            if (RadTabControl1.SelectedIndex > 0 && cptWidget.mrDxCPTCollection.Count() == 0)
            {
                InformationWindow iw = new InformationWindow("Please select at least one CPT code.");
                iw.Show();
                isValid = false;
                isTabOneValid = false;
            }
            else if (RadTabControl1.SelectedIndex > 1 && icdWidget.mrDxCollectionCustomObjects.Count() == 0)
            {
                InformationWindow iw = new InformationWindow("Please select at least one ICD9 code.");
                iw.Show();
                isValid = false;
                isTabTwoValid = false;
            }

            //if (cptWidget.mrDxCPTCollection.Count() == 0 || icdWidget.mrDxCollectionCustomObjects.Count() == 0)
            //{
            //    InformationWindow iw = new InformationWindow("Please select at least one CPT code and one ICD9 code.");
            //    iw.Show();
            //    isValid = false;
            //}
            if (!isValid)
            {
                if (RadTabControl1.SelectedIndex > 0)
                {
                    if (!isTabOneValid)
                    {
                        this.BtnPrevious.Visibility = System.Windows.Visibility.Collapsed;
                        this.BtnNext.Visibility = System.Windows.Visibility.Visible;
                        RadTabControl1.SelectedIndex = 0;
                    }
                    else if (!isTabTwoValid)
                        RadTabControl1.SelectedIndex = 1;

                }
                return false;
            }
            else
                return true;
        }

        public mr_assessment_diagnosis mad { get; set; }

        private void RadGvCPTDiagnosis_RowDetailsVisibilityChanged(object sender, GridViewRowDetailsEventArgs e)
        {
            if (e.DetailsElement == null) return;
            Telerik.Windows.Controls.RadComboBox rcb = e.DetailsElement.ChildrenOfType<RadComboBox>().FirstOrDefault();
            int selectedPOS = ((facility)DdlFacility.SelectedItem).place_of_service_code;
            if (((CustomFormattedCPTDiagnosisAssociation)e.DetailsElement.DataContext).posc != null)
                selectedPOS = ((CustomFormattedCPTDiagnosisAssociation)e.DetailsElement.DataContext).posc.Value;
            ((CustomFormattedCPTDiagnosisAssociation)e.DetailsElement.DataContext).controlsLoaded = true;
            if (rcb.Items.Count() == 0)
            {
                rcb.ItemsSource = enumPOS;
                rcb.DisplayMemberPath = "code";
                rcb.SelectedValuePath = "code";
            }
            rcb.SelectedValue = selectedPOS;


        }

        private void TxtAuthorizationNumber_TextChanged(object sender, TextChangedEventArgs e)
        {
            TextBox tb = (TextBox)sender;
            if (tb != null)
                priorAuthorizationNumber = tb.Text;
        }

        //private bool IsMinDataEntered()
        //{

        //    this.tbChiefComplaint.ClearValidationError();
        //    if (tbChiefComplaint.Value == null || string.IsNullOrEmpty(tbChiefComplaint.Value.ToString()))
        //    {
        //        this.tbChiefComplaint.SetValidation("Please enter chief complaint.");
        //        this.tbChiefComplaint.RaiseValidationError();
        //        return false;
        //    }

        //    this.RdpDateOfService.ClearValidationError();
        //    if (RdpDateOfService.SelectedDate == null)
        //    {
        //        this.RdpDateOfService.SetValidation("Please select date of service.");
        //        this.RdpDateOfService.RaiseValidationError();
        //        return false;
        //    }

        //    this.DdlPhysicianPstChrg.ClearValidationError();
        //    if (DdlPhysicianPstChrg.SelectedIndex == -1)
        //    {
        //        this.DdlPhysicianPstChrg.SetValidation("Please select physician.");
        //        this.DdlPhysicianPstChrg.RaiseValidationError();
        //        return false;
        //    }

        //    this.DdlFacility.ClearValidationError();
        //    if (DdlFacility.SelectedIndex == -1)
        //    {
        //        this.DdlFacility.SetValidation("Please select Facility.");
        //        this.DdlFacility.RaiseValidationError();
        //        return false;
        //    }
        //    return true;
        //}

        private bool IsMinDataEntered()
        {
            bool isValid = true;
            this.tbChiefComplaint.ClearValidationError();
            if (tbChiefComplaint.Value == null || string.IsNullOrEmpty(tbChiefComplaint.Value.ToString()))
            {
                this.tbChiefComplaint.SetValidation("Please enter chief complaint.");
                this.tbChiefComplaint.RaiseValidationError();
                isValid = false;
            }

            this.RdpDateOfService.ClearValidationError();
            if (RdpDateOfService.SelectedDate == null)
            {
                this.RdpDateOfService.SetValidation("Please select date of service.");
                this.RdpDateOfService.RaiseValidationError();
                isValid = false;
            }

            this.DdlPhysicianPstChrg.ClearValidationError();
            if (DdlPhysicianPstChrg.SelectedIndex == -1)
            {
                this.DdlPhysicianPstChrg.SetValidation("Please select physician.");
                this.DdlPhysicianPstChrg.RaiseValidationError();
                isValid = false;
            }

            this.DdlFacility.ClearValidationError();
            if (DdlFacility.SelectedIndex == -1)
            {
                this.DdlFacility.SetValidation("Please select Facility.");
                this.DdlFacility.RaiseValidationError();
                isValid = false;
            }
            if (isValid)
                return true;
            else
                return false;
        }
// save button starts
        private void BtnSave_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (IsMinDataEntered() && ((icdWidget.mrDxCollectionCustomObjects.Count() > 0 && cptWidget.mrDxCPTCollection.Count() > 0) ? IsCPTDAValid() : true))
                {
                    ButtonDisable();
                    PostChargesBusyIndicator.BusyContent = "Saving data...";
                    if (cfAppointment != null)
                        SaveUpdateConsultation();
                    else
                        CheckAndAddAppointment();
                    isButonSaveOnlyClicked = true;
                }
                else
                {
                    if (spErrors.Children.Count() == 0) return;
                    radCPTDAExpander.Visibility = System.Windows.Visibility.Visible;
                    radCPTDAExpander.IsExpanded = true;
                }

            }
            catch (Exception ex)
            {
                InformationWindow iw = new InformationWindow(ex.Message);
                iw.Show();
            }
        }

        private void RdpDateOfService_SelectionChanged(object sender, Telerik.Windows.Controls.SelectionChangedEventArgs e)
        {
            tbPatientDateOfService.Text = this.RdpDateOfService.SelectedDate.Value.Month.ToString("00") + "/" + this.RdpDateOfService.SelectedDate.Value.Day.ToString("00") + "/" + this.RdpDateOfService.SelectedDate.Value.Year.ToString("0000");
        }

        private void BtnSaveAndPrintHCFA_Click(object sender, RoutedEventArgs e)
        {
            if (IsCPTDAValid())
            {
                try
                {

                    HCFAPrintConfirmationWindow hcfaPrintConfirmationWindow = new HCFAPrintConfirmationWindow();
                    ((RadioButton)hcfaPrintConfirmationWindow.FindName("RbnSaveAndPrint")).Content = "Post to Billing and Print";
                    hcfaPrintConfirmationWindow.Show();
                    hcfaPrintConfirmationWindow.Closed += (hcfaSender, hcfaE) =>
                    {
                        try
                        {
                            if (((HCFAPrintConfirmationWindow)hcfaSender).DialogResult.Equals(true))
                            {
                                if (((HCFAPrintConfirmationWindow)hcfaSender).RbnPrintFields.IsChecked.Value)
                                    HCFAPrintOnlyFields = true;
                                else
                                    HCFAPrintOnlyFields = false;
                                if (((HCFAPrintConfirmationWindow)hcfaSender).RbnAll.IsChecked.Value)
                                {
                                    if (lstPIP.Count() == 0)
                                    {
                                        MessageWindow mw = new MessageWindow("Please update primary/secondary/tertiary insurence information.");
                                        mw.Show();
                                        return;
                                    }
                                    HCFAPrintInsuranceType = "All";
                                }
                                else if (((HCFAPrintConfirmationWindow)hcfaSender).RbnTertiaryInsurance.IsChecked.Value)
                                {
                                    if (lstPIP.Count() == 0 || lstPIP.Where(q => q.order == 3).Count() == 0)
                                    {
                                        MessageWindow mw = new MessageWindow("Please update tertiary insurence information.");
                                        mw.Show();
                                        return;
                                    }
                                    HCFAPrintInsuranceType = "TertiaryInsurance";
                                }
                                else if (((HCFAPrintConfirmationWindow)hcfaSender).RbnSecondaryInsurance.IsChecked.Value)
                                {
                                    if (lstPIP.Count() == 0 || lstPIP.Where(q => q.order == 2).Count() == 0)
                                    {
                                        MessageWindow mw = new MessageWindow("Please update secondary insurence information.");
                                        mw.Show();
                                        return;
                                    }
                                    HCFAPrintInsuranceType = "SecondaryInsurance";
                                }
                                else
                                {
                                    if (lstPIP.Count() == 0 || lstPIP.Where(q => q.order == 1).Count() == 0)
                                    {
                                        MessageWindow mw = new MessageWindow("Please update primary insurence information.");
                                        mw.Show();
                                        return;
                                    }
                                    HCFAPrintInsuranceType = "PrimaryInsurance";
                                }

                                if (((HCFAPrintConfirmationWindow)hcfaSender).RbnSaveAndPrint.IsChecked.Value)
                                {
                                    if (lstcurrent_custom_cpt_diagnosis_association.Where(q => ((q.procedure_unit_charge == null || q.procedure_unit_charge == 0) && !q.modify_unit_charge) || (q.modify_unit_charge && (q.modified_procedure_unit_charge == null || q.modified_procedure_unit_charge.Value == 0))).Count() > 0)
                                    {
                                        SuccessWindow sw = new SuccessWindow("The bill has '$0.00' amount chargable.");
                                        sw.Show();
                                    }
                                    isButtonSaveAndPrintHCFAClicked = true;
                                    isButonSaveApproveNotSubmitClaimClicked = false;
                                    isButonApproveAndSubmittedClicked = false;
                                    isButonSaveClicked = true;
                                }
                                else if (((HCFAPrintConfirmationWindow)hcfaSender).RbnApproveSubmitClaimAndPrint.IsChecked.Value)
                                {
                                    if (lstcurrent_custom_cpt_diagnosis_association.Where(q => ((q.procedure_unit_charge == null || q.procedure_unit_charge == 0) && !q.modify_unit_charge) || (q.modify_unit_charge && (q.modified_procedure_unit_charge == null || q.modified_procedure_unit_charge.Value == 0))).Count() > 0)
                                    {
                                        InformationWindow iw = new InformationWindow("The bill can not be submitted as it has '$0.00' amount chargable.");
                                        iw.Show();
                                        return;
                                    }
                                    isButtonSaveAndPrintHCFAClicked = true;
                                    isButonSaveApproveNotSubmitClaimClicked = false;
                                    isButonApproveAndSubmittedClicked = true;
                                    isButonSaveClicked = false;
                                }
                                else if (((HCFAPrintConfirmationWindow)hcfaSender).RbnApproveDoNotSubmitClaimPrint.IsChecked.Value)
                                {
                                    if (lstcurrent_custom_cpt_diagnosis_association.Where(q => ((q.procedure_unit_charge == null || q.procedure_unit_charge == 0) && !q.modify_unit_charge) || (q.modify_unit_charge && (q.modified_procedure_unit_charge == null || q.modified_procedure_unit_charge.Value == 0))).Count() > 0)
                                    {
                                        InformationWindow iw = new InformationWindow("The bill can not be submitted as it has '$0.00' amount chargable.");
                                        iw.Show();
                                        return;
                                    }
                                    isButtonSaveAndPrintHCFAClicked = true;
                                    isButonSaveApproveNotSubmitClaimClicked = true;
                                    isButonApproveAndSubmittedClicked = false;
                                    isButonSaveClicked = false;
                                }
                                ButtonDisable();
                                PostChargesBusyIndicator.BusyContent = "Creating superbill...";
                                if (cfAppointment != null)
                                    SaveUpdateConsultation();
                                else
                                    CheckAndAddAppointment();


                            }
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show(ex.Message);
                            ButtonEnable();
                        }
                    };

                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message);
                    ButtonEnable();
                }
            }
            else
            {
                radCPTDAExpander.Visibility = System.Windows.Visibility.Visible;
                radCPTDAExpander.IsExpanded = true;
            }
        }

        #region Load HCFA Report
        private void LoadReport(int encounterId)
        {
            isButtonSaveAndPrintHCFAClicked = false;
            var query = from sb in postBillingDomainContext.GetSuperbillsQuery() where sb.mr_patient_encounter_id == encounterId select sb;
            LoadOperation<superbill> loadOp = postBillingDomainContext.Load(query);
            loadOp.Completed += (sender, e) =>
            {
                LoadOperation<superbill> loadOpCompleted = (LoadOperation<superbill>)sender;
                if (loadOpCompleted.HasError)
                {
                    MessageBox.Show(loadOpCompleted.Error.Message);
                    return;
                }
                if (loadOpCompleted.Entities.Count() == 0)
                {
                    MessageBox.Show("Bill has not been posted. Please post the bill.");
                    return;
                }
                ChildWindow cw = new ChildWindow();
                cw.VerticalAlignment = VerticalAlignment.Stretch;
                cw.HorizontalAlignment = HorizontalAlignment.Center;
                cw.Title = "Health Insurance Claim Report";
                cw.Style = App.Current.Resources["ChildWindowStyle"] as Style;
                cw.Margin = new Thickness(10);

                if (loadOpCompleted.Entities.FirstOrDefault().super_bill_id > 0)
                {
                    viewerControl = new StiSLViewerControl();
                    viewerControl.progress = new StiProgressInformation();
                    viewerControl.progress.Start("Loading Report", "Please wait...", false);

                    Uri address = new Uri(Application.Current.Host.Source, "../Reports/ReportService.svc");
                    ReportService.ReportServiceClient service = new ReportService.ReportServiceClient("BasicHttpBinding_IReportService", address.AbsoluteUri);

                    Dictionary<string, object> parameters = new Dictionary<string, object>();
                    parameters.Add("ID", loadOpCompleted.Entities.FirstOrDefault().super_bill_id);
                    string loadReportName = string.Empty;
                    if (HCFAPrintOnlyFields)
                    {
                        if (HCFAPrintInsuranceType == "PrimaryInsurance")
                            loadReportName = "HCFA1500_PrimaryFields.mrt";
                        else if (HCFAPrintInsuranceType == "SecondaryInsurance")
                            loadReportName = "HCFA1500_SecondaryFields.mrt";
                        else if (HCFAPrintInsuranceType == "TertiaryInsurance")
                            loadReportName = "HCFA1500_TertiaryFields.mrt";
                        else
                            loadReportName = "HCFA1500_AllFields.mrt";
                    }
                    else
                    {
                        if (HCFAPrintInsuranceType == "PrimaryInsurance")
                            loadReportName = "HCFA1500_Primary.mrt";
                        else if (HCFAPrintInsuranceType == "SecondaryInsurance")
                            loadReportName = "HCFA1500_Secondary.mrt";
                        else if (HCFAPrintInsuranceType == "TertiaryInsurance")
                            loadReportName = "HCFA1500_Tertiary.mrt";
                        else
                            loadReportName = "HCFA1500_All.mrt";
                    }
                    service.LoadReportWithParamsCompleted += new EventHandler<ReportService.LoadReportWithParamsCompletedEventArgs>(service_LoadEncounterReportCompleted);
                    service.LoadReportWithParamsAsync(loadReportName, App.global_PracticeId, App.global_physicianID, parameters);

                    cw.Content = viewerControl;
                }
                else
                {
                    cw.Title = "Error Loading Health Insurance Claim Report";
                    TextBlock textBlock = new TextBlock();
                    textBlock.Text = "No superbill id was supplied";
                    cw.Content = textBlock;
                }

                cw.Show();
            };
        }

        private void service_LoadEncounterReportCompleted(object sender, ReportService.LoadReportWithParamsCompletedEventArgs e)
        {
            viewerControl.progress.Start("Loading Report", "Please wait...", false);
            try
            {
                viewerControl.ApplyRenderedReport(e.Result);
            }
            catch (Exception ex)
            {
                MessageWindow mw;

                if (e.Error != null)
                    mw = new MessageWindow("Error Loading Report", e.Error.Message);
                else if (e.Result.Substring(0, 6) == "Error:")
                    mw = new MessageWindow("Error Loading Report", e.Result);
                else
                    mw = new MessageWindow("Error Loading Report", "An error occurred while trying to load the report");
            }
            //if (e.Error == null && e.Result != null && e.Result.Length > 2 && e.Result.Substring(0, 6) != "Error:")
            //{
            //    viewerControl.ApplyRenderedReport(e.Result);
            //}
            //else
            //{
            //    MessageWindow mw;

            //    if (e.Error != null)
            //        mw = new MessageWindow("Error Loading Report", e.Error.Message);
            //    else if (e.Result.Substring(0, 6) == "Error:")
            //        mw = new MessageWindow("Error Loading Report", e.Result);
            //    else
            //        mw = new MessageWindow("Error Loading Report", "An error occurred while trying to load the report");
            //}

            viewerControl.progress.Close();
            viewerControl.progress = null;
        }
        #endregion // Load HCFA Report

        public class ICDCodes
        {
            public int? icdCode1 { get; set; }
            public int? icdCode2 { get; set; }
            public int? icdCode3 { get; set; }
            public int? icdCode4 { get; set; }
            public int? icdCode5 { get; set; }
            public int? icdCode6 { get; set; }
            public int? icdCode7 { get; set; }
            public int? icdCode8 { get; set; }
            public int? icdCode9 { get; set; }
            public int? icdCode10 { get; set; }
            public int? icdCode11 { get; set; }
            public int? icdCode12 { get; set; }
        }
    }
}

