using Socrates.Helpers;
using Socrates.UserControls;
using Socrates.Views.Messages;
using Socrates.Web.DataAccess;
using Socrates.Web.DomainLogic;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.ServiceModel.DomainServices.Client;
using System.Windows;
using System.Windows.Browser;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Media;
using Telerik.Windows.Controls;
using Telerik.Windows.Controls.GridView;


namespace Socrates.Views.Billing
{
    public partial class Payment : Page
    {
        public CustomFormattedPatient patientObj;
        //public int patientId = 0;
        int patientPaymentPatientID = 0;
        int gPatientPaymentID = 0;
        //int insurancePaymentsPatientID;
        string clickedButtonText = string.Empty;
        bool isFormValid = true;
        patient_payment gPatientPayment = null;
        patient_payment patientPaymentCurrentAdded = null;
        DomainContextLoadBatch patientPaymentControlsBatch, insuranceProviderDdlsBatch;
        PatientPaymentDomainContext patientPaymentDomainContext = new PatientPaymentDomainContext();
        InsurancePaymentDomainContext insurancePaymentDomainContext = new InsurancePaymentDomainContext();
        insurance_payment objInsurancePayment;
        int millisecond = 0;
        int addMilliSecond = 30;
        int year, month, day, hour, minute, second;
        public ObservableCollection<Payment1> payments = new ObservableCollection<Payment1>();
        public ObservableCollection<PatientCharges> charges = new ObservableCollection<PatientCharges>();

        public DomainContextLoadBatch patientAccountDetailsBatch;
        ObservableCollection<patient_status> Statuses = new ObservableCollection<patient_status>();

        FinancialCodeDomainContext financialCodeDomainContext = new FinancialCodeDomainContext();

        #region Insurance Payments Variables

        bool ipIsSaveAndProceedClicked = false;
        int selectedInsurancePaymentId = 0;
        int justAddedPaymentId = 0;

        #endregion

        CustomFormattedInsurance patientCurrentPrimaryInsuranceProviderObj;

        public class Payment1
        {
            public string payment_date;
            public string PaymentDate
            {
                get { return payment_date; }
                set { payment_date = value; }
            }
            public double amount;
            public double Amount
            {
                get { return amount; }
                set { amount = value; }
            }
            public string paid_by;
            public string PaidBy
            {
                get { return paid_by; }
                set { paid_by = value; }
            }
            public string method;
            public string Method
            {
                get { return method; }
                set { method = value; }
            }
            public double balance_available;
            public double BalanceAvailable
            {
                get { return balance_available; }
                set { balance_available = value; }
            }

            public Payment1(string _payment_Date, double _amount, string _paid_by, string _method, double _balance_available)
            {
                PaymentDate = _payment_Date;
                Amount = _amount;
                PaidBy = _paid_by;
                Method = _method;
                BalanceAvailable = _balance_available;
            }
        }

        public class PatientCharges
        {
            public string record_id;
            public string RecordId
            {
                get { return record_id; }
                set { record_id = value; }
            }


            public PatientCharges(string _record_id)
            {
                RecordId = _record_id;
            }
        }

        bool hasRequiredPatientAmount = false;
        CustomFormattedPatientAccountActivity customFormattedPatientAccountActivity;

        public Payment()
        {
            InitializeComponent();

            DdlGuarantor.IsEnabled = false;
            this.DdlPaymentMethod.ItemsSource = null;
            this.DdlPaymentMethod.ItemsSource = Helpers.HardcodedValues.Payment_Method;
            this.DdlPaymentMethod.SelectedValue = "Credit Card";
            // Insurance tab payment method drop down.
            this.DdlIPPaymentMethod.ItemsSource = Helpers.HardcodedValues.Payment_Method;

            this.DdlTypeOfPayment.ItemsSource = null;
            this.DdlTypeOfPayment.ItemsSource = Helpers.HardcodedValues.TypeOfPayment;
            this.DdlTypeOfPayment.SelectedValue = "Other/General";

            // Load Batch Operation.
            patientPaymentControlsBatch = new DomainContextLoadBatch(DataLoadComplete);
            //FillPatientGuarantor();  // The method is currently not using.
            try
            {
                patient_status All = new patient_status();
                All.description = "<< All >>";
                All.patient_status_id = 0;
                Statuses.Add(All);

                patient_status Active = new patient_status();
                Active.description = "Active";
                Active.patient_status_id = 3;
                Statuses.Add(Active);


                patient_status Archived = new patient_status();
                Archived.description = "Archived";
                Archived.patient_status_id = 4;
                Statuses.Add(Archived);


                patient_status InActive = new patient_status();
                InActive.description = "InActive";
                InActive.patient_status_id = 5;
                Statuses.Add(InActive);

                patient_status Deceased = new patient_status();
                Deceased.description = "Deceased";
                Deceased.patient_status_id = 6;
                Statuses.Add(Deceased);

                FillInsuraneProvider();
                BindPhysicians();
                RdpPaymentDate.SelectedDate = DateTime.Now;
                RdpPaymentDate.DisplayDateEnd = DateTime.Now;
                RdpIpPaymentDate.SelectedDate = DateTime.Now;
                RdpIpPaymentDate.DisplayDateEnd = DateTime.Now;
                BindPayments();
                BindPatientCharges();
                BindInsurancePaymentStatus();

                LoadAdjustmentWriteOffFinancialCode();

                if (App.global_Previous_Page == "/Billing/PatientAccount" && App.global_payments_accounts_PatientObj != null)
                {
                    LblTopUnallocatedPayentsValue.Text = LblTopAccountBalanceValue.Text = string.Empty;
                    LoadPatientDetails(App.global_payments_accounts_PatientObj);
                    CheckBillerNoteExist(App.global_payments_accounts_PatientObj.patientId);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        public System.Windows.Media.Color GetColorFromHexString(string s)
        {
            byte a = System.Convert.ToByte(s.Substring(1, 2), 16);
            byte r = System.Convert.ToByte(s.Substring(3, 2), 16);
            byte g = System.Convert.ToByte(s.Substring(5, 2), 16);
            byte b = System.Convert.ToByte(s.Substring(7, 2), 16);
            return System.Windows.Media.Color.FromArgb(a, r, g, b);
        }

        public void CheckBillerNoteExist(int patient_id)
        {
            System.ServiceModel.DomainServices.Client.InvokeOperation billersNoteExistInvokeOp = new CRADomainContext().CheckBillersNoteForPatient(patient_id);
            billersNoteExistInvokeOp.Completed += new EventHandler(billersNoteExistInvokeOp_Completed);
        }

        void billersNoteExistInvokeOp_Completed(object sender, EventArgs e)
        {

            try
            {
                InvokeOperation billersNoteExistInvokeOp = (InvokeOperation)sender;
                if (billersNoteExistInvokeOp.HasError)
                {
                    billersNoteExistInvokeOp.MarkErrorAsHandled();
                }
                else
                {
                    bool isBillerNoteExist = (bool)billersNoteExistInvokeOp.Value;
                    if (isBillerNoteExist)
                        this.BtnBillersNotes.Background = new SolidColorBrush(GetColorFromHexString("#FFFF6666"));
                    else
                        this.BtnBillersNotes.Background = new Button().Background;
                }
            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
            }
        }

        private void LoadAdjustmentWriteOffFinancialCode()
        {
            var adjTransCodeQuery = from adjTransCode in financialCodeDomainContext.GetFinancial_codeQuery()
                                    where adjTransCode.category == "Adjustment"
                                    select adjTransCode;

            LoadOperation<financial_code> loadAdjTransCodeOp = financialCodeDomainContext.Load(adjTransCodeQuery);
            loadAdjTransCodeOp.Completed += new EventHandler(loadAdjTransCodeOp_Completed);

            var writeOffTransCodeQuery = from writeOffTransCode in financialCodeDomainContext.GetFinancial_codeQuery()
                                         where writeOffTransCode.category == "Write-off"
                                         select writeOffTransCode;

            LoadOperation<financial_code> loadWriteOffTransCodeOp = financialCodeDomainContext.Load(writeOffTransCodeQuery);
            loadWriteOffTransCodeOp.Completed += new EventHandler(loadWriteOffTransCodeOp_Completed);
        }

        void loadAdjTransCodeOp_Completed(object sender, EventArgs e)
        {
            try
            {
                LoadOperation<financial_code> loadAdjTransCodeOp = (LoadOperation<financial_code>)sender;
                if (!loadAdjTransCodeOp.HasError)
                {
                    if (loadAdjTransCodeOp.Entities.Count() > 0)
                    {
                        this.DdlAdjustmentTransactionCode.ItemsSource = loadAdjTransCodeOp.Entities;
                        foreach (financial_code fc in loadAdjTransCodeOp.Entities)
                        {
                            if (fc.is_default)
                            {
                                this.DdlAdjustmentTransactionCode.SelectedItem = fc;
                                break;
                            }
                        }
                    }
                    else
                        this.DdlAdjustmentTransactionCode.ItemsSource = null;
                }
                else
                {
                    MessageBox.Show(loadAdjTransCodeOp.Error.Message);
                    loadAdjTransCodeOp.MarkErrorAsHandled();
                }
            }
            catch (Exception ex) { MessageBox.Show(ex.Message); }
        }

        void loadWriteOffTransCodeOp_Completed(object sender, EventArgs e)
        {
            try
            {
                LoadOperation<financial_code> loadWriteOffTransCodeOp = (LoadOperation<financial_code>)sender;
                if (!loadWriteOffTransCodeOp.HasError)
                {
                    if (loadWriteOffTransCodeOp.Entities.Count() > 0)
                    {
                        this.DdlWriteOffTransactionCode.ItemsSource = loadWriteOffTransCodeOp.Entities;
                        foreach (financial_code fc in loadWriteOffTransCodeOp.Entities)
                        {
                            if (fc.is_default)
                            {
                                this.DdlWriteOffTransactionCode.SelectedItem = fc;
                                break;
                            }
                        }
                    }
                    else
                        this.DdlWriteOffTransactionCode.ItemsSource = null;
                }
                else
                {
                    MessageBox.Show(loadWriteOffTransCodeOp.Error.Message);
                    loadWriteOffTransCodeOp.MarkErrorAsHandled();
                }
            }
            catch (Exception ex) { MessageBox.Show(ex.Message); }
        }

        //private void LoadAdjustmentWriteOffTransactionType()
        //{
        //    var adjTransTypeQuery = from adjTransType in financialCodeDomainContext.GetFinancial_code_typeQuery() select adjTransType;

        //    LoadOperation<financial_code_type> loadAdjTransTypeOp = financialCodeDomainContext.Load(adjTransTypeQuery);
        //    loadAdjTransTypeOp.Completed += new EventHandler(loadAdjTransTypeOp_Completed);
        //}

        //void loadAdjTransTypeOp_Completed(object sender, EventArgs e)
        //{
        //    try
        //    {
        //        LoadOperation<financial_code_type> loadAdjTransTypeOp = (LoadOperation<financial_code_type>)sender;
        //        if (!loadAdjTransTypeOp.HasError)
        //        {
        //            if (loadAdjTransTypeOp.Entities.Count() > 0)
        //            {
        //                this.DdlIPAdjTransactionType.ItemsSource = loadAdjTransTypeOp.Entities;
        //                this.DdlIPWriteOffTransactionType.ItemsSource = loadAdjTransTypeOp.Entities;

        //            }
        //            else
        //            {
        //                this.DdlIPAdjTransactionType.ItemsSource = null;
        //                this.DdlIPWriteOffTransactionType.ItemsSource = null;
        //            }
        //        }
        //        else
        //        {
        //            MessageBox.Show(loadAdjTransTypeOp.Error.Message);
        //            loadAdjTransTypeOp.MarkErrorAsHandled();
        //        }
        //    }
        //    catch (Exception ex) { MessageBox.Show(ex.Message); }
        //}

        private void BindInsurancePaymentStatus()
        {
            try
            {
                this.DdlIPStatus.ItemsSource = HardcodedValues.InsurancePaymentStatus;
                this.DdlIPStatus.SelectedIndex = 0;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        private void DataLoadComplete(DomainContextLoadBatch batch)
        {
            try
            {
                if (batch != null)
                {
                    if (batch.FailedOperationCount > 0)
                    {
                        MessageBox.Show("Load operation failed");
                        // Do Error handling
                    }
                    else
                    {
                        PaymentsBusyIndicator.IsBusy = false;
                    }
                }
            }
            catch (Exception ex) { MessageBox.Show(ex.Message); }
        }

        public void BindPatientCharges()
        {
            charges.Add(new PatientCharges("1"));
            charges.Add(new PatientCharges("2"));
            //RadGvPatientCharges.ItemsSource = charges;
            //RadGvBillTransaction.ItemsSource = charges;
            //RadGvIPPatientCharges.ItemsSource = charges;
            //RadGvIPBillTransaction.ItemsSource = charges;
        }

        private void BindPayments()
        {
            try
            {
                payments.Add(new Payment1("10/25/2011", 75, "John Smith (P)", "Cash", 75));
                payments.Add(new Payment1("10/25/2011", 75, "Carol Smith (G)", "Cash", 75));
                //RadGvPayments.ItemsSource = payments;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        private void RadTabControl1_SelectionChanged(object sender, Telerik.Windows.Controls.RadSelectionChangedEventArgs e)
        {
            if (((RadTabItem)((RadTabControl)sender).SelectedItem).Name == "RadTabPatientPayment")
            {
                this.DdlPaymentMethod.SelectedValue = "Credit Card";
                if (patientObj != null)
                {
                    gPatientPayment = null;
                    ClearPatientPaymentTabFields();
                    patientPaymentPatientID = patientObj.patientId;
                    RadGvPayments.ItemsSource = null;
                    DdlPaymentStatus.SelectedIndex = -1;
                    DdlPaymentStatus.SelectedIndex = 0;

                    PatientGuarantorDomainContext patientGuarantorDomainContext = new PatientGuarantorDomainContext();
                    var guarantorQuery = from guarantor in patientGuarantorDomainContext.GetPatientGuarantorDataQuery(patientPaymentPatientID) select guarantor;

                    LoadOperation<CustomFormattedGuarantor> loadPatientGuarantorOp = patientGuarantorDomainContext.Load(guarantorQuery);
                    loadPatientGuarantorOp.Completed += new EventHandler(loadinglPatientGuarantor_Completed);
                }

                //Clear Adjustments/write-offs tab and Insurance Payments tab  fields
                if (RadTabInsurancePayment != null)
                {
                    ClearIPControls();
                    DisplayInsertButtons();
                    ClearPatientDtlsControls();
                    BtnIPClearPaymentAllocationFields_Click(null, null);
                   // spInsurancePayments.Visibility = Visibility.Collapsed;
                    //spSearch.Visibility = Visibility.Collapsed;
                }

                if (RadTabAdjustmentWriteOffs != null)
                    ClearWriteOffControls();

            }
            else if (((RadTabItem)((RadTabControl)sender).SelectedItem).Name == "RadTabInsurancePayment")
            {
                //Clear Patient Payments tab and Adjustments/write-offs tab fields
                if (RadTabPatientPayment != null)
                    ClearPatientPaymentPatientLables();

                if (RadTabAdjustmentWriteOffs != null)
                    ClearWriteOffControls();

                if (patientObj != null)
                {
                    this.DdlIPPaymentMethod.SelectedItem = "Check";
                    if (patientCurrentPrimaryInsuranceProviderObj != null)
                        this.DdlInsuranceProvider.SelectedValue = patientCurrentPrimaryInsuranceProviderObj.insurance_provider_Id;
                    else
                        this.DdlInsuranceProvider.SelectedIndex = -1;
                }
            }
            else if (((RadTabItem)((RadTabControl)sender).SelectedItem).Name == "RadTabAdjustmentWriteOffs")
            {
                if (patientObj != null)
                {
                    gPatientPayment = null;
                    ClearPatientPaymentTabFields();
                    adjWriteOffPatientId = patientObj.patientId;
                    LoadBills();
                }

                //Clear Insurance Payments tab and Patient Payments tab fields
                if (RadTabPatientPayment != null)
                    ClearPatientPaymentPatientLables();

                if (RadTabInsurancePayment != null)
                {
                    ClearIPControls();
                    DisplayInsertButtons();
                    ClearPatientDtlsControls();
                    BtnIPClearPaymentAllocationFields_Click(null, null);
                   // spInsurancePayments.Visibility = Visibility.Collapsed;
                    //spSearch.Visibility = Visibility.Collapsed;
                }
            }
            else if (((RadTabItem)((RadTabControl)sender).SelectedItem).Name == "RadTabPaymentSearchReports")
            {

            }
        }


        #region Insurance Payment Tab.
        /// <summary>
        /// Binding Insurance provider details to Drop down.
        /// </summary>
        private void FillInsuraneProvider()
        {
            try
            {
                InsuranceProviderDomainContext insuranceProviderDomainContext = new InsuranceProviderDomainContext();
                var query = from ip in insuranceProviderDomainContext.GetCustomFormattedInsurance_providerQuery()
                            orderby ip.insurance_provider_name
                            where ip.inactive == false
                            select ip;

                System.ServiceModel.DomainServices.Client.LoadOperation<CustomFormattedInsuranceProvider> InsuranceProviderLoad = insuranceProviderDomainContext.Load(query);
                InsuranceProviderLoad.Completed += new EventHandler(loadInsProvider_Completed);
                patientPaymentControlsBatch.Add(InsuranceProviderLoad);
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        void loadInsProvider_Completed(object sender, System.EventArgs e)
        {
            try
            {
                LoadOperation<CustomFormattedInsuranceProvider> loadInsProvider = (LoadOperation<CustomFormattedInsuranceProvider>)sender;
                if (!loadInsProvider.HasError && loadInsProvider.Entities.Count() > 0)
                {
                    //DdlInsuranceProvider.ItemsSource = null;
                    //DdlInsuranceProvider.DisplayMemberPath = "insurance_provider_name";
                    //DdlInsuranceProvider.SelectedValuePath = "insurance_provider_id";
                    //DdlInsuranceProvider.ItemsSource = loadInsProvider.Entities;

                    DdlIPInsuranceProvider.DisplayMemberPath = "insurance_provider_name";
                    DdlIPInsuranceProvider.SelectedValuePath = "insurance_provider_id";
                    DdlIPInsuranceProvider.ItemsSource = loadInsProvider.Entities;
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void DdlInsuranceProvider_SelectionChanged(object sender, Telerik.Windows.Controls.SelectionChangedEventArgs e)
        {
            try
            {
                if (DdlInsuranceProvider.SelectedIndex >= 0)
                {
                    if (!string.IsNullOrEmpty(((CustomFormattedInsuranceProvider)this.DdlInsuranceProvider.SelectedItem).submitter_insurance_number))
                        TxtInsurancePayerId.Text = ((CustomFormattedInsuranceProvider)this.DdlInsuranceProvider.SelectedItem).submitter_insurance_number;
                    else
                        TxtInsurancePayerId.Text = string.Empty;
                }
                else
                {

                }
            }
            catch { }
        }

        private void TxtIpPaymentAmount_TextChanged(object sender, TextChangedEventArgs e)
        {
            try
            {
                string strCharge = TxtIpPaymentAmount.Text;
                double doub1e;
                bool isNum = double.TryParse(strCharge, out doub1e);
                if (TxtIpPaymentAmount.Text.Trim().Length > 0)
                {
                    if (!isNum)
                    {
                        this.TxtIpPaymentAmount.Text = "0";
                        SuccessWindow successWindow = new SuccessWindow("Please enter valid payment amount.");
                        successWindow.Show();
                        return;
                    }
                }
                TxtIpTotalAmount.Text = (Convert.ToDecimal(TxtIpChargeBackAmount.Text.Trim() == string.Empty ? "0" : TxtIpChargeBackAmount.Text.Trim()) + Convert.ToDecimal(TxtIpPaymentAmount.Text.Trim() == string.Empty ? "0" : TxtIpPaymentAmount.Text.Trim())).ToString();
            }
            catch (Exception ex)
            { MessageBox.Show(ex.Message); }
        }

        private void TxtIpChargeBackAmount_TextChanged(object sender, TextChangedEventArgs e)
        {
            try
            {
                string strCharge = TxtIpChargeBackAmount.Text;
                double doub1e;
                bool isNum = double.TryParse(strCharge, out doub1e);
                if (TxtIpChargeBackAmount.Text.Trim().Length > 0)
                {
                    if (!isNum)
                    {
                        this.TxtIpChargeBackAmount.Text = "0";
                        SuccessWindow successWindow = new SuccessWindow("Please enter valid charge back amount.");
                        successWindow.Show();
                        return;
                    }
                }
                TxtIpTotalAmount.Text = (Convert.ToDecimal(TxtIpChargeBackAmount.Text.Trim() == string.Empty ? "0" : TxtIpChargeBackAmount.Text.Trim()) + Convert.ToDecimal(TxtIpPaymentAmount.Text.Trim() == string.Empty ? "0" : TxtIpPaymentAmount.Text.Trim())).ToString();
            }
            catch (Exception ex)
            { MessageBox.Show(ex.Message); }
        }

        private void RdpIpPaymentDate_SelectionChanged(object sender, Telerik.Windows.Controls.SelectionChangedEventArgs e)
        {
            if (RdpIpPaymentDate.SelectedDate > DateTime.Now)
            {

                SuccessWindow sw = new SuccessWindow("Payment date should not be future date.");
                sw.Show();
                RdpIpPaymentDate.SelectedDate = DateTime.Now;
            }
        }

        # region Find Patient- Payment code enabled.
        //private void BtnIPFindPatient_Click(object sender, RoutedEventArgs e)
        //{
        //    try
        //    {
        //        UserControls.FindPatientForm searchPatient = new UserControls.FindPatientForm(this);
        //        searchPatient.DdlPatientStatus.ItemsSource = Statuses;
        //        searchPatient.DdlPatientStatus.SelectedIndex = 1;
        //        searchPatient.Show();
        //        searchPatient.BindPatientStatuses();
        //        searchPatient.Unloaded += new RoutedEventHandler(FindIPPatient_Unloaded);
        //    }
        //    catch (Exception ex)
        //    {
        //        MessageBox.Show(ex.Message);
        //    }
        //}

        //private void FindIPPatient_Unloaded(object sender, RoutedEventArgs e)
        //{
        //    try
        //    {
        //        FindPatientForm OpenFindPatientForm = (FindPatientForm)sender;
        //        LblUnallocatedPayentsValue.Text = LblAccountBalanceValue.Text = string.Empty;

        //        if (OpenFindPatientForm.RadGvEmployee.SelectedItem != null)
        //        {
        //            BtnIPAllocatePaymentToPatient.Visibility = Visibility.Visible;

        //            CustomFormattedPatient dbPatient = (CustomFormattedPatient)OpenFindPatientForm.RadGvEmployee.SelectedItem;
        //            LblPatient.Text = dbPatient.last_name.ToUpper() + ", " + dbPatient.first_name;
        //            if (dbPatient.date_of_birth.HasValue)
        //                LblDOBValue.Text = DateTime.Parse(dbPatient.date_of_birth.Value.ToString()).ToString("MM/dd/yyyy");
        //            else
        //                LblDOBValue.Text = string.Empty;

        //            if (dbPatient.ssn != null && dbPatient.ssn.Trim().Length != 0)
        //                LblSSNValue.Text = (dbPatient.ssn).Substring(0, 3) + "-" + (dbPatient.ssn).Substring(3, 2) + "-" + (dbPatient.ssn).Substring(5, 4);
        //            else
        //                LblSSNValue.Text = string.Empty;

        //            if (dbPatient.unique_number != null && dbPatient.unique_number.Trim().Length != 0)
        //                LblIPUniqueNumber.Text = dbPatient.unique_number.Trim();
        //            else
        //                LblIPUniqueNumber.Text = string.Empty;

        //            if (dbPatient.mobile_phone != null && dbPatient.mobile_phone.Trim().Length != 0)
        //                LblPhoneValue.Text = (dbPatient.mobile_phone).Substring(0, 3) + "/" + (dbPatient.mobile_phone).Substring(3, 3) + "-" + (dbPatient.mobile_phone).Substring(6, 4);
        //            else
        //                LblPhoneValue.Text = string.Empty;

        //            int patientID = dbPatient.patientId;
        //            this.LblPrimaryInsurance.Text = this.LblSecondaryInsurance.Text = this.LblTertiaryInsurance.Text = string.Empty;
        //            patientObj = dbPatient;

        //            PatientInsuranceProviderDomainContext patientInsuranceProviderDomainContext = new PatientInsuranceProviderDomainContext();
        //            var patientInsuranceQuery = from patInsurance in patientInsuranceProviderDomainContext.GetCustomFormattedInsuranceQuery(patientID) select patInsurance;

        //            LoadOperation<CustomFormattedInsurance> loadPatientInsOp = patientInsuranceProviderDomainContext.Load(patientInsuranceQuery);
        //            loadPatientInsOp.Completed += new EventHandler(loadPatientInsOp_Completed);

        //            UpdateUnallocatedAmtAndBalanceDue(patientID);
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        MessageBox.Show(ex.Message);
        //    }
        //}

        //private void UpdateUnallocatedAmtAndBalanceDue(int patientID)
        //{
        //    try
        //    {
        //        PaymentTransactionDomainContext paymentTransactionDomainContext = new PaymentTransactionDomainContext();
        //        var patAccountSummary = from patAccSum in paymentTransactionDomainContext.GetPatient_account_summaryQuery()
        //                                where patAccSum.patient_id == patientID
        //                                select patAccSum;

        //        LoadOperation<patient_account_summary> loadPatAccSumInsOp = paymentTransactionDomainContext.Load(patAccountSummary);
        //        loadPatAccSumInsOp.Completed += new EventHandler(loadPatAccSumInsOp_Completed);

        //        var patPaymentQuery = from patPaymentObj in patientPaymentDomainContext.GetPatient_paymentQuery()
        //                              where patPaymentObj.patient_id == patientID && patPaymentObj.flag_pending_allocation == true
        //                              select patPaymentObj;

        //        LoadOperation<patient_payment> loadPatPaymentOp = patientPaymentDomainContext.Load(patPaymentQuery);
        //        loadPatPaymentOp.Completed += new EventHandler(loadPatPaymentOp_Completed);
        //    }
        //    catch (Exception ex)
        //    {
        //        MessageBox.Show(ex.Message);
        //    }
        //}

        //void loadPatPaymentOp_Completed(object sender, EventArgs e)
        //{
        //    try
        //    {
        //        LoadOperation<patient_payment> loadPatPaymentOp = (LoadOperation<patient_payment>)sender;
        //        if (!loadPatPaymentOp.HasError && loadPatPaymentOp.Entities.Count() > 0)
        //        {
        //            decimal paymentAmount = 0, totalAmountApplied = 0;
        //            foreach (patient_payment item in loadPatPaymentOp.Entities)
        //            {
        //                paymentAmount += item.payment_amount;
        //                totalAmountApplied += (item.total_amount_applied_to_charges.HasValue ? item.total_amount_applied_to_charges.Value : 0);
        //            }

        //            this.LblUnallocatedPayentsValue.Text = (paymentAmount - totalAmountApplied).ToString("0.00");
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        MessageBox.Show(ex.Message);
        //    }
        //}

        //void loadPatAccSumInsOp_Completed(object sender, EventArgs e)
        //{
        //    try
        //    {
        //        LoadOperation<patient_account_summary> loadPatAccSumInsOp = (LoadOperation<patient_account_summary>)sender;
        //        if (!loadPatAccSumInsOp.HasError && loadPatAccSumInsOp.Entities.Count() > 0)
        //        {
        //            patient_account_summary patAccSummObj = loadPatAccSumInsOp.Entities.FirstOrDefault();
        //            LblAccountBalanceValue.Text = ((patAccSummObj.patient_balance_due.HasValue ? patAccSummObj.patient_balance_due.Value : 0) + (patAccSummObj.insurance_balance_due.HasValue ? patAccSummObj.insurance_balance_due.Value : 0)).ToString("0.00");
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        MessageBox.Show(ex.Message);
        //    }
        //}

        //void loadPatientInsOp_Completed(object sender, System.EventArgs e)
        //{
        //    try
        //    {
        //        LoadOperation<CustomFormattedInsurance> loadPatientInsOp = (LoadOperation<CustomFormattedInsurance>)sender;
        //        if (!loadPatientInsOp.HasError && loadPatientInsOp.Entities.Count() > 0)
        //        {
        //            foreach (CustomFormattedInsurance patientInsuranceProviderObj in loadPatientInsOp.Entities)
        //            {
        //                //patient_insurance_provider patientInsuranceProviderObj = loadOp.Entities.First();
        //                if (patientInsuranceProviderObj.order.Equals(1))
        //                {
        //                    //patientPrimaryInsuranceObject = patientInsuranceProviderObj;
        //                    if (patientInsuranceProviderObj.insurance_name != null)
        //                        this.LblPrimaryInsurance.Text = patientInsuranceProviderObj.insurance_name;
        //                    else
        //                        this.LblPrimaryInsurance.Text = string.Empty;
        //                }
        //                if (patientInsuranceProviderObj.order.Equals(2))
        //                {
        //                    if (patientInsuranceProviderObj.insurance_name != null)
        //                        this.LblSecondaryInsurance.Text = patientInsuranceProviderObj.insurance_name;
        //                    else
        //                        this.LblSecondaryInsurance.Text = string.Empty;
        //                }
        //                if (patientInsuranceProviderObj.order.Equals(3))
        //                {
        //                    if (patientInsuranceProviderObj.insurance_name != null)
        //                        this.LblTertiaryInsurance.Text = patientInsuranceProviderObj.insurance_name;
        //                    else
        //                        this.LblTertiaryInsurance.Text = string.Empty;
        //                }

        //            }
        //        }
        //    }
        //    catch (Exception ex) { MessageBox.Show(ex.Message); }
        //}

        #endregion

        private void BtnIpSaveAndProceed_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                ipIsSaveAndProceedClicked = true;
                SaveInsurancePayments();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        /// <summary>
        /// Saving insurance paments
        /// </summary>
        private void SaveInsurancePayments(bool isUpdate = false)
        {
            try
            {
                if (ValidateInsurancePaymentControls())
                {
                    string insuranceProviderCode = ((CustomFormattedInsuranceProvider)this.DdlInsuranceProvider.SelectedItem).insurance_provider_code != null ? ((CustomFormattedInsuranceProvider)this.DdlInsuranceProvider.SelectedItem).insurance_provider_code : string.Empty;
                    patientPaymentDomainContext = new PatientPaymentDomainContext();

                    if (!isUpdate)
                        objInsurancePayment = new insurance_payment();

                    objInsurancePayment.insurance_provider_id = Convert.ToInt32(this.DdlInsuranceProvider.SelectedValue.ToString());
                    objInsurancePayment.insurance_provider_code = insuranceProviderCode;
                    objInsurancePayment.payer_id = TxtInsurancePayerId.Text.Trim() == string.Empty ? null : TxtInsurancePayerId.Text.Trim();
                    objInsurancePayment.payment_date = (DateTime)RdpIpPaymentDate.SelectedDate;
                    objInsurancePayment.payment_method = DdlIPPaymentMethod.SelectionBoxItem.ToString();
                    objInsurancePayment.payment_reference = TxtIpReferenceNumber.Text;
                    objInsurancePayment.payment_amount = Convert.ToDecimal(TxtIpPaymentAmount.Text);
                    objInsurancePayment.charge_back_amount = Convert.ToDecimal(TxtIpChargeBackAmount.Text.Trim().Length > 0 ? TxtIpChargeBackAmount.Text.Trim() : "0");
                    objInsurancePayment.flag_pending_allocation = true;
                    objInsurancePayment.flag_payment_reversed = false;
                    objInsurancePayment.reversal_reason = null;

                    objInsurancePayment.date_last_updated = DateTime.Now;
                    objInsurancePayment.last_updated_by_user_id = App.global_user.user_id;

                    if (!isUpdate)
                    {
                        objInsurancePayment.date_created = DateTime.Now;
                        objInsurancePayment.created_by_user_id = App.global_user.user_id;
                        insurancePaymentDomainContext.insurance_payments.Add(objInsurancePayment);
                    }

                    SubmitOperation submitOperation = insurancePaymentDomainContext.SubmitChanges();
                    submitOperation.Completed += new EventHandler(insurancePaymentSP_Completed);
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// save completed method for saving insurance payments
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        void insurancePaymentSP_Completed(object sender, EventArgs e)
        {
            try
            {
                System.ServiceModel.DomainServices.Client.SubmitOperation op = (SubmitOperation)sender;
                if (op.HasError)
                {
                    MessageBox.Show(op.Error.Message);
                    op.MarkErrorAsHandled();
                }
                else
                {
                    SuccessWindow successWindow = null;
                    if (BtnIPSave.Visibility == System.Windows.Visibility.Visible)
                        successWindow = new SuccessWindow("Insurance payments successfully saved.");
                    else if (BtnIPUpdate.Visibility == System.Windows.Visibility.Visible)
                        successWindow = new SuccessWindow("Insurance payments successfully updated.");
                    successWindow.ShowDialog();

                    insurance_payment addedRecord = ((insurance_payment)op.ChangeSet.AddedEntities.ElementAt(0));
                    if (addedRecord != null) 
                    justAddedPaymentId = addedRecord.insurance_payment_id;

                    if (ipIsSaveAndProceedClicked && BtnIPSave.Visibility == System.Windows.Visibility.Visible)
                    {
                        insurance_payment selectedRecord = ((insurance_payment)op.ChangeSet.AddedEntities.ElementAt(0));
                        selectedInsurancePaymentId = selectedRecord.insurance_payment_id;

                        if ((selectedRecord.payment_amount + (selectedRecord.charge_back_amount.HasValue ? selectedRecord.charge_back_amount.Value : 0) - (selectedRecord.total_amount_applied_to_charges.HasValue ? selectedRecord.total_amount_applied_to_charges.Value : 0)).ToString("0.00").Length > 0 && decimal.Parse((selectedRecord.payment_amount + (selectedRecord.charge_back_amount.HasValue ? selectedRecord.charge_back_amount.Value : 0) - (selectedRecord.total_amount_applied_to_charges.HasValue ? selectedRecord.total_amount_applied_to_charges.Value : 0)).ToString("0.00")) >= 0)
                        {
                            AllocatePayment allocateInsurancePayment = new AllocatePayment(patientObj, selectedInsurancePaymentId, null, isInsurancePayment: true);
                            allocateInsurancePayment.Unloaded += new RoutedEventHandler(allocateInsurancePayment_Unloaded);
                            allocateInsurancePayment.Show();
                        }
                        else
                        {
                            InformationWindow infoWindow = new InformationWindow("This payment has no credit available. Please select another payment.");
                            infoWindow.Show();
                        }
                    }

                    if (patientObj != null)
                    {
                        this.RadInsuranceProviderCode.IsChecked = true;
                        this.RadInsuranceProviderCode_Checked(null, null);
                    }

                    ClearIPControls();
                    DisplayInsertButtons();
                    BtnIPGetPaymentAllocations_Click(null, null);

                }
            }
            catch (Exception ex)
            { MessageBox.Show(ex.Message); }
        }

        private void BtnIpClear_Click(object sender, RoutedEventArgs e)
        {
            ClearIPControls();
        }

        private void BtnIPRetrivePastPayments_Click(object sender, RoutedEventArgs e)
        {
            try
            {
              //  spInsurancePayments.Visibility = Visibility.Visible;
                //spSearch.Visibility = Visibility.Collapsed;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        void loadIPaymentOp_Completed(object sender, System.EventArgs e)
        {
            try
            {
                LoadOperation<CustomFormattedInsurancePayment> loadIPaymentOp = (LoadOperation<CustomFormattedInsurancePayment>)sender;
                if (!loadIPaymentOp.HasError && loadIPaymentOp.Entities.Count() > 0)
                {
                    RadGvInsurancePayment.ItemsSource = loadIPaymentOp.Entities;
                    this.BtnIPAllocatePayment.IsEnabled = true;
                }
                else
                {
                    RadGvInsurancePayment.ItemsSource = null;
                    this.BtnIPAllocatePayment.IsEnabled = false;
                }
            }
            catch (Exception ex)
            { MessageBox.Show(ex.Message); }
        }

        private bool ValidateInsurancePaymentControls()
        {
            isFormValid = true;

            if (TxtIpPaymentAmount.Text.Trim().Length == 0)
            {
                this.TxtIpPaymentAmount.SetValidation("The payment amount date field is required.");
                this.TxtIpPaymentAmount.RaiseValidationError();
                isFormValid = false;
            }
            else
                this.TxtIpPaymentAmount.ClearValidationError();

            //if (TxtIpChargeBackAmount.Text.Trim().Length == 0)
            //{
            //    this.TxtIpChargeBackAmount.SetValidation("The charge back amount date field is required.");
            //    this.TxtIpChargeBackAmount.RaiseValidationError();
            //    isFormValid = false;
            //}
            //else
            //    this.TxtIpChargeBackAmount.ClearValidationError();

            //if (TxtIpTotalAmount.Text.Trim().Length == 0)
            //{
            //    this.TxtIpTotalAmount.SetValidation("The total amount date field is required.");
            //    this.TxtIpTotalAmount.RaiseValidationError();
            //    isFormValid = false;
            //}
            //else
            //    this.TxtIpTotalAmount.ClearValidationError();

            string iPAmt = TxtIpPaymentAmount.Text, iCBAmt = TxtIpChargeBackAmount.Text, iTAmt = TxtIpTotalAmount.Text;
            double doub1e;
            bool iPAmt_isNum = double.TryParse(iPAmt, out doub1e);
            if (TxtIpPaymentAmount.Text.Trim().Length > 0)
            {
                if (!iPAmt_isNum)
                {
                    this.TxtIpPaymentAmount.SetValidation("Please enter valid payment amount.");
                    this.TxtIpPaymentAmount.RaiseValidationError();
                    isFormValid = false;
                }
                else
                    this.TxtIpPaymentAmount.ClearValidationError();
            }


            bool iCBAmt_isNum = double.TryParse(iCBAmt, out doub1e);
            if (TxtIpChargeBackAmount.Text.Trim().Length > 0)
            {
                if (!iCBAmt_isNum)
                {
                    this.TxtIpChargeBackAmount.SetValidation("Please enter valid charge back amount.");
                    this.TxtIpChargeBackAmount.RaiseValidationError();
                    isFormValid = false;
                }
                else
                    this.TxtIpChargeBackAmount.ClearValidationError();
            }

            bool iTAmt_isNum = double.TryParse(iTAmt, out doub1e);
            if (TxtIpTotalAmount.Text.Trim().Length > 0)
            {
                if (!iTAmt_isNum)
                {
                    this.TxtIpTotalAmount.SetValidation("Please enter valid total amount.");
                    this.TxtIpTotalAmount.RaiseValidationError();
                    isFormValid = false;
                }
                else
                    this.TxtIpTotalAmount.ClearValidationError();
            }

            if (this.RdpIpPaymentDate.SelectedDate == null)
            {
                this.RdpIpPaymentDate.SetValidation("The payment date field is required.");
                this.RdpIpPaymentDate.RaiseValidationError();
                isFormValid = false;
            }
            else
                this.RdpIpPaymentDate.ClearValidationError();

            if (this.DdlInsuranceProvider.SelectedIndex == -1)
            {
                this.DdlInsuranceProvider.SetValidation("The insurance provider field is required.");
                this.DdlInsuranceProvider.RaiseValidationError();
                isFormValid = false;
            }
            else
                this.DdlInsuranceProvider.ClearValidationError();

            if (this.DdlIPPaymentMethod.SelectedIndex == -1)
            {
                this.DdlIPPaymentMethod.SetValidation("The payment method field is required.");
                this.DdlIPPaymentMethod.RaiseValidationError();
                isFormValid = false;
            }
            else
                this.DdlIPPaymentMethod.ClearValidationError();

            return isFormValid;
        }

        private void ClearIPControls()
        {
            DdlInsuranceProvider.SelectedValue = -1;
            DdlIPPaymentMethod.SelectedValue = -1;
            TxtIpReferenceNumber.Text = string.Empty;
            RdpIpPaymentDate.SelectedDate = DateTime.Now;
            TxtIpPaymentAmount.Text = string.Empty;
            TxtIpChargeBackAmount.Text = string.Empty;
            TxtIpTotalAmount.Text = string.Empty;
            TxtInsurancePayerId.Text = string.Empty;
            this.RadInsuranceProviderCode.IsChecked = true;
        }

        /// <summary>
        /// Saving insurance payments
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void BtnIPSave_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                ipIsSaveAndProceedClicked = false;
                SaveInsurancePayments();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void BtnIPGetPaymentAllocations_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                List<int> selectedInsurances = new List<int>();
                if (this.DdlIPInsuranceProvider.SelectedIndex == -1)
                {
                    foreach (CustomFormattedInsuranceProvider item in DdlIPInsuranceProvider.Items)
                    {
                        selectedInsurances.Add(item.insurance_provider_id);
                    }
                }
                else
                    selectedInsurances.Add(int.Parse(this.DdlIPInsuranceProvider.SelectedValue.ToString()));

                insurancePaymentDomainContext = new InsurancePaymentDomainContext();
                //var query = from insPayment in insurancePaymentDomainContext.GetCustomFormattedInsurance_paymentByInsuranceProviderIdAndStatusQuery((this.DdlIPInsuranceProvider.SelectedIndex != -1 ? int.Parse(this.DdlIPInsuranceProvider.SelectedValue.ToString()) : 0), this.DdlIPStatus.SelectedValue.ToString())
                var query = from insPayment in insurancePaymentDomainContext.GetCustomFormattedInsurance_paymentByInsuranceProviderIdAndStatusQuery(selectedInsurances, this.DdlIPStatus.SelectedValue.ToString())
                            orderby insPayment.date_created descending
                            select insPayment;

                LoadOperation<CustomFormattedInsurancePayment> loadIPaymentOp = insurancePaymentDomainContext.Load(query);
                loadIPaymentOp.Completed += new EventHandler(loadIPaymentOp_Completed);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void BtnIPClearPaymentAllocationFields_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                this.DdlIPInsuranceProvider.SelectedIndex = -1;
                this.DdlIPStatus.SelectedIndex = 0;
                this.RadGvInsurancePayment.ItemsSource = null;
                this.BtnIPAllocatePayment.IsEnabled = false;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void BtnIPAllocatePayment_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                InformationWindow infoWindow;
                if (patientObj == null)
                {
                    infoWindow = new InformationWindow("Please select patient.");
                    infoWindow.Show();
                }
                else if (RadGvInsurancePayment.SelectedItem == null)
                {
                    infoWindow = new InformationWindow("Please select a payment to allocate.");
                    infoWindow.Show();
                }
                else
                {
                    CustomFormattedInsurancePayment selectedRecord = (CustomFormattedInsurancePayment)RadGvInsurancePayment.SelectedItem;
                    selectedInsurancePaymentId = selectedRecord.insurance_payment_id;

                    if ((selectedRecord.payment_amount + (selectedRecord.charge_back_amount.HasValue ? selectedRecord.charge_back_amount.Value : 0) - (selectedRecord.total_amount_applied_to_charges.HasValue ? selectedRecord.total_amount_applied_to_charges.Value : 0)).ToString("0.00").Length > 0 && decimal.Parse((selectedRecord.payment_amount + (selectedRecord.charge_back_amount.HasValue ? selectedRecord.charge_back_amount.Value : 0) - (selectedRecord.total_amount_applied_to_charges.HasValue ? selectedRecord.total_amount_applied_to_charges.Value : 0)).ToString("0.00")) >= 0)
                    {
                        AllocatePayment allocateInsurancePayment = new AllocatePayment(patientObj, selectedInsurancePaymentId, null, isInsurancePayment: true);
                        allocateInsurancePayment.Unloaded += new RoutedEventHandler(allocateInsurancePayment_Unloaded);
                        allocateInsurancePayment.Show();
                    }
                    else
                    {
                        infoWindow = new InformationWindow("This payment has no credit available. Please select another payment.");
                        infoWindow.Show();
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        #endregion

        #region Patient Payments Tab.
        private void BtnPPClearPatient_Click(object sender, RoutedEventArgs e)
        {
            ClearPatientPaymentPatientLables();
            patientPaymentPatientID = 0;
        }

        //private void BtnPPFindPatient_Click(object sender, RoutedEventArgs e)
        //{
        //    UserControls.FindPatientForm searchPatient = new UserControls.FindPatientForm(this);
        //    searchPatient.DdlPatientStatus.ItemsSource = Statuses;
        //    searchPatient.DdlPatientStatus.SelectedIndex = 1;
        //    searchPatient.Show();
        //    searchPatient.BindPatientStatuses();
        //    searchPatient.Unloaded += new RoutedEventHandler(FindPPPatient_Unloaded);
        //}

        //private void FindPPPatient_Unloaded(object sender, RoutedEventArgs e)
        //{
        //    try
        //    {
        //        FindPatientForm OpenFindPatientForm = (FindPatientForm)sender;

        //        if (OpenFindPatientForm.RadGvEmployee.SelectedItem != null)
        //        {
        //            gPatientPayment = null;
        //            ClearPatientPaymentTabFields();
        //            CustomFormattedPatient dbPatient = (CustomFormattedPatient)OpenFindPatientForm.RadGvEmployee.SelectedItem;


        //            LblPPPatientName.Text = dbPatient.last_name.ToUpper() + ", " + dbPatient.first_name;
        //            if (dbPatient.date_of_birth.HasValue)
        //                LblPPDoB.Text = DateTime.Parse(dbPatient.date_of_birth.Value.ToString()).ToString("MM/dd/yyyy");
        //            else
        //                LblPPDoB.Text = string.Empty;

        //            if (dbPatient.ssn != null && dbPatient.ssn.Trim().Length != 0)
        //                LblPPSSN.Text = (dbPatient.ssn).Substring(0, 3) + "-" + (dbPatient.ssn).Substring(3, 2) + "-" + (dbPatient.ssn).Substring(5, 4);
        //            else
        //                LblPPSSN.Text = string.Empty;

        //            if (dbPatient.unique_number != null && dbPatient.unique_number.Trim().Length != 0)
        //                LblPPUniqueNumber.Text = dbPatient.unique_number;
        //            else
        //                LblPPUniqueNumber.Text = string.Empty;

        //            if (dbPatient.mobile_phone != null && dbPatient.mobile_phone.Trim().Length != 0)
        //                LblPPCellPhone.Text = (dbPatient.mobile_phone).Substring(0, 3) + "/" + (dbPatient.mobile_phone).Substring(3, 3) + "-" + (dbPatient.mobile_phone).Substring(6, 4);
        //            else
        //                LblPPCellPhone.Text = string.Empty;

        //            patientPaymentPatientID = dbPatient.patientId;
        //            patientObj = dbPatient;
        //            RadGvPayments.ItemsSource = null;
        //            DdlPaymentStatus.SelectedIndex = -1;
        //            DdlPaymentStatus.SelectedIndex = 0;
        //            //LoadPendingAllocationData(patientPaymentPatientID);
        //            PatientGuarantorDomainContext patientGuarantorDomainContext = new PatientGuarantorDomainContext();
        //            var guarantorQuery = from guarantor in patientGuarantorDomainContext.GetPatientGuarantorDataQuery(patientPaymentPatientID) select guarantor;

        //            LoadOperation<CustomFormattedGuarantor> loadPatientGuarantorOp = patientGuarantorDomainContext.Load(guarantorQuery);
        //            loadPatientGuarantorOp.Completed += new EventHandler(loadSinglPatientGuarantor_Completed);
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        MessageBox.Show(ex.Message);
        //    }
        //}

        void loadinglPatientGuarantor_Completed(object sender, System.EventArgs e)
        {
            try
            {
                LoadOperation<CustomFormattedGuarantor> loadOp = (LoadOperation<CustomFormattedGuarantor>)sender;
                if (!loadOp.HasError && loadOp.Entities.Count() > 0)
                {
                    //RdoPaymentFromGuarantor.IsChecked = true;
                    DdlGuarantor.ItemsSource = null;
                    DdlGuarantor.SelectedValuePath = "patientGuarantorId";
                    DdlGuarantor.DisplayMemberPath = "patientGuarantorName";
                    DdlGuarantor.ItemsSource = loadOp.Entities;
                }
                else
                {
                    DdlGuarantor.ItemsSource = null;
                }
            }
            catch (Exception ex) { MessageBox.Show(ex.StackTrace); }
        }

        private void BindPhysicians()
        {
            try
            {
                PatientPaymentDomainContext patientPaymentDomainContext = new PatientPaymentDomainContext();
                var query = from u in patientPaymentDomainContext.GetCustomFormattedPhysiciansQuery()
                            select u;
                System.ServiceModel.DomainServices.Client.LoadOperation<CustomFormattedPhysiciansForPayments> userload = patientPaymentDomainContext.Load(query);
                userload.Completed += new EventHandler(userload_Completed);
                patientPaymentControlsBatch.Add(userload);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        void userload_Completed(object sender, EventArgs e)
        {
            try
            {
                System.ServiceModel.DomainServices.Client.LoadOperation<CustomFormattedPhysiciansForPayments> userload = (System.ServiceModel.DomainServices.Client.LoadOperation<CustomFormattedPhysiciansForPayments>)sender;
                if (userload.HasError)
                {
                    userload.MarkErrorAsHandled();
                    MessageBox.Show(userload.Error.Message);
                }
                if (userload.Entities.Count() > 0)
                {
                    this.DdlPhysician.Items.Clear();
                    this.DdlPhysician.SelectedValuePath = "physician_id";
                    this.DdlPhysician.ItemsSource = userload.Entities.Distinct();
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void RdoPaymentFromGuarantor_Checked(object sender, RoutedEventArgs e)
        {
            DdlGuarantor.IsEnabled = true;
        }

        private void RdoPaymentFromGuarantor_Unchecked(object sender, RoutedEventArgs e)
        {
            DdlGuarantor.IsEnabled = false;
        }

        private void FillPatientGuarantor()
        {
            PatientGuarantorDomainContext patientGuarantorDomainContext = new PatientGuarantorDomainContext();
            var query = from guarantor in patientGuarantorDomainContext.GetAllPatientGuarantorDetailsQuery() orderby guarantor.patientGuarantorName select guarantor;

            LoadOperation<CustomFormattedGuarantor> loadPatientGuarantorOp = patientGuarantorDomainContext.Load(query);
            loadPatientGuarantorOp.Completed += new EventHandler(loadPatientGuarantorOp_Completed);
            patientPaymentControlsBatch.Add(loadPatientGuarantorOp);
        }

        void loadPatientGuarantorOp_Completed(object sender, System.EventArgs e)
        {
            LoadOperation<CustomFormattedGuarantor> loadOp = (LoadOperation<CustomFormattedGuarantor>)sender;
            if (!loadOp.HasError && loadOp.Entities.Count() > 0)
            {
                DdlGuarantor.ItemsSource = null;
                DdlGuarantor.SelectedValuePath = "patientGuarantorId";
                DdlGuarantor.DisplayMemberPath = "patientGuarantorName";
                DdlGuarantor.ItemsSource = loadOp.Entities;
            }
        }

        private void LoadAllPatientPayments(int patientId)
        {
            try
            {
                patientPaymentDomainContext = new PatientPaymentDomainContext();
                var query = from pp in patientPaymentDomainContext.GetPatientPaymentCustomDataQuery(patientId)
                            orderby pp.date_created descending
                            select pp;

                LoadOperation<CustomFormattedPatientPayments> loadPatientPayments = patientPaymentDomainContext.Load(query);
                loadPatientPayments.Completed += new EventHandler(loadPatientPayments_Completed);
                //patientPaymentControlsBatch.Add(loadPatientPayments);
            }
            catch (Exception ex) { MessageBox.Show(ex.Message); }
        }

        private void LoadPendingAllocationData(int patientId)
        {
            try
            {
                patientPaymentDomainContext = new PatientPaymentDomainContext();
                var query = from pp in patientPaymentDomainContext.GetPatientPaymentCustomDataQuery(patientId)
                            where pp.flag_pending_allocation == true
                            orderby pp.date_created descending
                            select pp;

                LoadOperation<CustomFormattedPatientPayments> loadPatientPayments = patientPaymentDomainContext.Load(query);
                loadPatientPayments.Completed += new EventHandler(loadPatientPayments_Completed);
                //patientPaymentControlsBatch.Add(loadPatientPayments);
            }
            catch (Exception ex) { MessageBox.Show(ex.Message); }
        }

        void loadPatientPayments_Completed(object sender, System.EventArgs e)
        {
            try
            {
                LoadOperation<CustomFormattedPatientPayments> loadPatientPayments = (LoadOperation<CustomFormattedPatientPayments>)sender;
                if (!loadPatientPayments.HasError)
                {
                    if (loadPatientPayments.Entities.Count() > 0)
                    {
                        RadGvPayments.ItemsSource = null;
                        RadGvPayments.ItemsSource = loadPatientPayments.Entities;
                    }
                    else
                        RadGvPayments.ItemsSource = null;
                }
            }
            catch (Exception ex) { MessageBox.Show(ex.Message); }
        }

        private void BtnPPSaveing_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (validatePatientPaymentControls())
                {
                    if (patientPaymentPatientID == 0)
                    {

                        ClearPatientPaymentTabFields();
                        SuccessWindow successWindow = new SuccessWindow("Please select patient.");
                        successWindow.Show();
                        return;
                    }

                    Button clickedButton = (Button)sender;
                    clickedButtonText = clickedButton.Content.ToString();
                    patient_payment patientPayment;
                    if (gPatientPayment == null | patientPaymentDomainContext == null)
                    {
                        patientPayment = new patient_payment();
                    }
                    else
                        patientPayment = gPatientPayment;

                    if (DdlGuarantor.SelectedIndex >= 0)
                        patientPayment.patient_guarantor_id = Convert.ToInt32(DdlGuarantor.SelectedValue.ToString());
                    else
                        patientPayment.patient_guarantor_id = null;

                    if (DdlPhysician.SelectedIndex >= 0)
                        patientPayment.physician_id = Convert.ToInt32(DdlPhysician.SelectedValue.ToString());
                    else
                        patientPayment.physician_id = null;

                    patientPayment.payment_method = DdlPaymentMethod.SelectionBoxItem.ToString();
                    patientPayment.payment_reference = TxtPaymentReference.Text.Trim();

                    if (DdlTypeOfPayment.SelectedValue == "Co-Pay")
                    {
                        patientPayment.flag_co_pay = true;
                        patientPayment.flag_patient_co_insurance = false;
                        patientPayment.flag_deductible = false;
                        patientPayment.prepayment = false;
                    }
                    else if (DdlTypeOfPayment.SelectedValue == "Co-Insurance")
                    {
                        patientPayment.flag_patient_co_insurance = true;
                        patientPayment.flag_co_pay = false;
                        patientPayment.flag_deductible = false;
                        patientPayment.prepayment = false;
                    }
                    else if (DdlTypeOfPayment.SelectedValue == "Deductible")
                    {
                        patientPayment.flag_deductible = true;
                        patientPayment.flag_co_pay = false;
                        patientPayment.flag_patient_co_insurance = false;
                        patientPayment.prepayment = false;
                    }
                    else if (DdlTypeOfPayment.SelectedValue == "Prepayment")
                    {
                        patientPayment.prepayment = true;
                        patientPayment.flag_co_pay = false;
                        patientPayment.flag_patient_co_insurance = false;
                        patientPayment.flag_deductible = false;
                    }
                    else if (DdlTypeOfPayment.SelectedValue == "Other/General")
                    {
                        patientPayment.flag_co_pay = false;
                        patientPayment.flag_patient_co_insurance = false;
                        patientPayment.flag_deductible = false;
                        patientPayment.prepayment = false;
                    }

                    patientPayment.payment_amount = Convert.ToDecimal(TxtPaymentAmount.Text.Trim());
                    patientPayment.payment_date = RdpPaymentDate.SelectedDate.Value;

                    patientPayment.flag_payment_reversed = null;
                    patientPayment.reversal_reason = null;

                    if (clickedButtonText == "Save & Print Receipt")
                        patientPayment.receipt_printed_date = DateTime.Now;
                    else
                        patientPayment.receipt_printed_date = null;

                    patientPayment.payment_entry_session_id = null;
                    patientPayment.total_amount_applied_to_charges = 0;

                    patientPayment.flag_pending_allocation = true;

                    if (patientPayment.patient_payment_id == 0)
                    {
                        patientPayment.patient_id = patientPaymentPatientID;
                        patientPayment.date_created = DateTime.Now;
                        patientPayment.created_by_user_id = App.global_user.user_id;
                    }
                    patientPayment.date_last_updated = DateTime.Now;
                    patientPayment.last_updated_by_user_id = App.global_user.user_id;
                    if (patientPayment.patient_payment_id == 0)
                        patientPaymentDomainContext.patient_payments.Add(patientPayment);

                    System.ServiceModel.DomainServices.Client.SubmitOperation pPSubmitOp = patientPaymentDomainContext.SubmitChanges();
                    pPSubmitOp.Completed += new EventHandler(pPSubmitOp_Completed);
                }
            }
            catch (Exception ex) { MessageBox.Show(ex.Message); }
        }

        void pPSubmitOp_Completed(object sender, System.EventArgs e)
        {
            try
            {
                System.ServiceModel.DomainServices.Client.SubmitOperation op = (SubmitOperation)sender;

                if (op.HasError)
                {
                    op.MarkErrorAsHandled();
                    MessageBox.Show(op.Error.Message);
                }
                else
                {
                    patientPaymentCurrentAdded = op.ChangeSet.AddedEntities.OfType<patient_payment>().FirstOrDefault();
                    if (patientPaymentCurrentAdded != null)
                    this.justAddedPaymentId = patientPaymentCurrentAdded.patient_payment_id;
                    if (clickedButtonText == "Save & Print Receipt")
                    {
                        GetCurrntUserName();
                    }
                    else
                        if (clickedButtonText == "Save & Allocate Payment")
                        {
                            //BtnAllocatePayments_Click(null, null);
                            int curretnRecord;
                            if (patientPaymentCurrentAdded != null)
                                curretnRecord = patientPaymentCurrentAdded.patient_payment_id;
                            else
                                curretnRecord = gPatientPaymentID;

                            AllocatePayment allocatePayment = new AllocatePayment(patientObj, curretnRecord, null);
                            allocatePayment.Closed += new EventHandler(allocatePayment_Closed);
                            allocatePayment.Show();
                        }
                        else
                        {
                            SuccessWindow successWindow = new SuccessWindow("Patient payments successfully saved.");
                            successWindow.ShowDialog();
                        }
                    ClearPatientPaymentTabFields();
                    if (((ComboBoxItem)DdlPaymentStatus.SelectedValue).Content.ToString() == "All patient payments")
                        LoadAllPatientPayments(patientPaymentPatientID);
                    else
                        LoadPendingAllocationData(patientPaymentPatientID);

                    gPatientPayment = null;
                    UpdateTopUnallocatedAmtAndBalanceDue(patientPaymentPatientID);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void GetCurrntUserName()
        {
            UserDomainContext userDomainContext = new UserDomainContext();
            var query = from users in userDomainContext.GetUsersQuery()
                        where users.user_id == App.global_user.user_id
                        select users;
            LoadOperation<user> loadUserOp = userDomainContext.Load(query);
            loadUserOp.Completed += new EventHandler(LoadUserOP_Completed);
        }

        void LoadUserOP_Completed(object sender, EventArgs e)
        {
            LoadOperation<user> loadUserOP = (LoadOperation<user>)sender;
            string curretnRecord = string.Empty;
            if (!loadUserOP.HasError)
            {
                if (loadUserOP.Entities.Count() > 0)
                {
                    user usr = loadUserOP.Entities.FirstOrDefault();
                    string currentUserName = usr.last_name + " " + usr.first_name;
                    if (patientPaymentCurrentAdded != null)
                        curretnRecord = patientPaymentCurrentAdded.patient_payment_id.ToString();
                    else
                        curretnRecord = gPatientPaymentID.ToString();

                    HtmlPage.Window.Navigate(new Uri(HtmlPage.Document.DocumentUri.Scheme + "://" + HtmlPage.Document.DocumentUri.Host + HtmlPage.Document.DocumentUri.AbsolutePath.ToLower().Replace("default.aspx", string.Empty) + "PDFPatientPayment.aspx?cUName=" + currentUserName + "&cpp=" + curretnRecord + ""), "_blank");
                }
            }
        }

        private void ClearPatientPaymentTabFields()
        {
            this.DdlTypeOfPayment.SelectedValue = "Other/General";
            RdoPaymentFromPatient.IsChecked = true;
            DdlGuarantor.SelectedIndex = -1;
            TxtPaymentAmount.Text = string.Empty;
            RdpPaymentDate.SelectedDate = DateTime.Now;
            TxtPaymentReference.Text = string.Empty;
            this.DdlPaymentMethod.ItemsSource = Helpers.HardcodedValues.Payment_Method;
            this.DdlPaymentMethod.SelectedValue = "Credit Card";
            DdlPhysician.SelectedIndex = -1;
        }

        private void ClearPatientPaymentPatientLables()
        {
            //LblPPPatientName.Text = string.Empty;
            //LblPPSSN.Text = string.Empty;
            //LblPPUniqueNumber.Text = string.Empty;
            //LblPPDoB.Text = string.Empty;
            //LblPPCellPhone.Text = string.Empty;
            RadGvPayments.ItemsSource = null;
            ClearPatientPaymentTabFields();
            DdlGuarantor.ItemsSource = null;
        }

        private bool validatePatientPaymentControls()
        {
            isFormValid = true;

            string Str1 = TxtPaymentAmount.Text;
            double doub1e;
            bool isNum = double.TryParse(Str1, out doub1e);

            if (this.TxtPaymentAmount.Text.Trim().Length > 0)
            {
                if (!isNum)
                {
                    this.TxtPaymentAmount.SetValidation("Please enter valid payment amount.");
                    this.TxtPaymentAmount.RaiseValidationError();
                    isFormValid = false;
                }
            }
            else
                if (this.TxtPaymentAmount.Text.Trim().Length == 0)
                {
                    this.TxtPaymentAmount.SetValidation("The payment amount field is required.");
                    this.TxtPaymentAmount.RaiseValidationError();
                    isFormValid = false;
                }
                else
                    this.TxtPaymentAmount.ClearValidationError();

            if (this.RdpPaymentDate.SelectedDate == null)
            {
                this.RdpPaymentDate.SetValidation("The payment date field is required.");
                this.RdpPaymentDate.RaiseValidationError();
                isFormValid = false;
            }
            else
                this.RdpPaymentDate.ClearValidationError();

            if (this.DdlPaymentMethod.SelectedIndex == -1)
            {
                this.DdlPaymentMethod.SetValidation("The payment method field is required.");
                this.DdlPaymentMethod.RaiseValidationError();
                isFormValid = false;
            }
            else
                this.DdlPaymentMethod.ClearValidationError();

            return isFormValid;
        }

        private void DdlPaymentStatus_SelectionChanged(object sender, System.Windows.Controls.SelectionChangedEventArgs e)
        {
            ClearPatientPaymentTabFields();
            if (DdlPaymentStatus.SelectedIndex == 0)
                LoadPendingAllocationData(patientPaymentPatientID);
            else
                if (DdlPaymentStatus.SelectedIndex == 1)
                    LoadAllPatientPayments(patientPaymentPatientID);
        }

        private void RadGvPayments_RowActivated(object sender, Telerik.Windows.Controls.GridView.RowEventArgs e)
        {

            CustomFormattedPatientPayments patientPayments = (CustomFormattedPatientPayments)(e.Row.DataContext);
            var query = from pp in patientPaymentDomainContext.GetPatient_paymentQuery()
                        where pp.patient_payment_id == patientPayments.patientPaymentId
                        select pp;
            LoadOperation<patient_payment> loadPPOp = patientPaymentDomainContext.Load(query);
            loadPPOp.Completed += new EventHandler(loadPPOp_Completed);
        }

        void loadPPOp_Completed(object sender, System.EventArgs e)
        {

            LoadOperation<patient_payment> loadPPOp = (LoadOperation<patient_payment>)sender;
            if (!loadPPOp.HasError && loadPPOp.Entities.Count() > 0)
            {
                gPatientPayment = loadPPOp.Entities.FirstOrDefault();
                gPatientPaymentID = gPatientPayment.patient_payment_id;

                if (gPatientPayment.flag_co_pay.HasValue ? gPatientPayment.flag_co_pay.Value : false)
                    DdlTypeOfPayment.SelectedValue = "Co-Pay";
                else if (gPatientPayment.flag_patient_co_insurance.HasValue ? gPatientPayment.flag_patient_co_insurance.Value : false)
                    DdlTypeOfPayment.SelectedValue = "Co-Insurance";
                else if (gPatientPayment.flag_deductible.HasValue ? gPatientPayment.flag_deductible.Value : false)
                    DdlTypeOfPayment.SelectedValue = "Deductible";
                else if (gPatientPayment.prepayment.HasValue ? gPatientPayment.prepayment.Value : false)
                    DdlTypeOfPayment.SelectedValue = "Prepayment";
                else
                    DdlTypeOfPayment.SelectedValue = "Other/General";

                if (gPatientPayment.patient_guarantor_id != null)
                    DdlGuarantor.SelectedValue = gPatientPayment.patient_guarantor_id;
                else
                    DdlGuarantor.SelectedValue = -1;

                if (gPatientPayment.physician_id != null)
                    DdlPhysician.SelectedValue = gPatientPayment.physician_id;
                else
                    DdlPhysician.SelectedValue = -1;

                TxtPaymentAmount.Text = String.Format("{0:c}", gPatientPayment.payment_amount).Substring(1);
                RdpPaymentDate.SelectedDate = gPatientPayment.payment_date;
                DdlPaymentMethod.SelectedValue = gPatientPayment.payment_method;
                if (gPatientPayment.payment_reference != null)
                    TxtPaymentReference.Text = gPatientPayment.payment_reference;
                else
                    TxtPaymentReference.Text = string.Empty;
                RdoPaymentFromPatient.IsChecked = true;
            }
        }

        private void BtnAllocatePayments_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (App.global_Auto_Allocate)
                {
                    InvokeOperation invokePatientPaymentCheckOp = patientPaymentDomainContext.CheckPatientPaymentUnallocated(((CustomFormattedPatientPayments)RadGvPayments.SelectedItem).patientPaymentId);
                    invokePatientPaymentCheckOp.Completed += new EventHandler(invokePatientPaymentCheckOp_Completed);
                }
                else
                {
                    ShowPatientPaymentAllocatePopup();
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public void ShowPatientPaymentAllocatePopup()
        {
            try
            {
                InformationWindow infoWindow;
                if (patientObj == null)
                {
                    infoWindow = new InformationWindow("Please select patient.");
                    infoWindow.Show();
                }
                else if (RadGvPayments.SelectedItem == null)
                {
                    infoWindow = new InformationWindow("Please select a payment to allocate.");
                    infoWindow.Show();
                }
                else
                {
                    if (((CustomFormattedPatientPayments)RadGvPayments.SelectedItem).BalanceAvailable > 0)
                    {
                        AllocatePayment allocatePayment = new AllocatePayment(patientObj, ((CustomFormattedPatientPayments)RadGvPayments.SelectedItem).patientPaymentId, null);
                        allocatePayment.Closed += new EventHandler(allocatePayment_Closed);
                        allocatePayment.Show();
                    }
                    else
                    {
                        infoWindow = new InformationWindow("This payment has no credit available. Please select another payment.");
                        infoWindow.Show();
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        void invokePatientPaymentCheckOp_Completed(object sender, EventArgs e)
        {
            try
            {
                InvokeOperation invokePatientPaymentCheckOp = (InvokeOperation)sender;
                if (!invokePatientPaymentCheckOp.HasError)
                {
                    if (invokePatientPaymentCheckOp.Value != null)
                    {
                        if ((bool)invokePatientPaymentCheckOp.Value == true)
                        {
                            UnallocatedPatientPaymentAlert ppCheck = new UnallocatedPatientPaymentAlert(((CustomFormattedPatientPayments)RadGvPayments.SelectedItem).appointmentId.Value);
                            ppCheck.Show();
                            ppCheck.Closed += new EventHandler(ppCheck_Closed);
                        }
                        else
                        {
                            ShowPatientPaymentAllocatePopup();
                        }
                    }
                }
                else
                {
                    invokePatientPaymentCheckOp.MarkErrorAsHandled();
                    MessageBox.Show(invokePatientPaymentCheckOp.Error.Message);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        void ppCheck_Closed(object sender, EventArgs e)
        {
            try
            {
                if (((UnallocatedPatientPaymentAlert)sender).DialogResult == true)
                {
                    //update patient payments record
                    InvokeOperation invokePatientPaymentUpdateOp = patientPaymentDomainContext.UpdateUnallocatedPatientPayment(((CustomFormattedPatientPayments)RadGvPayments.SelectedItem).patientPaymentId);
                    invokePatientPaymentUpdateOp.Completed += new EventHandler(invokePatientPaymentUpdateOp_Completed);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        void invokePatientPaymentUpdateOp_Completed(object sender, EventArgs e)
        {
            try
            {
                InvokeOperation invokePatientPaymentUpdateOp = (InvokeOperation)sender;
                if (!invokePatientPaymentUpdateOp.HasError)
                {
                    if (invokePatientPaymentUpdateOp.Value != null)
                    {
                        if ((bool)invokePatientPaymentUpdateOp.Value == true)
                        {
                            if (((ComboBoxItem)DdlPaymentStatus.SelectedValue).Content.ToString() == "All patient payments")
                                LoadAllPatientPayments(patientPaymentPatientID);
                            else
                                LoadPendingAllocationData(patientPaymentPatientID);

                            ShowPatientPaymentAllocatePopup();
                        }
                    }
                }
                else
                {
                    invokePatientPaymentUpdateOp.MarkErrorAsHandled();
                    MessageBox.Show(invokePatientPaymentUpdateOp.Error.Message);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void allocatePayment_Closed(object sender, EventArgs e)
        {
            try
            {
                if (((AllocatePayment)sender).DialogResult == true)
                {
                    LoadPendingAllocationData(patientPaymentPatientID);

                    //reload patient data
                    UpdateTopUnallocatedAmtAndBalanceDue(patientObj.patientId);

                    SuccessWindow successWindow = new SuccessWindow("Payments allocated successfully.");
                    successWindow.ShowDialog();
                }

            }
            catch (Exception ex) { throw ex; }
        }

        private void RdpPaymentDate_SelectionChanged(object sender, Telerik.Windows.Controls.SelectionChangedEventArgs e)
        {
            if (RdpPaymentDate.SelectedDate > DateTime.Now)
            {

                SuccessWindow successWindow = new SuccessWindow("Payment date should not be future date.");
                successWindow.Show();
                RdpPaymentDate.SelectedDate = DateTime.Now;
            }
        }

        #endregion

        private void RdpPaymentDate_KeyUp(object sender, KeyEventArgs e)
        {

            try
            {

                RadDatePicker dpDatePicker = (RadDatePicker)sender;
                int DateLength = dpDatePicker.CurrentDateTimeText.Trim().Length;

                if (dpDatePicker.CurrentDateTimeText.Trim().Contains("/") == false)
                {
                    switch (DateLength)
                    {
                        case 8:
                            this.Focus();
                            dpDatePicker.Focus();
                            break;
                    }
                }
                else
                {
                    switch (DateLength)
                    {
                        case 10:
                            this.Focus();
                            dpDatePicker.Focus();
                            break;
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RdpPaymentDate_ParseDateTimeValue(object sender, Telerik.Windows.Controls.ParseDateTimeEventArgs args)
        {
            if (!args.IsParsingSuccessful) //ie: Can't parse the date the user has entered
            {
                DateTime time;

                if (CommonMethods.TryParseNumberAsDate(args.TextToParse, out time))
                {
                    args.Result = time;

                    args.IsParsingSuccessful = true;
                }
                else
                {
                    RadDatePicker dpDatePicker = (RadDatePicker)sender;
                    dpDatePicker.CurrentDateTimeText = null;
                    dpDatePicker.DateTimeText = "";
                    dpDatePicker.DateTimeWatermarkContent = "";
                    //dpDatePicker.SelectedDate = null;
                }
            }
        }

        private void LnkEditInsurancePayment_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                HyperlinkButton lnkEditInsurancePayment = (HyperlinkButton)(sender);
                CustomFormattedInsurancePayment insurancePaymentObj = ((CustomFormattedInsurancePayment)lnkEditInsurancePayment.DataContext);

                if (insurancePaymentObj.total_amount_applied_to_charges == 0)
                {
                    var query = from insPayment in insurancePaymentDomainContext.GetInsurance_paymentQuery()
                                where insPayment.insurance_payment_id == insurancePaymentObj.insurance_payment_id
                                select insPayment;

                    LoadOperation<insurance_payment> loadInsPayOp = insurancePaymentDomainContext.Load(query);
                    loadInsPayOp.Completed += new EventHandler(loadInsPayOp_Completed);
                }
                else
                {
                    InformationWindow informationWindow = new InformationWindow("Cannot edit this insurance payment as it has been applied to one or more charges.");
                    informationWindow.Show();
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void LnkNoteInsurancePayment_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                HyperlinkButton lnkEditInsurancePayment = (HyperlinkButton)(sender);
                CustomFormattedInsurancePayment insurancePaymentObj = ((CustomFormattedInsurancePayment)lnkEditInsurancePayment.DataContext);


                AddEditBillersNote billersNote = new AddEditBillersNote(this.patientObj, "Insurance Payment", insurancePaymentObj.insurance_payment_id);

                billersNote.Closed += new EventHandler(billersNote_Closed);
                billersNote.Show();

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        void loadInsPayOp_Completed(object sender, EventArgs e)
        {
            try
            {
                LoadOperation<insurance_payment> loadInsPayOp = (LoadOperation<insurance_payment>)sender;
                if (!loadInsPayOp.HasError)
                {
                    if (loadInsPayOp.Entities.Count() > 0)
                    {
                        objInsurancePayment = loadInsPayOp.Entities.FirstOrDefault();
                        selectedInsurancePaymentId = objInsurancePayment.insurance_payment_id;

                        InsuranceProviderDomainContext insuranceProviderDomainContext = new InsuranceProviderDomainContext();
                        var query = from ip in insuranceProviderDomainContext.GetCustomFormattedInsurance_providerByCodeQuery()
                                    orderby ip.insurance_provider_name
                                    where ip.inactive == false
                                    select ip;

                        System.ServiceModel.DomainServices.Client.LoadOperation<CustomFormattedInsuranceProvider> getAllActiveInsuranceProvidersByCodeLoad = insuranceProviderDomainContext.Load(query);
                        getAllActiveInsuranceProvidersByCodeLoad.Completed += new EventHandler(getAllActiveInsuranceProvidersByCodeLoad_Completed);
                    }
                }
                else
                {
                    loadInsPayOp.MarkErrorAsHandled();
                    MessageBox.Show(loadInsPayOp.Error.ToString());
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        void getAllActiveInsuranceProvidersByCodeLoad_Completed(object sender, EventArgs e)
        {
            try
            {
                LoadOperation<CustomFormattedInsuranceProvider> getAllActiveInsuranceProvidersByCodeLoad = (LoadOperation<CustomFormattedInsuranceProvider>)sender;
                if (!getAllActiveInsuranceProvidersByCodeLoad.HasError && getAllActiveInsuranceProvidersByCodeLoad.Entities.Count() > 0)
                {
                    DdlInsuranceProvider.ItemsSource = null;
                    DdlInsuranceProvider.ItemsSource = getAllActiveInsuranceProvidersByCodeLoad.Entities;

                    this.TxtIpPaymentAmount.Text = objInsurancePayment.payment_amount.ToString("0.00");
                    this.TxtIpChargeBackAmount.Text = (objInsurancePayment.charge_back_amount.HasValue ? objInsurancePayment.charge_back_amount.Value.ToString("0.00") : "0");
                    this.TxtIpReferenceNumber.Text = objInsurancePayment.payment_reference;
                    this.TxtIpTotalAmount.Text = (objInsurancePayment.payment_amount + (objInsurancePayment.charge_back_amount.HasValue ? objInsurancePayment.charge_back_amount.Value : 0)).ToString("0.00");
                    this.DdlInsuranceProvider.SelectedValue = objInsurancePayment.insurance_provider_id;
                    this.DdlIPPaymentMethod.SelectedValue = objInsurancePayment.payment_method;
                    this.RdpIpPaymentDate.SelectedDate = objInsurancePayment.payment_date;

                    this.LblIPAmountAvailableValue.Text = (objInsurancePayment.payment_amount + (objInsurancePayment.charge_back_amount.HasValue ? objInsurancePayment.charge_back_amount.Value : 0) - (objInsurancePayment.total_amount_applied_to_charges.HasValue ? objInsurancePayment.total_amount_applied_to_charges.Value : 0)).ToString("0.00");
                    this.LblIPAmountAppliedValue.Text = (objInsurancePayment.total_amount_applied_to_charges.HasValue ? objInsurancePayment.total_amount_applied_to_charges.Value : 0).ToString("0.00");

                    DisplayUpdateButtons();
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        public void DisplayUpdateButtons()
        {
            try
            {
             //   BtnIPRetrivePastPayments.Visibility = System.Windows.Visibility.Collapsed;
                BtnIPSave.Visibility = System.Windows.Visibility.Collapsed;
                BtnIPSaveAndProceed.Visibility = System.Windows.Visibility.Collapsed;
                BtnIPClear.Visibility = System.Windows.Visibility.Collapsed;

                BtnIPUpdate.Visibility = System.Windows.Visibility.Visible;
                BtnIPUpdateCancel.Visibility = System.Windows.Visibility.Visible;

                this.LblIPAmountApplied.Visibility = System.Windows.Visibility.Visible;
                this.LblIPAmountAppliedValue.Visibility = System.Windows.Visibility.Visible;
                this.LblIPAmountAvailable.Visibility = System.Windows.Visibility.Visible;
                this.LblIPAmountAvailableValue.Visibility = System.Windows.Visibility.Visible;

                this.BtnIPAllocateCancel.Visibility = System.Windows.Visibility.Collapsed;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public void DisplayInsertButtons()
        {
            try
            {
                selectedInsurancePaymentId = 0;
                BtnIPUpdate.Visibility = System.Windows.Visibility.Collapsed;
                BtnIPUpdateCancel.Visibility = System.Windows.Visibility.Collapsed;

               // BtnIPRetrivePastPayments.Visibility = System.Windows.Visibility.Visible;
                BtnIPSave.Visibility = System.Windows.Visibility.Visible;
                BtnIPSaveAndProceed.Visibility = System.Windows.Visibility.Visible;
                BtnIPClear.Visibility = System.Windows.Visibility.Visible;

                this.LblIPAmountApplied.Visibility = System.Windows.Visibility.Collapsed;
                this.LblIPAmountAppliedValue.Visibility = System.Windows.Visibility.Collapsed;
                this.LblIPAmountAvailable.Visibility = System.Windows.Visibility.Collapsed;
                this.LblIPAmountAvailableValue.Visibility = System.Windows.Visibility.Collapsed;

                this.BtnIPAllocateCancel.Visibility = System.Windows.Visibility.Collapsed;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        private void BtnIPUpdate_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                SaveInsurancePayments(true);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void BtnIPUpdateCancel_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (patientObj != null)
                {
                    this.RadInsuranceProviderCode.IsChecked = true;
                    this.RadInsuranceProviderCode_Checked(null, null);
                }

                ClearIPControls();
                DisplayInsertButtons();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void BtnIPAllocatePaymentToPatient_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                //CustomFormattedInsurancePayment selectedRecord = (CustomFormattedInsurancePayment)RadGvInsurancePayment.SelectedItem;
                InformationWindow infoWindow = null;
                if (LblIPAmountAvailableValue.Text.Trim().Length > 0 && decimal.Parse(LblIPAmountAvailableValue.Text.Trim()) > 0)
                {
                    AllocatePayment allocateInsurancePayment = new AllocatePayment(patientObj, selectedInsurancePaymentId, null, true);
                    allocateInsurancePayment.Unloaded += new RoutedEventHandler(allocateInsurancePayment_Unloaded);
                    allocateInsurancePayment.Show();
                }
                else
                {
                    infoWindow = new InformationWindow("This payment has no credit available. Please select another payment.");
                    infoWindow.Show();
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        void allocateInsurancePayment_Unloaded(object sender, RoutedEventArgs e)
        {
            try
            {
                if (((AllocatePayment)sender).DialogResult == true)
                {
                    //reload insurance details
                    var query = from insPayment in insurancePaymentDomainContext.GetInsurance_paymentQuery()
                                where insPayment.insurance_payment_id == selectedInsurancePaymentId
                                select insPayment;

                    LoadOperation<insurance_payment> loadUpdateAmountDtlsOp = insurancePaymentDomainContext.Load(query);
                    loadUpdateAmountDtlsOp.Completed += new EventHandler(loadUpdateAmountDtlsOp_Completed);

                    //reload patient data
                    UpdateTopUnallocatedAmtAndBalanceDue(patientObj.patientId);

                    BtnIPGetPaymentAllocations_Click(null, null);

                    decimal unallocatedPatientPayments = 0;
                    if (this.LblTopUnallocatedPayentsValue.Text.Trim().Length > 0)
                        unallocatedPatientPayments = decimal.Parse(this.LblTopUnallocatedPayentsValue.Text);

                    if (unallocatedPatientPayments > 0)
                    {
                        //notify the user that they have unallocated payments and if they would like to allocate them now.
                        ConfirmationWindow confirmationWindow = new ConfirmationWindow();
                        confirmationWindow.Header = "Information";
                        confirmationWindow.TxtDeleteRecord.Text = "Payments allocated successfully.\r\nThere are unallocated payments for this patient. Do you wish to allocate them now?";
                        confirmationWindow.ShowDialog();
                        confirmationWindow.Closed += new EventHandler<WindowClosedEventArgs>(confirmationWindow_Closed);
                    }
                    else
                    {
                        SuccessWindow successWindow = new SuccessWindow("Payments allocated successfully.");
                        successWindow.ShowDialog();
                    }
                }
            }
            catch (Exception ex) { throw ex; }
        }

        void confirmationWindow_Closed(object sender, WindowClosedEventArgs e)
        {
            try
            {
                ConfirmationWindow confirmationWindow = ((ConfirmationWindow)sender);
                if (confirmationWindow.DialogResult == true)
                {
                    AllocatePayment allocatePayment = new AllocatePayment(patientObj, null, null);
                    allocatePayment.Closed += new EventHandler(allocatePayment_Closed);
                    allocatePayment.Show();
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        void loadUpdateAmountDtlsOp_Completed(object sender, EventArgs e)
        {
            try
            {
                LoadOperation<insurance_payment> loadUpdateAmountDtlsOp = (LoadOperation<insurance_payment>)sender;
                if (!loadUpdateAmountDtlsOp.HasError)
                {
                    if (loadUpdateAmountDtlsOp.Entities.Count() > 0)
                    {
                        insurance_payment updateInsurancePaymentRecord = loadUpdateAmountDtlsOp.Entities.FirstOrDefault();
                        this.LblIPAmountAvailableValue.Text = (updateInsurancePaymentRecord.payment_amount + (updateInsurancePaymentRecord.charge_back_amount.HasValue ? updateInsurancePaymentRecord.charge_back_amount.Value : 0) - (updateInsurancePaymentRecord.total_amount_applied_to_charges.HasValue ? updateInsurancePaymentRecord.total_amount_applied_to_charges.Value : 0)).ToString("0.00");
                        this.LblIPAmountAppliedValue.Text = (updateInsurancePaymentRecord.total_amount_applied_to_charges.HasValue ? updateInsurancePaymentRecord.total_amount_applied_to_charges.Value : 0).ToString("0.00");
                    }
                }
                else
                {
                    loadUpdateAmountDtlsOp.MarkErrorAsHandled();
                    MessageBox.Show(loadUpdateAmountDtlsOp.Error.ToString());
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void BtnIPAllocateCancel_Click(object sender, RoutedEventArgs e)
        {
            ClearIPControls();
            DisplayInsertButtons();
           // spInsurancePayments.Visibility = System.Windows.Visibility.Visible;
            //spSearch.Visibility = Visibility.Collapsed;

            ClearPatientDtlsControls();
        }

        private void ClearPatientDtlsControls()
        {
            //LblPatient.Text = string.Empty;
            //LblSSNValue.Text = string.Empty;
            //LblIPUniqueNumber.Text = string.Empty;
            //LblDOBValue.Text = string.Empty;
            //LblPhoneValue.Text = string.Empty;
            //LblPrimaryInsurance.Text = string.Empty;
            //LblSecondaryInsurance.Text = string.Empty;
            //LblTertiaryInsurance.Text = string.Empty;
            //LblAccountBalanceValue.Text = string.Empty;
            //LblUnallocatedPayentsValue.Text = string.Empty;
            //BtnIPAllocatePaymentToPatient.Visibility = System.Windows.Visibility.Collapsed;
        }

        #region Adjustment/Write-Off

        int adjWriteOffPatientId = 0;
        DateTime outStandingDate = DateTime.Now;
        RadGridView RadGvBillTransactions;

        PostBillingDomainContext postBillingDomainContext = new PostBillingDomainContext();
        List<bill_header> lstBillHeader;
        List<superbill> lstSuperbill;
        List<bill_transaction> lstBillTransaction;
        DomainContextLoadBatch allocatePaymentControlsBatch;
        ObservableCollection<CustomFormattedAdjWriteOffBillItems> obsCollectionCustomFormattedAdjWriteOffBillItems = new ObservableCollection<CustomFormattedAdjWriteOffBillItems>();
        public PaymentTransactionDomainContext paymentTransactionDomainContext = new PaymentTransactionDomainContext();
        patient_account_summary objPatientAccountSummary;

        private void ClearWriteOffControls()
        {
            //LblWOPatientName.Text = string.Empty;
            //LblWOSSN.Text = string.Empty;
            //LblWODoB.Text = string.Empty;
            //LblWOUniqueNumber.Text = string.Empty;
            //LblWOCellPhone.Text = string.Empty;
            RadGvBills.ItemsSource = null;
            adjWriteOffPatientId = 0;
            outStandingDate = DateTime.Now;
            TxtWOOutstandingDays.Text = string.Empty;
            obsCollectionCustomFormattedAdjWriteOffBillItems = new ObservableCollection<CustomFormattedAdjWriteOffBillItems>();
        }

        private void RadGvBillTransactionGrid_Loaded(object sender, RoutedEventArgs e)
        {
            try
            {
                if (this.RadGvBills.IsEnabled)
                {
                    RadGridView gv = (RadGridView)sender;
                    CustomFormattedAdjWriteOffBillEdit billHeaderRow = gv.ParentOfType<GridViewRow>().DataContext as CustomFormattedAdjWriteOffBillEdit;

                    LoadBillTransactions(billHeaderRow.bill_header_id);

                    if (gv.ItemsSource == null)
                    {
                        gv.IsBusy = true;
                        RadGvBills.IsEnabled = false;
                    }

                    if (gv.Name.Equals("RadGvBillTransactionGrid"))
                    {
                        this.RadGvBillTransactions = gv;
                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        private void LoadBillTransactions(int billHeaderId)
        {
            try
            {
                InvokeOperation invokeBillTransOp = patientPaymentDomainContext.GetPatientCustomFormattedAdjWriteOffBillItems(billHeaderId);
                invokeBillTransOp.Completed += new EventHandler(invokeBillTransOp_Completed);
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        void invokeBillTransOp_Completed(object sender, EventArgs e)
        {
            try
            {
                RadGvBills.IsEnabled = true;

                InvokeOperation invokeBillTransOp = (InvokeOperation)sender;
                if (!invokeBillTransOp.HasError)
                {
                    if (invokeBillTransOp.Value != null)
                    {
                        IEnumerable<CustomFormattedAdjWriteOffBillItems> lstBillTransactions = (IEnumerable<CustomFormattedAdjWriteOffBillItems>)invokeBillTransOp.Value;
                        RadGvBillTransactions.ItemsSource = lstBillTransactions;
                        this.RadGvBillTransactions.IsBusy = false;
                    }
                }
                else
                {
                    invokeBillTransOp.MarkErrorAsHandled();
                    MessageBox.Show(invokeBillTransOp.Error.Message);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
                this.RadGvBillTransactions.IsBusy = false;
            }
        }

        private void RadGvBillTransactionGrid_CellEditEnded(object sender, Telerik.Windows.Controls.GridViewCellEditEndedEventArgs e)
        {
            try
            {
                CustomFormattedAdjWriteOffBillItems customFormattedBillItemsObj = (CustomFormattedAdjWriteOffBillItems)e.Cell.ParentRow.DataContext;

                if (obsCollectionCustomFormattedAdjWriteOffBillItems.Contains(customFormattedBillItemsObj))
                    obsCollectionCustomFormattedAdjWriteOffBillItems.Remove(customFormattedBillItemsObj);

                if ((customFormattedBillItemsObj.amount_to_adjustment.HasValue ? customFormattedBillItemsObj.amount_to_adjustment.Value : 0) > 0 || (customFormattedBillItemsObj.amount_to_write_off.HasValue ? customFormattedBillItemsObj.amount_to_write_off.Value : 0) > 0)
                    obsCollectionCustomFormattedAdjWriteOffBillItems.Add(customFormattedBillItemsObj);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void Editor_Loaded(object sender, RoutedEventArgs e)
        {
            try
            {
                Control ctrl = sender as Control;
                if (ctrl != null)
                {
                    ctrl.Focus();
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void BtnWOClearPatient_Click(object sender, RoutedEventArgs e)
        {
            ClearWriteOffControls();
        }

        //private void BtnWOFindPatient_Click(object sender, RoutedEventArgs e)
        //{
        //    UserControls.FindPatientForm searchPatient = new UserControls.FindPatientForm(this);
        //    searchPatient.DdlPatientStatus.ItemsSource = Statuses;
        //    searchPatient.DdlPatientStatus.SelectedIndex = 1;
        //    searchPatient.Show();
        //    searchPatient.BindPatientStatuses();
        //    searchPatient.Unloaded += new RoutedEventHandler(FindWOPatient_Unloaded);
        //}

        //private void FindWOPatient_Unloaded(object sender, RoutedEventArgs e)
        //{
        //    try
        //    {
        //        FindPatientForm OpenFindPatientForm = (FindPatientForm)sender;

        //        if (OpenFindPatientForm.RadGvEmployee.SelectedItem != null)
        //        {
        //            gPatientPayment = null;
        //            ClearPatientPaymentTabFields();
        //            CustomFormattedPatient dbPatient = (CustomFormattedPatient)OpenFindPatientForm.RadGvEmployee.SelectedItem;


        //            LblWOPatientName.Text = dbPatient.last_name.ToUpper() + ", " + dbPatient.first_name;
        //            if (dbPatient.date_of_birth.HasValue)
        //                LblWODoB.Text = DateTime.Parse(dbPatient.date_of_birth.Value.ToString()).ToString("MM/dd/yyyy");
        //            else
        //                LblWODoB.Text = string.Empty;

        //            if (dbPatient.unique_number != null && dbPatient.unique_number.Trim().Length != 0)
        //                LblWOUniqueNumber.Text = dbPatient.unique_number.Trim();
        //            else
        //                LblWOUniqueNumber.Text = string.Empty;

        //            if (dbPatient.ssn != null && dbPatient.ssn.Trim().Length != 0)
        //                LblWOSSN.Text = (dbPatient.ssn).Substring(0, 3) + "-" + (dbPatient.ssn).Substring(3, 2) + "-" + (dbPatient.ssn).Substring(5, 4);
        //            else
        //                LblWOSSN.Text = string.Empty;
        //            if (dbPatient.mobile_phone != null && dbPatient.mobile_phone.Trim().Length != 0)
        //                LblWOCellPhone.Text = (dbPatient.mobile_phone).Substring(0, 3) + "/" + (dbPatient.mobile_phone).Substring(3, 3) + "-" + (dbPatient.mobile_phone).Substring(6, 4);
        //            else
        //                LblWOCellPhone.Text = string.Empty;
        //            adjWriteOffPatientId = dbPatient.patientId;
        //            LoadBills();
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        MessageBox.Show(ex.Message);
        //    }
        //}

        public void LoadBills()
        {
            try
            {
                if (TxtWOOutstandingDays.Text.Trim().Length == 0)
                    outStandingDate = DateTime.Now;
                InvokeOperation invokeOp = patientPaymentDomainContext.GetPatientCustomFormattedAdjWriteOffBills(adjWriteOffPatientId, outStandingDate.ToString());
                invokeOp.Completed += new EventHandler(loadAdjWriteOffBills_Completed);
            }
            catch (Exception ex) { MessageBox.Show(ex.Message); }
        }

        private void BtnRetrieve_Click(object sender, RoutedEventArgs e)
        {
            if (TxtWOOutstandingDays.Text.Trim().Length > 0)
            {

                if (Convert.ToInt32(TxtWOOutstandingDays.Text.Trim()) == 0)
                    outStandingDate = DateTime.Now;
                else
                {
                    outStandingDate = DateTime.Now.AddDays(Convert.ToInt32("-" + TxtWOOutstandingDays.Text.Trim()));
                }
                RetriveBillsOutStandingDaysFor(outStandingDate.ToString());
            }
            else
            {
                SuccessWindow successWindow = new SuccessWindow("Please enter no. of days.");
                successWindow.Show();
            }
        }

        private void RetriveBillsOutStandingDaysFor(string outStandingDate)
        {
            try
            {
                InvokeOperation invokeOp = patientPaymentDomainContext.GetPatientCustomFormattedAdjWriteOffBills(adjWriteOffPatientId, outStandingDate);
                invokeOp.Completed += new EventHandler(loadAdjWriteOffBills_Completed);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        void loadAdjWriteOffBills_Completed(object sender, System.EventArgs e)
        {
            try
            {
                this.RadGvBills.ItemsSource = null;
                InvokeOperation invokeOp = (InvokeOperation)sender;
                if (!invokeOp.HasError)
                {
                    if (invokeOp.Value != null)
                    {
                        IEnumerable<CustomFormattedAdjWriteOffBillEdit> lst = (IEnumerable<CustomFormattedAdjWriteOffBillEdit>)invokeOp.Value;
                        RadGvBills.ItemsSource = lst;
                    }
                    else
                        RadGvBills.ItemsSource = null;
                }
                else
                {
                    invokeOp.MarkErrorAsHandled();
                    MessageBox.Show(invokeOp.Error.Message);
                }

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            this.RadGvBills.IsBusy = false;
        }

        private void TxtWOOutstandingDays_TextChanged(object sender, TextChangedEventArgs e)
        {

        }

        private void BtnPost_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                DisableSaveButtons();

                InformationWindow informationWindow;

                decimal totalBillHeaderAmount = 0, totalBillDetailAmount = 0, billHeaderAmount = 0, billItemAmount = 0, totalBillDetailAdjustmentAmount = 0, totalBillDetailWriteOffAmount = 0, totalBillDetailAmountForAllBills = 0;
                string strValidationError = string.Empty, billHeaderPaymentDueErrors = string.Empty, billTransactionPaymentDueErrors = string.Empty, billtransactionPatientBalanceErrors = string.Empty;
                string billHeaderTransactionTotalAmountError = string.Empty, billTransactionTotalAmountError = string.Empty;
                string billHeaderTransactionAdjustmentTotalError = string.Empty, billHeaderTransactionWriteOffTotalError = string.Empty;
                bool isAdjustmentAmountEntered = false, isWriteOffAmountEntered = false, hasTransactionCodeError = false;

                foreach (CustomFormattedAdjWriteOffBillEdit bill in RadGvBills.Items)
                {
                    billHeaderAmount = (decimal)((bill.amount_to_adjustment == null ? 0 : bill.amount_to_adjustment.Value) + (bill.amount_to_write_off == null ? 0 : bill.amount_to_write_off.Value));

                    if (billHeaderAmount > bill.payment_due)
                        billHeaderPaymentDueErrors += bill.bill_header_id.ToString() + ", ";

                    if (((decimal)(bill.amount_to_adjustment == null ? 0 : bill.amount_to_adjustment)) > 0)
                        isAdjustmentAmountEntered = true;
                    if (((decimal)(bill.amount_to_write_off == null ? 0 : bill.amount_to_write_off)) > 0)
                        isWriteOffAmountEntered = true;

                    totalBillDetailAmount = 0;

                    ObservableCollection<CustomFormattedAdjWriteOffBillItems> tempBillTrans = new ObservableCollection<CustomFormattedAdjWriteOffBillItems>(obsCollectionCustomFormattedAdjWriteOffBillItems.Where(x => x.bill_header_id == bill.bill_header_id));

                    foreach (CustomFormattedAdjWriteOffBillItems billItem in tempBillTrans)
                    {
                        billItemAmount = (decimal)((billItem.amount_to_adjustment == null ? 0 : billItem.amount_to_adjustment) + (billItem.amount_to_write_off == null ? 0 : billItem.amount_to_write_off));

                        if (billItemAmount > billItem.patient_balance)
                            billtransactionPatientBalanceErrors += billItem.bill_transaction_id.ToString() + ", ";

                        if (billItemAmount > billItem.payment_due)
                            billTransactionPaymentDueErrors += billItem.bill_transaction_id.ToString() + ", ";

                        totalBillDetailAmount += billItemAmount;
                        totalBillDetailAdjustmentAmount += (billItem.amount_to_adjustment.HasValue ? billItem.amount_to_adjustment.Value : 0);
                        totalBillDetailWriteOffAmount += (billItem.amount_to_write_off.HasValue ? billItem.amount_to_write_off.Value : 0);

                        if (((decimal)(billItem.amount_to_adjustment == null ? 0 : billItem.amount_to_adjustment)) > 0)
                            isAdjustmentAmountEntered = true;
                        if (((decimal)(billItem.amount_to_write_off == null ? 0 : billItem.amount_to_write_off)) > 0)
                            isWriteOffAmountEntered = true;
                    }

                    if (billHeaderAmount > 0 && totalBillDetailAmount > 0)
                    {
                        if (bill.amount_to_adjustment.HasValue && bill.amount_to_adjustment.Value > 0)
                        {
                            if (totalBillDetailAdjustmentAmount != (bill.amount_to_adjustment.HasValue ? bill.amount_to_adjustment.Value : 0))
                            {
                                billHeaderTransactionAdjustmentTotalError += bill.bill_header_id.ToString() + ", ";
                            }
                        }

                        if (bill.amount_to_write_off.HasValue && bill.amount_to_write_off.Value > 0)
                        {
                            if (totalBillDetailWriteOffAmount != (bill.amount_to_write_off.HasValue ? bill.amount_to_write_off.Value : 0))
                            {
                                billHeaderTransactionWriteOffTotalError += bill.bill_header_id.ToString() + ", ";
                            }
                        }
                    }
                    else if (billHeaderAmount == 0 && totalBillDetailAmount > 0)
                    {
                        if (totalBillDetailAmount > bill.payment_due)
                            billTransactionTotalAmountError += bill.bill_header_id.ToString() + ", ";
                    }

                    totalBillHeaderAmount += billHeaderAmount;
                    totalBillDetailAmountForAllBills += totalBillDetailAmount;
                }

                if (isAdjustmentAmountEntered && this.DdlAdjustmentTransactionCode.SelectedIndex == -1)
                    hasTransactionCodeError = true;
                if (isWriteOffAmountEntered && this.DdlWriteOffTransactionCode.SelectedIndex == -1)
                    hasTransactionCodeError = true;

                if (billHeaderPaymentDueErrors.Trim().Length == 0 && billTransactionPaymentDueErrors.Trim().Length == 0 && billHeaderTransactionAdjustmentTotalError.Trim().Length == 0 && billHeaderTransactionWriteOffTotalError.Trim().Length == 0 && billTransactionTotalAmountError.Trim().Length == 0 && !hasTransactionCodeError && billtransactionPatientBalanceErrors.Trim().Length == 0)
                {
                    if (totalBillHeaderAmount == 0 && totalBillDetailAmountForAllBills == 0)
                    {
                        informationWindow = new InformationWindow("Please enter adjustment/write-off amount for at least one bill or transaction.");
                        informationWindow.Show();
                        EnableSaveButtons();
                    }
                    else
                    {
                        BillingAdministration.lstCustomBills = new List<BillHeader>();
                        foreach (CustomFormattedAdjWriteOffBillEdit allBills in (IEnumerable<CustomFormattedAdjWriteOffBillEdit>)RadGvBills.ItemsSource)
                        {
                            ObservableCollection<CustomFormattedAdjWriteOffBillItems> tempBillTrans = new ObservableCollection<CustomFormattedAdjWriteOffBillItems>(obsCollectionCustomFormattedAdjWriteOffBillItems.Where(x => x.bill_header_id == allBills.bill_header_id));
                            foreach (CustomFormattedAdjWriteOffBillItems billItem in tempBillTrans)
                                BillingAdministration.AddToBillTransactionList(billItem.bill_transaction_id, (billItem.amount_to_adjustment.HasValue ? billItem.amount_to_adjustment.Value : 0), (billItem.amount_to_write_off.HasValue ? billItem.amount_to_write_off.Value : 0));

                            BillingAdministration.AddToBillHeaderList(allBills.super_bill_id, allBills.bill_header_id, allBills.patient_id, Convert.ToDecimal((allBills.amount_to_adjustment.HasValue ? allBills.amount_to_adjustment.Value : 0)), Convert.ToDecimal((allBills.amount_to_write_off.HasValue ? allBills.amount_to_write_off.Value : 0)), physicianId: allBills.rendering_physician_id);
                        }

                        SaveAdjustmentWriteOffAmounts();
                    }
                }
                else
                {
                    if (billtransactionPatientBalanceErrors.Trim().Length > 0)
                    {
                        strValidationError = "Cannot allocate payments.\r\n";
                        strValidationError += "The write-off amount entered should not be greater than patient balance for the following\r\n";
                        if (billtransactionPatientBalanceErrors.Trim().Length > 0)
                            strValidationError += "Bill Transaction(s): " + billtransactionPatientBalanceErrors.Trim().Substring(0, billtransactionPatientBalanceErrors.Trim().Length - 1) + "\r\n";
                    }
                    else if (billHeaderPaymentDueErrors.Trim().Length > 0 || billTransactionPaymentDueErrors.Trim().Length > 0)
                    {
                        strValidationError = "Cannot allocate payments.\r\n";
                        strValidationError += "The write-off amount entered should not be greater than pending dues for the following\r\n";
                        if (billHeaderPaymentDueErrors.Trim().Length > 0)
                            strValidationError += "Bill Header(s): " + billHeaderPaymentDueErrors.Trim().Substring(0, billHeaderPaymentDueErrors.Trim().Length - 1) + "\r\n";
                        if (billTransactionPaymentDueErrors.Trim().Length > 0)
                            strValidationError += "Bill Transaction(s): " + billTransactionPaymentDueErrors.Trim().Substring(0, billTransactionPaymentDueErrors.Trim().Length - 1) + "\r\n";
                    }
                    else if (billHeaderTransactionAdjustmentTotalError.Trim().Length > 0 || billHeaderTransactionWriteOffTotalError.Trim().Length > 0 || billTransactionTotalAmountError.Trim().Length > 0)
                    {
                        strValidationError = "Cannot allocate payments.\r\n";
                        if (billHeaderTransactionAdjustmentTotalError.Trim().Length > 0)
                            strValidationError += "The adjustment amount entered in bill header is not equal to sum of adjustment amount entered in bill items for the following bill(s):\r\n" + billHeaderTransactionAdjustmentTotalError.Trim().Substring(0, billHeaderTransactionAdjustmentTotalError.Trim().Length - 1);
                        else if (billHeaderTransactionWriteOffTotalError.Trim().Length > 0)
                            strValidationError += "The write-off amount entered in bill header is not equal to sum of write-off amount entered in bill items for the following bill(s):\r\n" + billHeaderTransactionWriteOffTotalError.Trim().Substring(0, billHeaderTransactionWriteOffTotalError.Trim().Length - 1);
                        else if (billTransactionTotalAmountError.Trim().Length > 0)
                            strValidationError += "The amount pending in bill header is not equal to sum of amount entered in bill items for the following bill(s):\r\n" + billTransactionTotalAmountError.Trim().Substring(0, billTransactionTotalAmountError.Trim().Length - 1);
                    }
                    else if (hasTransactionCodeError)
                    {
                        strValidationError = "Please select Transaction Codes for the following: ";
                        if (isAdjustmentAmountEntered && this.DdlAdjustmentTransactionCode.SelectedIndex == -1)
                            strValidationError += "Adjustment, ";
                        if (isWriteOffAmountEntered && this.DdlWriteOffTransactionCode.SelectedIndex == -1)
                            strValidationError += "Write-Off, ";

                        if (strValidationError.Trim().Length > 0)
                            strValidationError = strValidationError.Trim().Substring(0, strValidationError.Trim().Length - 1);
                    }

                    informationWindow = new InformationWindow(strValidationError);
                    informationWindow.Show();
                    EnableSaveButtons();
                }
            }
            catch (Exception ex)
            {
                EnableSaveButtons();
                MessageBox.Show(ex.Message);
            }
        }

        private void EnableSaveButtons()
        {
            //this.BtnPost.IsEnabled = true;
            this.BtnTopPost.IsEnabled = true;
        }

        private void DisableSaveButtons()
        {
            //this.BtnPost.IsEnabled = false;
            this.BtnTopPost.IsEnabled = false;
        }

        public void SaveAdjustmentWriteOffAmounts()
        {
            allocatePaymentControlsBatch = new DomainContextLoadBatch(AdjWriteOffDataLoadComplete);
            GetCurrentBills();
            GetCurrentSuperBills();
            GetCurrentBillTransactions();
            GetCurrentPatientAccountSummary();
        }

        void AdjWriteOffDataLoadComplete(DomainContextLoadBatch batch)
        {
            try
            {
                if (batch != null)
                {
                    if (batch.FailedOperationCount > 0)
                    {
                        MessageBox.Show("Load operation failed");
                        // Do Error handling
                    }
                    else
                    {
                        year = DateTime.Now.Year; month = DateTime.Now.Month; day = DateTime.Now.Day; hour = DateTime.Now.Hour; minute = DateTime.Now.Minute; second = DateTime.Now.Second;
                        DateTime currentDateTime = DateTime.Now;
                        decimal patientBalanceDue = 0, insuranceBalanceDue = 0;
                        if (objPatientAccountSummary != null)
                        {
                            patientBalanceDue = Convert.ToDecimal(objPatientAccountSummary.patient_balance_due);
                            insuranceBalanceDue = Convert.ToDecimal(objPatientAccountSummary.insurance_balance_due);
                        }
                        decimal? balance = (objPatientAccountSummary != null ?
                            (objPatientAccountSummary.total_charges.HasValue ? objPatientAccountSummary.total_charges.Value : 0) -
                                                    ((objPatientAccountSummary.total_adjustments.HasValue ? objPatientAccountSummary.total_adjustments.Value : 0) +
                                                    (objPatientAccountSummary.total_write_off_amount.HasValue ? objPatientAccountSummary.total_write_off_amount.Value : 0) +
                                                    (objPatientAccountSummary.total_patient_payments.HasValue ? objPatientAccountSummary.total_patient_payments.Value : 0) +
                                                    (objPatientAccountSummary.total_insurance_payments.HasValue ? objPatientAccountSummary.total_insurance_payments.Value : 0)) : 0);

                        decimal totalAmountToApply = 0, totalAdjustmentAmountToApply = 0, totalWriteOffAmountToApply = 0;
                        payment_transaction paymentTransactionObj;
                        patient_account_summary patientAccountSummaryObj;

                        foreach (BillHeader billItem in BillingAdministration.lstCustomBills)
                        {
                            superbill superbillObj = null;
                            bill_header billHeaderObj = null;
                            bill_transaction billTransactionObj = null;
                            if (lstBillHeader != null)
                                billHeaderObj = lstBillHeader.Where(q => q.super_bill_id == billItem.superBillId).FirstOrDefault();
                            superbillObj = lstSuperbill.Where(q => q.super_bill_id == billItem.superBillId).FirstOrDefault();
                            if (billHeaderObj != null && ((billItem.adjustmentAmount != null && Convert.ToDecimal(billItem.adjustmentAmount) > 0) || (billItem.writeOffAmount != null && Convert.ToDecimal(billItem.writeOffAmount) > 0) || billItem.lstBillTransactions.Count > 0))
                            {
                                //Step 1: Payment Transaction.
                                decimal itemsTotal = 0, itemsAdjustmentTotal = 0, itemsWriteOffTotal = 0;
                                List<BillTransaction> tempTransactionsLst = billItem.lstBillTransactions;
                                if (tempTransactionsLst.Count > 0)
                                {
                                    foreach (BillTransaction item in tempTransactionsLst)
                                    {
                                        if (lstBillTransaction != null)
                                        {
                                            billTransactionObj = lstBillTransaction.Where(q => q.bill_transaction_id == item.billTransactionId).FirstOrDefault();

                                            if (billTransactionObj != null)
                                            {
                                                billTransactionObj.adjustment_amount = (Convert.ToDecimal(item.adjustmentAmount) + (billTransactionObj.adjustment_amount.HasValue ? billTransactionObj.adjustment_amount.Value : 0));
                                                billTransactionObj.write_off_amount = (Convert.ToDecimal(item.writeOffAmount) + (billTransactionObj.write_off_amount.HasValue ? billTransactionObj.write_off_amount.Value : 0));
                                            }
                                        }

                                        if (item.adjustmentAmount > 0)
                                        {
                                            //Insert record into [adjustment_write_off] table for bill header
                                            adjustment_write_off adjustmentObj = PrepareAdjustmentWriteOffObj(billItem.superBillId, billItem.billHeaderId, item.billTransactionId, billItem.patientId, item.adjustmentAmount, null, this.DdlAdjustmentTransactionCode.SelectedValue.ToString(), currentDateTime, App.global_user.user_id, null);
                                            paymentTransactionDomainContext.adjustment_write_offs.Add(adjustmentObj);

                                            paymentTransactionObj = GetPaymentTransactionObj(billItem.superBillId, billItem.billHeaderId, item.billTransactionId, billItem.patientId, null, adjustmentObj, this.DdlAdjustmentTransactionCode.SelectedValue.ToString(), Convert.ToDecimal(item.adjustmentAmount), currentDateTime, App.global_user.user_id, null, null);
                                            paymentTransactionDomainContext.payment_transactions.Add(paymentTransactionObj);

                                            //Create patient_account_activity record
                                            balance = balance - paymentTransactionObj.amount;
                                            insuranceBalanceDue = insuranceBalanceDue - paymentTransactionObj.amount;
                                            patient_account_activity patientAccountActivityObj = CreatePatientAccountActivityRecord(billItem.patientId, HardcodedValues.FinancialCodeCategory.GetValue(2).ToString(), this.DdlAdjustmentTransactionCode.SelectionBoxItem.ToString(), App.global_user.user_id, DateTime.Now, patientBalanceDue, insuranceBalanceDue, paymentTransactionObj: paymentTransactionObj, balance: balance, amount: -paymentTransactionObj.amount, code: this.DdlAdjustmentTransactionCode.SelectedValue.ToString(), physicianId: billItem.physicianId);
                                            paymentTransactionDomainContext.patient_account_activities.Add(patientAccountActivityObj);
                                        }

                                        if (item.writeOffAmount > 0)
                                        {
                                            //Insert record into [adjustment_write_off] table for bill header
                                            adjustment_write_off writeOffObj = PrepareAdjustmentWriteOffObj(billItem.superBillId, billItem.billHeaderId, item.billTransactionId, billItem.patientId, null, item.writeOffAmount, this.DdlWriteOffTransactionCode.SelectedValue.ToString(), currentDateTime, App.global_user.user_id, null);
                                            paymentTransactionDomainContext.adjustment_write_offs.Add(writeOffObj);

                                            paymentTransactionObj = GetPaymentTransactionObj(billItem.superBillId, billItem.billHeaderId, item.billTransactionId, billItem.patientId, null, writeOffObj, this.DdlWriteOffTransactionCode.SelectedValue.ToString(), Convert.ToDecimal(item.writeOffAmount), currentDateTime, App.global_user.user_id, null, null);
                                            paymentTransactionDomainContext.payment_transactions.Add(paymentTransactionObj);

                                            //Create patient_account_activity record
                                            balance = balance - paymentTransactionObj.amount;
                                            patientBalanceDue = patientBalanceDue - paymentTransactionObj.amount;
                                            patient_account_activity patientAccountActivityObj = CreatePatientAccountActivityRecord(billItem.patientId, HardcodedValues.FinancialCodeCategory.GetValue(3).ToString(), this.DdlWriteOffTransactionCode.SelectionBoxItem.ToString(), App.global_user.user_id, DateTime.Now, patientBalanceDue, insuranceBalanceDue, paymentTransactionObj: paymentTransactionObj, balance: balance, amount: -paymentTransactionObj.amount, code: this.DdlWriteOffTransactionCode.SelectedValue.ToString(), physicianId: billItem.physicianId);
                                            paymentTransactionDomainContext.patient_account_activities.Add(patientAccountActivityObj);
                                        }

                                        itemsTotal += Convert.ToDecimal(item.adjustmentAmount) + Convert.ToDecimal(item.writeOffAmount);
                                        itemsAdjustmentTotal += Convert.ToDecimal(item.adjustmentAmount);
                                        itemsWriteOffTotal += Convert.ToDecimal(item.writeOffAmount);
                                    }
                                }

                                if (Convert.ToDecimal(billItem.amount) == 0)
                                    billItem.amount = itemsTotal;
                                if (Convert.ToDecimal(billItem.adjustmentAmount) == 0)
                                    billItem.adjustmentAmount = itemsAdjustmentTotal;
                                if (Convert.ToDecimal(billItem.writeOffAmount) == 0)
                                    billItem.writeOffAmount = itemsWriteOffTotal;

                                billHeaderObj.total_due_from_patient -= Convert.ToDecimal(billItem.writeOffAmount);

                                //Step 2: Bill Header and Superbill updates
                                billHeaderObj.adjustment_amount = (Convert.ToDecimal(billItem.adjustmentAmount) + (billHeaderObj.adjustment_amount.HasValue ? billHeaderObj.adjustment_amount.Value : 0));
                                billHeaderObj.write_off_amount = (Convert.ToDecimal(billItem.writeOffAmount) + (billHeaderObj.write_off_amount.HasValue ? billHeaderObj.write_off_amount.Value : 0));
                                //billHeaderObj.total_payments_received = (Convert.ToDecimal(billItem.adjustmentAmount) + Convert.ToDecimal(billItem.writeOffAmount) + (billHeaderObj.total_payments_received.HasValue ? billHeaderObj.total_payments_received.Value : 0));
                                if ((billHeaderObj.total_charges) <= ((billHeaderObj.total_payments_received.HasValue ? billHeaderObj.total_payments_received.Value : 0) + (billHeaderObj.adjustment_amount.HasValue ? billHeaderObj.adjustment_amount.Value : 0) + (billHeaderObj.write_off_amount.HasValue ? billHeaderObj.write_off_amount.Value : 0)))
                                    superbillObj.status = "No Dues";
                                billHeaderObj.primary_insurance_PCA_number = "0";
                                billHeaderObj.date_last_updated = currentDateTime;
                                billHeaderObj.last_updated_by_user_id = App.global_user.user_id;

                                totalAmountToApply += Convert.ToDecimal(billItem.amount);
                                totalAdjustmentAmountToApply += Convert.ToDecimal(billItem.adjustmentAmount);
                                totalWriteOffAmountToApply += Convert.ToDecimal(billItem.writeOffAmount);
                            }
                        }

                        //Step 3: Patient Account Summary update
                        if (objPatientAccountSummary != null)
                        {
                            patientAccountSummaryObj = objPatientAccountSummary;
                            patientAccountSummaryObj.patient_balance_due = Convert.ToDecimal(patientAccountSummaryObj.patient_balance_due) - Convert.ToDecimal(totalWriteOffAmountToApply);
                            patientAccountSummaryObj.total_adjustments = Convert.ToDecimal(patientAccountSummaryObj.total_adjustments.HasValue ? patientAccountSummaryObj.total_adjustments.Value : 0) + Convert.ToDecimal(totalAdjustmentAmountToApply);
                            patientAccountSummaryObj.total_write_off_amount = Convert.ToDecimal(patientAccountSummaryObj.total_write_off_amount.HasValue ? patientAccountSummaryObj.total_write_off_amount.Value : 0) + Convert.ToDecimal(totalWriteOffAmountToApply);
                            patientAccountSummaryObj.date_last_updated = currentDateTime;
                            patientAccountSummaryObj.last_updated_by_user_id = App.global_user.user_id;

                            if (patientAccountSummaryObj.patient_balance_due == 0 && patientAccountSummaryObj.insurance_balance_due == 0 && (patientAccountSummaryObj.flag_account_in_collections.HasValue ? patientAccountSummaryObj.flag_account_in_collections.Value : false))
                                patientAccountSummaryObj.flag_account_in_collections = false;
                        }
                        else
                        {
                            if (BillingAdministration.lstCustomBills.Count > 0)
                            {
                                patientAccountSummaryObj = new patient_account_summary();
                                patientAccountSummaryObj.patient_id = BillingAdministration.lstCustomBills.FirstOrDefault().patientId;
                                patientAccountSummaryObj.patient_balance_due = Convert.ToDecimal(patientAccountSummaryObj.patient_balance_due.HasValue ? patientAccountSummaryObj.patient_balance_due.Value : 0) - Convert.ToDecimal(totalWriteOffAmountToApply);
                                patientAccountSummaryObj.total_adjustments = Convert.ToDecimal(patientAccountSummaryObj.total_adjustments.HasValue ? patientAccountSummaryObj.total_adjustments.Value : 0) + Convert.ToDecimal(totalAdjustmentAmountToApply);
                                patientAccountSummaryObj.total_write_off_amount = Convert.ToDecimal(patientAccountSummaryObj.total_write_off_amount.HasValue ? patientAccountSummaryObj.total_write_off_amount.Value : 0) + Convert.ToDecimal(totalWriteOffAmountToApply);
                                patientAccountSummaryObj.date_created = currentDateTime;
                                patientAccountSummaryObj.created_by_user_id = App.global_user.user_id;
                                patientAccountSummaryObj.date_last_updated = currentDateTime;
                                patientAccountSummaryObj.last_updated_by_user_id = App.global_user.user_id;

                                if (patientAccountSummaryObj.patient_balance_due == 0 && patientAccountSummaryObj.insurance_balance_due == 0 && (patientAccountSummaryObj.flag_account_in_collections.HasValue ? patientAccountSummaryObj.flag_account_in_collections.Value : false))
                                    patientAccountSummaryObj.flag_account_in_collections = false;

                                paymentTransactionDomainContext.patient_account_summaries.Add(patientAccountSummaryObj);
                            }
                        }

                        System.ServiceModel.DomainServices.Client.SubmitOperation paymentTransactionSubmit = paymentTransactionDomainContext.SubmitChanges();
                        paymentTransactionSubmit.Completed += new EventHandler(paymentTransactionSubmit_Completed);

                        if (postBillingDomainContext.HasChanges)
                        {
                            System.ServiceModel.DomainServices.Client.SubmitOperation billHeaderSubmit = postBillingDomainContext.SubmitChanges();
                            billHeaderSubmit.Completed += new EventHandler(billHeaderSubmit_Completed);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                EnableSaveButtons();
                MessageBox.Show(ex.Message);
            }
        }

        private adjustment_write_off PrepareAdjustmentWriteOffObj(int? superBillId, int? billHeaderId, int? billTransactionId, int patientId, decimal? adjustmentAmount, decimal? writeOffAmount, string transactionCode, DateTime currentDateTime, int userId, int? patientNonProcedureOfficeChargeId)
        {
            adjustment_write_off adjustmentWriteOffObj = new adjustment_write_off();
            try
            {
                if (superBillId != null)
                    adjustmentWriteOffObj.super_bill_id = superBillId;
                if (billHeaderId != null)
                    adjustmentWriteOffObj.bill_header_id = billHeaderId;
                if (billTransactionId != null)
                    adjustmentWriteOffObj.bill_transaction_id = billTransactionId;
                adjustmentWriteOffObj.patient_id = patientId;
                if (patientNonProcedureOfficeChargeId != null)
                    adjustmentWriteOffObj.patient_non_procedure_office_charge_id = patientNonProcedureOfficeChargeId;
                if (adjustmentAmount != null)
                    adjustmentWriteOffObj.adjustment_amount = adjustmentAmount;
                if (writeOffAmount != null)
                    adjustmentWriteOffObj.write_off_amount = writeOffAmount;
                adjustmentWriteOffObj.transaction_code = transactionCode;
                adjustmentWriteOffObj.date_created = currentDateTime;
                adjustmentWriteOffObj.created_by_user_id = userId;
                adjustmentWriteOffObj.date_last_updated = currentDateTime;
                adjustmentWriteOffObj.last_updated_by_user_id = userId;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return adjustmentWriteOffObj;
        }

        private payment_transaction GetPaymentTransactionObj(int? superBillId, int? billHeaderId, int? billTransactionId, int patientId, int? patientPaymentId, adjustment_write_off adjustmentObj, string transactionCode, decimal amount, DateTime currentDateTime, int userId, int? patientNonProcedureOfficeChargeId, int? insurancePaymentId)
        {
            payment_transaction paymentTransactionObj = new payment_transaction();
            try
            {
                if (superBillId != null)
                    paymentTransactionObj.super_bill_id = superBillId;
                if (billHeaderId != null)
                    paymentTransactionObj.bill_header_id = billHeaderId;
                if (billTransactionId != null)
                    paymentTransactionObj.bill_transaction_id = billTransactionId;
                paymentTransactionObj.patient_id = patientId;
                if (patientPaymentId != null)
                    paymentTransactionObj.patient_payment_id = patientPaymentId;
                if (insurancePaymentId != null)
                    paymentTransactionObj.insurance_payment_id = insurancePaymentId;
                if (adjustmentObj != null)
                    paymentTransactionObj.adjustment_write_off = adjustmentObj;
                if (patientNonProcedureOfficeChargeId != null)
                    paymentTransactionObj.patient_non_procedure_office_charge_id = patientNonProcedureOfficeChargeId;
                paymentTransactionObj.transaction_code = transactionCode;
                paymentTransactionObj.amount = amount;
                paymentTransactionObj.date_created = currentDateTime;
                paymentTransactionObj.created_by_user_id = userId;
                paymentTransactionObj.date_last_updated = currentDateTime;
                paymentTransactionObj.last_updated_by_user_id = userId;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return paymentTransactionObj;
        }

        private patient_account_activity CreatePatientAccountActivityRecord(int patientId, string category, string description, int userId, DateTime postingDate, decimal patientBalanceDue, decimal insuranceBalanceDue, string code = "", DateTime? serviceDate = null, string referenceNo = "", decimal? amount = null, decimal? balance = null, bill_transaction billTransactionObj = null, int? billTransactionId = null, payment_transaction paymentTransactionObj = null, int? pnpocId = null, adjustment_write_off adjWriteOffObj = null, int? physicianId = null, int? insuranceProviderId = null, string payorId = "", string insuranceProviderCode = "", string financialType = "")
        {
            try
            {
                patient_account_activity paa = new patient_account_activity();
                paa.patient_id = patientId;
                paa.account_activity_category = category;
                paa.activity_code = code;
                paa.date_of_service = serviceDate;
                paa.activity_description = description;
                paa.reference_number = referenceNo;
                paa.amount = amount;
                paa.account_balance = balance;
                paa.patient_balance_due = patientBalanceDue;
                paa.insurance_balance_due = insuranceBalanceDue;
                paa.payment_transaction = paymentTransactionObj;
                if (billTransactionId != null)
                    paa.bill_transaction_id = billTransactionId;
                paa.patient_non_procedure_office_charge_id = pnpocId;
                paa.adjustment_write_off = adjWriteOffObj;
                paa.physician_id = physicianId;
                paa.insurance_provider_id = insuranceProviderId;
                paa.payer_id = payorId;
                paa.insurance_provider_code = insuranceProviderCode;
                paa.posting_date = CurrentCustomDate(ref year, ref month, ref day, ref hour, ref minute, ref second, ref millisecond); //postingDate;
                paa.financial_type = financialType;
                paa.date_created = paa.date_last_updated = paa.posting_date;
                paa.created_by_user_id = paa.last_updated_by_user_id = userId;

                return paa;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        private DateTime CurrentCustomDate(ref int year, ref int month, ref int day, ref int hour, ref int minute, ref int second, ref int millisecond)
        {
            if (millisecond > 999)
            {
                System.Threading.Thread.Sleep(999);
                year = DateTime.Now.Year; month = DateTime.Now.Month; day = DateTime.Now.Day; hour = DateTime.Now.Hour; minute = DateTime.Now.Minute; second = DateTime.Now.Second;
            }
            return Convert.ToDateTime(year.ToString() + "-" + month.ToString() + "-" + day.ToString() + " " + hour.ToString() + ":" + minute.ToString() + ":" + second.ToString() + "." + millisecond.ToString("000"));
        }

        void adjustmentWriteOffSubmit_Completed(object sender, EventArgs e)
        {
            try
            {
                System.ServiceModel.DomainServices.Client.SubmitOperation op = (SubmitOperation)sender;
                if (op.HasError)
                {
                    op.MarkErrorAsHandled();
                    MessageBox.Show(op.Error.Message);
                }
                else
                {

                }
            }
            catch (Exception ex)
            { MessageBox.Show(ex.Message); }
        }

        void paymentTransactionSubmit_Completed(object sender, EventArgs e)
        {
            try
            {
                System.ServiceModel.DomainServices.Client.SubmitOperation op = (SubmitOperation)sender;
                if (op.HasError)
                {
                    op.MarkErrorAsHandled();
                    MessageBox.Show(op.Error.Message);
                }
                else
                {

                }
            }
            catch (Exception ex)
            { MessageBox.Show(ex.Message); }
        }

        void billHeaderSubmit_Completed(object sender, EventArgs e)
        {
            try
            {
                System.ServiceModel.DomainServices.Client.SubmitOperation op = (SubmitOperation)sender;
                if (op.HasError)
                {
                    op.MarkErrorAsHandled();
                    MessageBox.Show(op.Error.Message);
                }
                else
                {
                    LoadBills();
                    EnableSaveButtons();

                    ClearTransactionCodeDlls();

                    if (patientObj != null)
                        UpdateTopUnallocatedAmtAndBalanceDue(patientObj.patientId);

                    obsCollectionCustomFormattedAdjWriteOffBillItems.Clear();

                    SuccessWindow successMessage = new SuccessWindow("Write-offs have been applied to the bills");
                    successMessage.ShowDialog();
                }
            }
            catch (Exception ex)
            { MessageBox.Show(ex.Message); }
        }

        private void ClearTransactionCodeDlls()
        {
            if (DdlAdjustmentTransactionCode.Items != null)
            {
                foreach (financial_code fc in DdlAdjustmentTransactionCode.Items)
                {
                    if (fc.is_default)
                    {
                        this.DdlAdjustmentTransactionCode.SelectedItem = fc;
                        break;
                    }
                }
            }
            else
                this.DdlAdjustmentTransactionCode.SelectedIndex = -1;

            if (DdlWriteOffTransactionCode.Items != null)
            {
                foreach (financial_code fc in DdlWriteOffTransactionCode.Items)
                {
                    if (fc.is_default)
                    {
                        this.DdlWriteOffTransactionCode.SelectedItem = fc;
                        break;
                    }
                }
            }
            else
                this.DdlWriteOffTransactionCode.SelectedIndex = -1;
        }

        #region Load Current Data

        public void GetCurrentBills()
        {
            try
            {
                if (BillingAdministration.lstCustomBills.Count > 0)
                {
                    var query = from billHeaderRecords in postBillingDomainContext.GetBill_headerByPatientIdQuery(BillingAdministration.lstCustomBills.FirstOrDefault().patientId)
                                select billHeaderRecords;

                    LoadOperation<bill_header> loadBills = postBillingDomainContext.Load(query);
                    loadBills.Completed += new EventHandler(getBills_Completed);
                    allocatePaymentControlsBatch.Add(loadBills);
                }
            }
            catch (Exception ex)
            { MessageBox.Show(ex.Message); }
        }

        void getBills_Completed(object sender, System.EventArgs e)
        {
            try
            {
                LoadOperation<bill_header> loadBills = (LoadOperation<bill_header>)sender;
                if (!loadBills.HasError)
                {
                    if (loadBills.Entities.Count() > 0)
                    {
                        lstBillHeader = loadBills.Entities.ToList();
                    }
                }
                else
                {
                    MessageBox.Show(loadBills.Error.Message);
                    loadBills.MarkErrorAsHandled();
                }
            }
            catch (Exception ex) { MessageBox.Show(ex.Message); }
        }

        public void GetCurrentSuperBills()
        {
            try
            {
                if (BillingAdministration.lstCustomBills.Count > 0)
                {
                    var query = from superbillRecords in postBillingDomainContext.GetSuperbillsQuery()
                                where superbillRecords.patient_id == BillingAdministration.lstCustomBills.FirstOrDefault().patientId
                                select superbillRecords;

                    LoadOperation<superbill> loadsBills = postBillingDomainContext.Load(query);
                    loadsBills.Completed += new EventHandler(getSBills_Completed);
                    allocatePaymentControlsBatch.Add(loadsBills);
                }
            }
            catch (Exception ex)
            { MessageBox.Show(ex.Message); }
        }

        void getSBills_Completed(object sender, System.EventArgs e)
        {
            try
            {
                LoadOperation<superbill> loadSuperBills = (LoadOperation<superbill>)sender;
                if (!loadSuperBills.HasError)
                {
                    if (loadSuperBills.Entities.Count() > 0)
                    {
                        lstSuperbill = loadSuperBills.Entities.ToList();
                    }

                }
                else
                {
                    MessageBox.Show(loadSuperBills.Error.Message);
                    loadSuperBills.MarkErrorAsHandled();
                }
            }
            catch (Exception ex) { MessageBox.Show(ex.Message); }
        }

        private void GetCurrentBillTransactions()
        {
            try
            {
                if (BillingAdministration.lstCustomBills.Count > 0)
                {
                    List<BillTransaction> tempAllTransactions = new List<BillTransaction>();
                    foreach (BillHeader headerObj in BillingAdministration.lstCustomBills)
                    {
                        if (headerObj.lstBillTransactions.Count > 0)
                        {
                            tempAllTransactions.AddRange(headerObj.lstBillTransactions);
                        }
                    }

                    int[] ids = new int[tempAllTransactions.Count];
                    for (int index = 0; index < tempAllTransactions.Count; index++)
                        ids[index] = tempAllTransactions[index].billTransactionId;


                    var query = from billItemRecords in postBillingDomainContext.GetBill_TransactionsByHeaderIdQuery(ids)
                                select billItemRecords;

                    LoadOperation<bill_transaction> loadBillTrans = postBillingDomainContext.Load(query);
                    loadBillTrans.Completed += new EventHandler(loadBillTrans_Completed);
                    allocatePaymentControlsBatch.Add(loadBillTrans);
                }
            }
            catch (Exception ex)
            { MessageBox.Show(ex.Message); }
        }

        void loadBillTrans_Completed(object sender, EventArgs e)
        {
            try
            {
                LoadOperation<bill_transaction> loadBillTrans = (LoadOperation<bill_transaction>)sender;
                if (!loadBillTrans.HasError)
                {
                    if (loadBillTrans.Entities.Count() > 0)
                    {
                        lstBillTransaction = loadBillTrans.Entities.ToList();
                    }
                }
                else
                {
                    MessageBox.Show(loadBillTrans.Error.Message);
                    loadBillTrans.MarkErrorAsHandled();
                }
            }
            catch (Exception ex) { MessageBox.Show(ex.Message); }
        }

        public void GetCurrentPatientAccountSummary()
        {
            try
            {
                if (BillingAdministration.lstCustomBills.Count > 0)
                {
                    var query = from pas in paymentTransactionDomainContext.GetPatient_account_summaryQuery()
                                where pas.patient_id == BillingAdministration.lstCustomBills.FirstOrDefault().patientId
                                select pas;

                    LoadOperation<patient_account_summary> loadpas = paymentTransactionDomainContext.Load(query);
                    loadpas.Completed += new EventHandler(loadpas_Completed);
                    allocatePaymentControlsBatch.Add(loadpas);
                }
            }
            catch (Exception ex)
            { MessageBox.Show(ex.Message); }
        }

        void loadpas_Completed(object sender, System.EventArgs e)
        {
            try
            {
                LoadOperation<patient_account_summary> loadpas = (LoadOperation<patient_account_summary>)sender;
                if (!loadpas.HasError)
                {
                    if (loadpas.Entities.Count() > 0)
                    {
                        objPatientAccountSummary = loadpas.Entities.FirstOrDefault();
                    }
                    else
                        objPatientAccountSummary = null;
                }
                else
                {
                    MessageBox.Show(loadpas.Error.Message);
                    loadpas.MarkErrorAsHandled();
                }
            }
            catch (Exception ex) { MessageBox.Show(ex.Message); }
        }

        #endregion

        #endregion

        private void LnkNotePatientPayment_Click(object sender, RoutedEventArgs e)
        {
            HyperlinkButton lnkEditPaymentPayment = (HyperlinkButton)(sender);
            CustomFormattedPatientPayments patientPayments = (CustomFormattedPatientPayments)(lnkEditPaymentPayment.DataContext);
            AddEditBillersNote billersNote = new AddEditBillersNote(this.patientObj, "Patient Payment", patientPayments.patientPaymentId);

            billersNote.Closed += new EventHandler(billersNote_Closed);
            billersNote.Show();
          
        }

        private void LnkNoteWriteOff_Click(object sender, RoutedEventArgs e)
        {
            HyperlinkButton lnkEditPaymentPayment = (HyperlinkButton)(sender);
            CustomFormattedAdjWriteOffBillEdit adWroffs = (CustomFormattedAdjWriteOffBillEdit)(lnkEditPaymentPayment.DataContext);
            AddEditBillersNote billersNote = new AddEditBillersNote(this.patientObj, "Adjustment WriteOffs", adWroffs.bill_header_id);

            billersNote.Closed += new EventHandler(billersNote_Closed);
            billersNote.Show();

        }

        private void LnkEditPatientPayment_Click(object sender, RoutedEventArgs e)
        {
            HyperlinkButton lnkEditPaymentPayment = (HyperlinkButton)(sender);
            CustomFormattedPatientPayments patientPayments = (CustomFormattedPatientPayments)(lnkEditPaymentPayment.DataContext);

            if (patientPayments.previouslyApplied == 0)
            {
                var query = from pp in patientPaymentDomainContext.GetPatient_paymentQuery()
                            where pp.patient_payment_id == patientPayments.patientPaymentId
                            select pp;
                LoadOperation<patient_payment> loadPPOp = patientPaymentDomainContext.Load(query);
                loadPPOp.Completed += new EventHandler(loadPPOp_Completed);
            }
            else
            {
                InformationWindow informationWindow = new InformationWindow("Cannot edit this patient payment as it has been applied to one or more charges.");
                informationWindow.Show();
            }
        }

        private void LnkPatientPaymentDelete_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                HyperlinkButton lnkDeletePaymentPayment = (HyperlinkButton)(sender);
                CustomFormattedPatientPayments patientPayments = (CustomFormattedPatientPayments)(lnkDeletePaymentPayment.DataContext);

                var query = from pp in patientPaymentDomainContext.GetPatient_paymentQuery()
                            where pp.patient_payment_id == patientPayments.patientPaymentId
                            select pp;

                LoadOperation<patient_payment> loadPPayments = patientPaymentDomainContext.Load(query);
                loadPPayments.Completed += new EventHandler(loadPPayments_Completed);
            }
            catch (Exception ex) { MessageBox.Show(ex.Message); }
        }

        void loadPPayments_Completed(object sender, EventArgs e)
        {
            try
            {
                LoadOperation<patient_payment> loadPPayments = (LoadOperation<patient_payment>)sender;
                if (!loadPPayments.HasError)
                {
                    if (loadPPayments.Entities.Count() > 0)
                    {
                        patient_payment patientPaymentObj = loadPPayments.Entities.FirstOrDefault();
                        patientPaymentDomainContext.patient_payments.Remove(patientPaymentObj);
                        if (patientPaymentDomainContext.HasChanges)
                        {
                            SubmitOperation submitOp = patientPaymentDomainContext.SubmitChanges();
                            submitOp.Completed += new EventHandler(submitOp_Completed);
                        }
                    }
                }
                else
                {
                    MessageBox.Show(loadPPayments.Error.Message);
                    loadPPayments.MarkErrorAsHandled();
                }
            }
            catch (Exception ex) { MessageBox.Show(ex.Message); }
        }

        void submitOp_Completed(object sender, EventArgs e)
        {
            SuccessWindow successWindow;
            SubmitOperation op = (SubmitOperation)sender;
            if (op.HasError)
            {
                op.MarkErrorAsHandled();
                if (op.Error.Message.Contains("DomainOperationException"))
                {
                    MessageBox.Show("Patient payment has already been in use, Cannot delete patient payment");
                }
                else if (op.Error.Message.Contains("REFERENCE"))
                {
                    MessageBox.Show("Patient payment has already been in use, Cannot delete patient payment");
                }
                else
                    MessageBox.Show(op.Error.Message);

                patientPaymentDomainContext.RejectChanges();
            }
            else
            {
                successWindow = new SuccessWindow("Patient payment deleted successfully.");
                successWindow.ShowDialog();
                if (DdlPaymentStatus.SelectedIndex == 0)
                    LoadPendingAllocationData(patientPaymentPatientID);
                else if (DdlPaymentStatus.SelectedIndex == 1)
                    LoadAllPatientPayments(patientPaymentPatientID);

                UpdateTopUnallocatedAmtAndBalanceDue(patientPaymentPatientID);
            }
        }

        private void LnkInsurancePaymentDelete_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                HyperlinkButton lnkDeleteInsurancePayment = (HyperlinkButton)(sender);
                CustomFormattedInsurancePayment patientPayments = (CustomFormattedInsurancePayment)(lnkDeleteInsurancePayment.DataContext);

                var query = from ip in insurancePaymentDomainContext.GetInsurance_paymentQuery()
                            where ip.insurance_payment_id == patientPayments.insurance_payment_id
                            select ip;

                LoadOperation<insurance_payment> loadIPayments = insurancePaymentDomainContext.Load(query);
                loadIPayments.Completed += new EventHandler(loadIPayments_Completed);
            }
            catch (Exception ex) { MessageBox.Show(ex.Message); }
        }

        void loadIPayments_Completed(object sender, EventArgs e)
        {
            try
            {
                LoadOperation<insurance_payment> loadIPayments = (LoadOperation<insurance_payment>)sender;
                if (!loadIPayments.HasError)
                {
                    if (loadIPayments.Entities.Count() > 0)
                    {
                        insurance_payment insurancePaymentObj = loadIPayments.Entities.FirstOrDefault();
                        insurancePaymentDomainContext.insurance_payments.Remove(insurancePaymentObj);
                        if (insurancePaymentDomainContext.HasChanges)
                        {
                            SubmitOperation submitInsurancePaymentOp = insurancePaymentDomainContext.SubmitChanges();
                            submitInsurancePaymentOp.Completed += new EventHandler(submitInsurancePaymentOp_Completed);
                        }
                    }
                }
                else
                {
                    MessageBox.Show(loadIPayments.Error.Message);
                    loadIPayments.MarkErrorAsHandled();
                }
            }
            catch (Exception ex) { MessageBox.Show(ex.Message); }
        }

        void submitInsurancePaymentOp_Completed(object sender, EventArgs e)
        {
            SuccessWindow successWindow;
            SubmitOperation op = (SubmitOperation)sender;
            if (op.HasError)
            {
                op.MarkErrorAsHandled();
                if (op.Error.Message.Contains("DomainOperationException"))
                {
                    MessageBox.Show("Insurance payment has already been in use, Cannot delete insurance payment");
                }
                else if (op.Error.Message.Contains("REFERENCE"))
                {
                    MessageBox.Show("Insurance payment has already been in use, Cannot delete insurance payment");
                }
                else
                    MessageBox.Show(op.Error.Message);

                insurancePaymentDomainContext.RejectChanges();
            }
            else
            {
                successWindow = new SuccessWindow("Insurance payment deleted successfully.");
                successWindow.ShowDialog();
                BtnIPGetPaymentAllocations_Click(null, null);
            }
        }

        //private void DdlIPAdjTransactionType_SelectionChanged(object sender, Telerik.Windows.Controls.SelectionChangedEventArgs e)
        //{
        //    if (((RadComboBox)sender).SelectedIndex != -1)
        //    {
        //        var adjTransCodeQuery = from adjTransCode in financialCodeDomainContext.GetFinancial_codeQuery()
        //                                where adjTransCode.financial_code_type == ((financial_code_type)((RadComboBox)sender).SelectedItem).financial_code_type1
        //                                select adjTransCode;

        //        LoadOperation<financial_code> loadAdjTransCodeOp = financialCodeDomainContext.Load(adjTransCodeQuery);
        //        loadAdjTransCodeOp.Completed += new EventHandler(loadAdjTransCodeOp_Completed);
        //    }
        //}

        //void loadAdjTransCodeOp_Completed(object sender, EventArgs e)
        //{
        //    try
        //    {
        //        LoadOperation<financial_code> loadAdjTransCodeOp = (LoadOperation<financial_code>)sender;
        //        if (!loadAdjTransCodeOp.HasError)
        //        {
        //            if (loadAdjTransCodeOp.Entities.Count() > 0)
        //            {
        //                this.DdlAdjustmentTransactionCode.ItemsSource = loadAdjTransCodeOp.Entities;
        //            }
        //            else
        //                this.DdlAdjustmentTransactionCode.ItemsSource = null;
        //        }
        //        else
        //        {
        //            MessageBox.Show(loadAdjTransCodeOp.Error.Message);
        //            loadAdjTransCodeOp.MarkErrorAsHandled();
        //        }
        //    }
        //    catch (Exception ex) { MessageBox.Show(ex.Message); }
        //}

        //private void DdlIPWriteOffTransactionType_SelectionChanged(object sender, Telerik.Windows.Controls.SelectionChangedEventArgs e)
        //{
        //    if (((RadComboBox)sender).SelectedIndex != -1)
        //    {
        //        var writeOffTransCodeQuery = from writeOffTransCode in financialCodeDomainContext.GetFinancial_codeQuery()
        //                                     where writeOffTransCode.financial_code_type == ((financial_code_type)((RadComboBox)sender).SelectedItem).financial_code_type1
        //                                     select writeOffTransCode;

        //        LoadOperation<financial_code> loadWriteOffTransCodeOp = financialCodeDomainContext.Load(writeOffTransCodeQuery);
        //        loadWriteOffTransCodeOp.Completed += new EventHandler(loadWriteOffTransCodeOp_Completed);
        //    }
        //}

        //void loadWriteOffTransCodeOp_Completed(object sender, EventArgs e)
        //{
        //    try
        //    {
        //        LoadOperation<financial_code> loadWriteOffTransCodeOp = (LoadOperation<financial_code>)sender;
        //        if (!loadWriteOffTransCodeOp.HasError)
        //        {
        //            if (loadWriteOffTransCodeOp.Entities.Count() > 0)
        //            {
        //                this.DdlWriteOffTransactionCode.ItemsSource = loadWriteOffTransCodeOp.Entities;
        //            }
        //            else
        //                this.DdlWriteOffTransactionCode.ItemsSource = null;
        //        }
        //        else
        //        {
        //            MessageBox.Show(loadWriteOffTransCodeOp.Error.Message);
        //            loadWriteOffTransCodeOp.MarkErrorAsHandled();
        //        }
        //    }
        //    catch (Exception ex) { MessageBox.Show(ex.Message); }
        //}

        private void BtnTopFindPatient_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                UserControls.FindPatientForm searchPatient = new UserControls.FindPatientForm(this);
                searchPatient.DdlPatientStatus.ItemsSource = Statuses;
                searchPatient.DdlPatientStatus.SelectedIndex = 1;
                searchPatient.Show();
                searchPatient.BindPatientStatuses();
                searchPatient.Unloaded += new RoutedEventHandler(searchPatient_Unloaded);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        void searchPatient_Unloaded(object sender, RoutedEventArgs e)
        {
            try
            {
                FindPatientForm OpenFindPatientForm = (FindPatientForm)sender;
                LblTopUnallocatedPayentsValue.Text = LblTopAccountBalanceValue.Text = string.Empty;

                if (OpenFindPatientForm.RadGvEmployee.SelectedItem != null)
                {
                    CustomFormattedPatient dbPatient = (CustomFormattedPatient)OpenFindPatientForm.RadGvEmployee.SelectedItem;
                    LoadPatientDetails(dbPatient);
                    CheckBillerNoteExist(dbPatient.patientId);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void LoadPatientDetails(CustomFormattedPatient dbPatient)
        {
            try
            {
                this.BtnBillersNotes.IsEnabled = true;
                BtnBillersNotesInsuranePayment.IsEnabled = true;
                BtnBillersNotesPatientPayment.IsEnabled = true;
                BtnBillersAdjustmentWriteOffs.IsEnabled = true;
                BtnBillersReversals.IsEnabled = true;
                App.global_payments_accounts_PatientObj = dbPatient;

                HypLnkTopPatient.Content = dbPatient.last_name.ToUpper() + ", " + dbPatient.first_name;
                if (dbPatient.date_of_birth != null)
                    LblTopDOBValue.Text = DateTime.Parse(dbPatient.date_of_birth.Value.ToString()).ToString("MM/dd/yyyy");
                else
                    LblTopDOBValue.Text = string.Empty;

                if (dbPatient.unique_number != null && dbPatient.unique_number.Trim().Length != 0)
                    LblTopUniqueNumber.Text = dbPatient.unique_number.Trim();
                else
                    LblTopUniqueNumber.Text = string.Empty;

                int patientID = dbPatient.patientId;
                this.LblTopPrimaryInsurance.Text = this.LblTopSecondaryInsurance.Text = this.LblTopTertiaryInsurance.Text = string.Empty;
                patientObj = dbPatient;

                if (RadTabPatientPayment.IsSelected)
                {
                    gPatientPayment = null;
                    ClearPatientPaymentTabFields();
                    patientPaymentPatientID = dbPatient.patientId;
                    RadGvPayments.ItemsSource = null;
                    DdlPaymentStatus.SelectedIndex = -1;
                    DdlPaymentStatus.SelectedIndex = 0;

                    PatientGuarantorDomainContext patientGuarantorDomainContext = new PatientGuarantorDomainContext();
                    var guarantorQuery = from guarantor in patientGuarantorDomainContext.GetPatientGuarantorDataQuery(patientPaymentPatientID) select guarantor;

                    LoadOperation<CustomFormattedGuarantor> loadPatientGuarantorOp = patientGuarantorDomainContext.Load(guarantorQuery);
                    loadPatientGuarantorOp.Completed += new EventHandler(loadinglPatientGuarantor_Completed);
                }
                else if (RadTabInsurancePayment.IsSelected)
                {
                    this.DdlIPPaymentMethod.SelectedItem = "Check";
                }
                else if (RadTabAdjustmentWriteOffs.IsSelected)
                {
                    gPatientPayment = null;
                    ClearPatientPaymentTabFields();
                    adjWriteOffPatientId = dbPatient.patientId;
                    LoadBills();
                }

                RadGvPaymentSearch.ItemsSource = null;

                insuranceProviderDdlsBatch = new DomainContextLoadBatch(InsuranceProviderDataLoadComplete);

                PatientInsuranceProviderDomainContext patientInsuranceProviderDomainContext = new PatientInsuranceProviderDomainContext();
                var patientInsuranceQuery = from patInsurance in patientInsuranceProviderDomainContext.GetCustomFormattedInsuranceQuery(patientID) select patInsurance;

                LoadOperation<CustomFormattedInsurance> loadTopPatientInsOp = patientInsuranceProviderDomainContext.Load(patientInsuranceQuery);
                loadTopPatientInsOp.Completed += new EventHandler(loadTopPatientInsOp_Completed);
                insuranceProviderDdlsBatch.Add(loadTopPatientInsOp);

                InsuranceProviderDomainContext insuranceProviderDomainContext = new InsuranceProviderDomainContext();

                if (RadInsuranceProviderCode.IsChecked.Value)
                {
                    var patientInsuranceProvidersQuery = from patInsurance in insuranceProviderDomainContext.GetCustomFormattedInsuranceProviderByCodeQuery(patientID) select patInsurance;
                    LoadOperation<CustomFormattedInsuranceProvider> loadPatientInsOp = insuranceProviderDomainContext.Load(patientInsuranceProvidersQuery);
                    loadPatientInsOp.Completed += new EventHandler(loadPatientInsOp_Completed);
                    insuranceProviderDdlsBatch.Add(loadPatientInsOp);
                }
                else
                {
                    var patientInsuranceProvidersQuery = from patInsurance in insuranceProviderDomainContext.GetCustomFormattedInsuranceProviderByNameQuery(patientID) select patInsurance;
                    LoadOperation<CustomFormattedInsuranceProvider> loadPatientInsOp = insuranceProviderDomainContext.Load(patientInsuranceProvidersQuery);
                    loadPatientInsOp.Completed += new EventHandler(loadPatientInsOp_Completed);
                    insuranceProviderDdlsBatch.Add(loadPatientInsOp);
                }

                UpdateTopUnallocatedAmtAndBalanceDue(patientID);
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        void loadPatientInsOp_Completed(object sender, EventArgs e)
        {
            try
            {
                LoadOperation<CustomFormattedInsuranceProvider> loadPatientInsOp = (LoadOperation<CustomFormattedInsuranceProvider>)sender;
                if (!loadPatientInsOp.HasError && loadPatientInsOp.Entities.Count() > 0)
                {
                    DdlInsuranceProvider.DisplayMemberPath = "insurance_provider_name";
                    DdlInsuranceProvider.SelectedValuePath = "insurance_provider_id";
                    DdlInsuranceProvider.ItemsSource = loadPatientInsOp.Entities;

                    DdlIPInsuranceProvider.DisplayMemberPath = "insurance_provider_name";
                    DdlIPInsuranceProvider.SelectedValuePath = "insurance_provider_id";
                    DdlIPInsuranceProvider.ItemsSource = loadPatientInsOp.Entities;
                }
            }
            catch (Exception ex) { MessageBox.Show(ex.Message); }
        }

        private void UpdateTopUnallocatedAmtAndBalanceDue(int patientID)
        {
            try
            {
                PaymentTransactionDomainContext paymentTransactionDomainContext = new PaymentTransactionDomainContext();
                var patAccountSummary = from patAccSum in paymentTransactionDomainContext.GetPatient_account_summaryQuery()
                                        where patAccSum.patient_id == patientID
                                        select patAccSum;

                LoadOperation<patient_account_summary> loadTopPatAccSumInsOp = paymentTransactionDomainContext.Load(patAccountSummary);
                loadTopPatAccSumInsOp.Completed += new EventHandler(loadTopPatAccSumInsOp_Completed);

                PatientPaymentDomainContext headerPatientPaymentDomainContext = new PatientPaymentDomainContext();
                var patPaymentQuery = from patPaymentObj in headerPatientPaymentDomainContext.GetPatient_paymentQuery()
                                      where patPaymentObj.patient_id == patientID && patPaymentObj.flag_pending_allocation == true
                                      select patPaymentObj;

                LoadOperation<patient_payment> loadTopPatPaymentOp = headerPatientPaymentDomainContext.Load(patPaymentQuery);
                loadTopPatPaymentOp.Completed += new EventHandler(loadTopPatPaymentOp_Completed);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        void loadTopPatPaymentOp_Completed(object sender, EventArgs e)
        {
            try
            {
                LoadOperation<patient_payment> loadPatPaymentOp = (LoadOperation<patient_payment>)sender;
                if (!loadPatPaymentOp.HasError && loadPatPaymentOp.Entities.Count() > 0)
                {
                    decimal paymentAmount = 0, totalAmountApplied = 0;
                    foreach (patient_payment item in loadPatPaymentOp.Entities)
                    {
                        paymentAmount += item.payment_amount;
                        totalAmountApplied += (item.total_amount_applied_to_charges.HasValue ? item.total_amount_applied_to_charges.Value : 0);
                    }

                    this.LblTopUnallocatedPayentsValue.Text = (paymentAmount - totalAmountApplied).ToString("0.00");
                }
                else
                    this.LblTopUnallocatedPayentsValue.Text = (0).ToString("0.00");
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        void loadTopPatAccSumInsOp_Completed(object sender, EventArgs e)
        {
            try
            {
                LoadOperation<patient_account_summary> loadPatAccSumInsOp = (LoadOperation<patient_account_summary>)sender;
                if (!loadPatAccSumInsOp.HasError && loadPatAccSumInsOp.Entities.Count() > 0)
                {
                    patient_account_summary patAccSummObj = loadPatAccSumInsOp.Entities.FirstOrDefault();
                    LblTopAccountBalanceValue.Text = ((patAccSummObj.patient_balance_due.HasValue ? patAccSummObj.patient_balance_due.Value : 0) + (patAccSummObj.insurance_balance_due.HasValue ? patAccSummObj.insurance_balance_due.Value : 0)).ToString("0.00");
                    LblTopPatBalDueValue.Text = (patAccSummObj.patient_balance_due.HasValue ? patAccSummObj.patient_balance_due.Value : 0).ToString("0.00");
                    LblTopInsuranceBalDueValue.Text = (patAccSummObj.insurance_balance_due.HasValue ? patAccSummObj.insurance_balance_due.Value : 0).ToString("0.00");

                    LblTopTotalPaymentValue.Text = ((patAccSummObj.total_patient_payments.HasValue ? patAccSummObj.total_patient_payments.Value : 0) + (patAccSummObj.total_insurance_payments.HasValue ? patAccSummObj.total_insurance_payments.Value : 0)).ToString("0.00");// + (patAccSummObj.total_adjustments.HasValue ? patAccSummObj.total_adjustments.Value : 0) + (patAccSummObj.total_write_off_amount.HasValue ? patAccSummObj.total_write_off_amount.Value : 0)).ToString("0.00");
                    LblTopInsurancePaymentValue.Text = (patAccSummObj.total_insurance_payments.HasValue ? patAccSummObj.total_insurance_payments.Value : 0).ToString("0.00");
                    LblTopPatientPaymentValue.Text = (patAccSummObj.total_patient_payments.HasValue ? patAccSummObj.total_patient_payments.Value : 0).ToString("0.00");

                    LblTopAdjPaymentValue.Text = (patAccSummObj.total_adjustments.HasValue ? patAccSummObj.total_adjustments.Value : 0).ToString("0.00");
                    LblTopWriteOffPaymentValue.Text = (patAccSummObj.total_write_off_amount.HasValue ? patAccSummObj.total_write_off_amount.Value : 0).ToString("0.00");
                }
                else
                    LblTopAccountBalanceValue.Text = LblTopPatBalDueValue.Text = LblTopInsuranceBalDueValue.Text = LblTopTotalPaymentValue.Text = LblTopInsurancePaymentValue.Text = LblTopPatientPaymentValue.Text = LblTopWriteOffPaymentValue.Text = LblTopAdjPaymentValue.Text = (0).ToString("0.00");
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        void loadTopPatientInsOp_Completed(object sender, EventArgs e)
        {
            try
            {
                patientCurrentPrimaryInsuranceProviderObj = null;
                LoadOperation<CustomFormattedInsurance> loadPatientInsOp = (LoadOperation<CustomFormattedInsurance>)sender;
                if (!loadPatientInsOp.HasError && loadPatientInsOp.Entities.Count() > 0)
                {
                    foreach (CustomFormattedInsurance patientInsuranceProviderObj in loadPatientInsOp.Entities)
                    {
                        //patient_insurance_provider patientInsuranceProviderObj = loadOp.Entities.First();
                        if (patientInsuranceProviderObj.order.Equals(1))
                        {
                            //patientPrimaryInsuranceObject = patientInsuranceProviderObj;
                            if (patientInsuranceProviderObj.insurance_name != null)
                                this.LblTopPrimaryInsurance.Text = patientInsuranceProviderObj.insurance_name;
                            else
                                this.LblTopPrimaryInsurance.Text = string.Empty;

                            patientCurrentPrimaryInsuranceProviderObj = patientInsuranceProviderObj;
                        }
                        if (patientInsuranceProviderObj.order.Equals(2))
                        {
                            if (patientInsuranceProviderObj.insurance_name != null)
                                this.LblTopSecondaryInsurance.Text = patientInsuranceProviderObj.insurance_name;
                            else
                                this.LblTopSecondaryInsurance.Text = string.Empty;
                        }
                        if (patientInsuranceProviderObj.order.Equals(3))
                        {
                            if (patientInsuranceProviderObj.insurance_name != null)
                                this.LblTopTertiaryInsurance.Text = patientInsuranceProviderObj.insurance_name;
                            else
                                this.LblTopTertiaryInsurance.Text = string.Empty;
                        }

                    }
                }
            }
            catch (Exception ex) { MessageBox.Show(ex.Message); }
        }

        private void TextBox_TextChanged(object sender, TextChangedEventArgs e)
        {
            try
            {
                TextBox ctrl = sender as TextBox;
                if (ctrl != null)
                {
                    if (ctrl.Text.Trim() == string.Empty)
                        ctrl.Text = "0";
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void RadInsuranceProviderCode_Checked(object sender, RoutedEventArgs e)
        {
            try
            {
                InsuranceProviderDomainContext insuranceProviderDomainContext = new InsuranceProviderDomainContext();
                if (patientObj == null)
                {
                    var query = from ip in insuranceProviderDomainContext.GetCustomFormattedInsurance_providerByCodeQuery()
                                orderby ip.insurance_provider_name
                                where ip.inactive == false
                                select ip;

                    System.ServiceModel.DomainServices.Client.LoadOperation<CustomFormattedInsuranceProvider> InsuranceProviderByCodeLoad = insuranceProviderDomainContext.Load(query);
                    InsuranceProviderByCodeLoad.Completed += new EventHandler(InsuranceProviderByCodeLoad_Completed);
                }
                else
                {
                    var patientInsuranceProvidersQuery = from patInsurance in insuranceProviderDomainContext.GetCustomFormattedInsuranceProviderByCodeQuery(patientObj.patientId) select patInsurance;
                    LoadOperation<CustomFormattedInsuranceProvider> loadPatientInsOp = insuranceProviderDomainContext.Load(patientInsuranceProvidersQuery);
                    loadPatientInsOp.Completed += new EventHandler(loadPatientInsOp_Completed);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        void InsuranceProviderByCodeLoad_Completed(object sender, EventArgs e)
        {
            try
            {
                LoadOperation<CustomFormattedInsuranceProvider> InsuranceProviderByCodeLoad = (LoadOperation<CustomFormattedInsuranceProvider>)sender;
                if (!InsuranceProviderByCodeLoad.HasError && InsuranceProviderByCodeLoad.Entities.Count() > 0)
                {
                    CustomFormattedInsuranceProvider selectedItem = null;
                    if (DdlInsuranceProvider.SelectedItem != null)
                    {
                        selectedItem = (CustomFormattedInsuranceProvider)DdlInsuranceProvider.SelectedItem;
                    }
                    DdlInsuranceProvider.ItemsSource = null;
                    DdlInsuranceProvider.ItemsSource = InsuranceProviderByCodeLoad.Entities;

                    if (selectedItem != null)
                        DdlInsuranceProvider.SelectedValue = selectedItem.insurance_provider_id;
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void RadInsuranceProviderName_Checked(object sender, RoutedEventArgs e)
        {
            try
            {
                InsuranceProviderDomainContext insuranceProviderDomainContext = new InsuranceProviderDomainContext();
                if (patientObj == null)
                {
                    var query = from ip in insuranceProviderDomainContext.GetCustomFormattedInsurance_providerQuery()
                                orderby ip.insurance_provider_name
                                where ip.inactive == false
                                select ip;

                    System.ServiceModel.DomainServices.Client.LoadOperation<CustomFormattedInsuranceProvider> InsuranceProviderByNameLoad = insuranceProviderDomainContext.Load(query);
                    InsuranceProviderByNameLoad.Completed += new EventHandler(InsuranceProviderByNameLoad_Completed);
                }
                else
                {
                    var patientInsuranceProvidersQuery = from patInsurance in insuranceProviderDomainContext.GetCustomFormattedInsuranceProviderByNameQuery(patientObj.patientId) select patInsurance;
                    LoadOperation<CustomFormattedInsuranceProvider> loadPatientInsOp = insuranceProviderDomainContext.Load(patientInsuranceProvidersQuery);
                    loadPatientInsOp.Completed += new EventHandler(loadPatientInsOp_Completed);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        void InsuranceProviderByNameLoad_Completed(object sender, EventArgs e)
        {
            try
            {
                LoadOperation<CustomFormattedInsuranceProvider> InsuranceProviderByNameLoad = (LoadOperation<CustomFormattedInsuranceProvider>)sender;
                if (!InsuranceProviderByNameLoad.HasError && InsuranceProviderByNameLoad.Entities.Count() > 0)
                {
                    CustomFormattedInsuranceProvider selectedItem = null;
                    if (DdlInsuranceProvider.SelectedItem != null)
                    {
                        selectedItem = (CustomFormattedInsuranceProvider)DdlInsuranceProvider.SelectedItem;
                    }
                    DdlInsuranceProvider.ItemsSource = null;
                    DdlInsuranceProvider.ItemsSource = InsuranceProviderByNameLoad.Entities;

                    if (selectedItem != null)
                        DdlInsuranceProvider.SelectedValue = selectedItem.insurance_provider_id;
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void BtnTopClear_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                App.global_payments_accounts_PatientObj = patientObj = null;
                this.BtnBillersNotes.IsEnabled = false;
                this.BtnBillersNotesInsuranePayment.IsEnabled = false;
                BtnBillersNotesPatientPayment.IsEnabled = false;
                BtnBillersAdjustmentWriteOffs.IsEnabled = false;
                BtnBillersReversals.IsEnabled = false;
                //LblTopPatient.Text = string.Empty;
                HypLnkTopPatient.Content = string.Empty;
                //LblTopSSNValue.Text = string.Empty;
                LblTopDOBValue.Text = string.Empty;
                //LblTopPhoneValue.Text = string.Empty;
                LblTopUniqueNumber.Text = string.Empty;
                LblTopAccountBalanceValue.Text = string.Empty;
                LblTopUnallocatedPayentsValue.Text = string.Empty;
                LblTopPrimaryInsurance.Text = string.Empty;
                LblTopSecondaryInsurance.Text = string.Empty;
                LblTopTertiaryInsurance.Text = string.Empty;

                LblTopInsuranceBalDueValue.Text = LblTopPatBalDueValue.Text = string.Empty;
                LblTopPatientPaymentValue.Text = LblTopInsurancePaymentValue.Text = LblTopTotalPaymentValue.Text = LblTopWriteOffPaymentValue.Text = LblTopAdjPaymentValue.Text = string.Empty;
                this.BtnBillersNotes.Background = new Button().Background;
                //Clear Patient Payments Tab
                gPatientPayment = null;
                ClearPatientPaymentTabFields();
                RadGvPayments.ItemsSource = null;
                DdlPaymentStatus.SelectedIndex = -1;
                patientPaymentPatientID = 0;

                //Clear Insurance Payment Tab
                ClearIPControls();
                RadInsuranceProviderCode_Checked(null, null);

                //Clear Adjustment/Write-off Tab
                ClearWriteOffControls();

                FillInsuraneProvider();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void BtnBillersNotes_Click(object sender, RoutedEventArgs e)
        {
            if (patientObj != null)
            {
                Button b = sender as Button;
                AddEditBillersNote billersNote;

                if (this.justAddedPaymentId != 0)
                    billersNote = new AddEditBillersNote(patientObj, b.Tag.ToString(), justAddedPaymentId);
                else
                    billersNote = new AddEditBillersNote(patientObj, b.Tag.ToString());
                billersNote.Closed += new EventHandler(billersNote_Closed);
                billersNote.Show();
            }
        }

        void billersNote_Closed(object sender, EventArgs e)
        {
            if (patientObj != null)
                this.CheckBillerNoteExist(patientObj.patientId);
        }

        private void DpDateFrom_KeyUp(object sender, KeyEventArgs e)
        {
            try
            {

                RadDatePicker dpDatePicker = (RadDatePicker)sender;
                int DateLength = dpDatePicker.CurrentDateTimeText.Trim().Length;

                if (dpDatePicker.CurrentDateTimeText.Trim().Contains("/") == false)
                {
                    switch (DateLength)
                    {
                        case 8:
                            this.Focus();
                            dpDatePicker.Focus();
                            break;
                    }

                }
                else
                {
                    switch (DateLength)
                    {
                        case 10:
                            this.Focus();
                            dpDatePicker.Focus();
                            break;
                    }
                }



            }
            catch (Exception ex)
            {

            }
        }

        private void DpDateFrom_ParseDateTimeValue(object sender, Telerik.Windows.Controls.ParseDateTimeEventArgs args)
        {
            if (!args.IsParsingSuccessful) //ie: Can't parse the date the user has entered
            {
                DateTime time;

                if (CommonMethods.TryParseNumberAsDate(args.TextToParse, out time))
                {
                    args.Result = time;

                    args.IsParsingSuccessful = true;
                }
                else
                {
                    RadDatePicker dpDatePicker = (RadDatePicker)sender;
                    dpDatePicker.CurrentDateTimeText = null;
                    dpDatePicker.DateTimeText = "";
                    dpDatePicker.DateTimeWatermarkContent = "";
                    //dpDatePicker.SelectedDate = null;
                }
            }
        }

        private void BtnSearchPayments_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                string dateFrom = string.Empty, dateTo = string.Empty, paymentType = string.Empty, referenceNumber = string.Empty;

                if (DpDateFrom.SelectedDate != null)
                {
                    dateFrom = DpDateFrom.SelectedDate.Value.ToString();
                }
                if (DpDateTo.SelectedDate != null)
                {
                    dateTo = DpDateTo.SelectedDate.Value.ToString();
                }

                if (ChkRequiredPatAmt.IsChecked.Value)
                    paymentType = ChkRequiredPatAmt.Content.ToString();
                else if (RadAll.IsChecked == true)
                    paymentType = RadAll.Content.ToString();
                else if (RadPatient.IsChecked == true)
                    paymentType = RadPatient.Content.ToString();
                else if (RadInsurance.IsChecked == true)
                    paymentType = RadInsurance.Content.ToString();
                else if (RadAdjustmentWriteOff.IsChecked == true)
                    paymentType = RadAdjustmentWriteOff.Content.ToString();
                else if (RadNonProceduralCharge.IsChecked == true)
                    paymentType = RadNonProceduralCharge.Content.ToString();

                if (TxtReferenceNumber.Text.Trim().Length > 0)
                    referenceNumber = TxtReferenceNumber.Text.Trim();

                if (paymentType != ChkRequiredPatAmt.Content.ToString())
                {
                    paymentTransactionDomainContext = new PaymentTransactionDomainContext();
                    var query = from paymentTransaction in paymentTransactionDomainContext.GetPaymentTransactionCustomDataQuery((patientObj != null ? patientObj.patientId : 0), dateFrom, dateTo, paymentType, referenceNumber)
                                select paymentTransaction;
                    LoadOperation<CustomFormattedPaymentTransaction> paymentTransactionLoad = paymentTransactionDomainContext.Load(query);
                    paymentTransactionLoad.Completed += new EventHandler(paymentTransactionLoad_Completed);
                    hasRequiredPatientAmount = false;
                }
                else if (paymentType == ChkRequiredPatAmt.Content.ToString())
                {
                    paymentTransactionDomainContext = new PaymentTransactionDomainContext();
                    var query = from paymentTransaction in paymentTransactionDomainContext.GetRequiredPatientAmountCustomDataQuery((patientObj != null ? patientObj.patientId : 0), dateFrom, dateTo)
                                select paymentTransaction;
                    LoadOperation<CustomFormattedPatientAccountActivity> reqPAALoad = paymentTransactionDomainContext.Load(query);
                    reqPAALoad.Completed += new EventHandler(reqPAALoad_Completed);
                    hasRequiredPatientAmount = true;
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        void reqPAALoad_Completed(object sender, EventArgs e)
        {
            try
            {
                RadGvPaymentSearch.Columns[2].IsVisible = false;
                RadGvPaymentSearch.Columns[3].IsVisible = false;
                RadGvPaymentSearch.Columns[4].IsVisible = false;
                RadGvPaymentSearch.Columns[6].Header = "Date Created";

                LoadOperation<CustomFormattedPatientAccountActivity> reqPAALoad = (LoadOperation<CustomFormattedPatientAccountActivity>)sender;
                if (reqPAALoad.HasError)
                {
                    reqPAALoad.MarkErrorAsHandled();
                    MessageBox.Show(reqPAALoad.Error.Message);
                }
                if (reqPAALoad.Entities.Count() > 0)
                {
                    RadGvPaymentSearch.ItemsSource = null;
                    RadGvPaymentSearch.ItemsSource = reqPAALoad.Entities.Distinct();
                }
                else
                {
                    RadGvPaymentSearch.ItemsSource = null;
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        void paymentTransactionLoad_Completed(object sender, EventArgs e)
        {
            try
            {
                RadGvPaymentSearch.Columns[2].IsVisible = true;
                RadGvPaymentSearch.Columns[3].IsVisible = true;
                RadGvPaymentSearch.Columns[4].IsVisible = true;
                RadGvPaymentSearch.Columns[6].Header = "Payment Date";

                LoadOperation<CustomFormattedPaymentTransaction> paymentTransactionLoad = (LoadOperation<CustomFormattedPaymentTransaction>)sender;
                if (paymentTransactionLoad.HasError)
                {
                    paymentTransactionLoad.MarkErrorAsHandled();
                    MessageBox.Show(paymentTransactionLoad.Error.Message);
                }
                if (paymentTransactionLoad.Entities.Count() > 0)
                {
                    RadGvPaymentSearch.ItemsSource = null;
                    RadGvPaymentSearch.ItemsSource = paymentTransactionLoad.Entities.Distinct();
                }
                else
                {
                    RadGvPaymentSearch.ItemsSource = null;
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void BtnClearSearch_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                ClearPaymentSearchReportTab();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void ClearPaymentSearchReportTab()
        {
            try
            {
                DpDateFrom.SelectedDate = DpDateTo.SelectedDate = null;
                RadAll.IsChecked = true;
                TxtReferenceNumber.Text = string.Empty;
                RadAll.IsEnabled = RadPatient.IsEnabled = RadInsurance.IsEnabled = RadAdjustmentWriteOff.IsEnabled = RadNonProceduralCharge.IsEnabled = true;
                ChkRequiredPatAmt.IsChecked = false;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        private void LnkNoteRever_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                Button btn = (Button)sender;

                if (!hasRequiredPatientAmount)
                {
                    CustomFormattedPaymentTransaction customFormattedPaymentTransaction = (CustomFormattedPaymentTransaction)btn.DataContext;

                    if (customFormattedPaymentTransaction != null)
                    {
                        AddEditBillersNote billersNote = new AddEditBillersNote(this.patientObj, "Reversal", customFormattedPaymentTransaction.id);

                        billersNote.Closed += new EventHandler(billersNote_Closed);
                        billersNote.Show();
                    }
                }
                else
                {
                    customFormattedPatientAccountActivity = (CustomFormattedPatientAccountActivity)btn.DataContext;
                    AddEditBillersNote billersNote = new AddEditBillersNote(this.patientObj, "Reversal", customFormattedPatientAccountActivity.id);

                    billersNote.Closed += new EventHandler(billersNote_Closed);
                    billersNote.Show();
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }
        private void BtnReverse_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                Button btn = (Button)sender;

                if (!hasRequiredPatientAmount)
                {
                    CustomFormattedPaymentTransaction customFormattedPaymentTransaction = (CustomFormattedPaymentTransaction)btn.DataContext;

                    if (customFormattedPaymentTransaction != null)
                    {
                        decimal maxReversalAmount = customFormattedPaymentTransaction.amount - (customFormattedPaymentTransaction.totalReversedAmount.HasValue ? customFormattedPaymentTransaction.totalReversedAmount.Value : 0);
                        FullPartialPaymentDialogue fullPartialPaymentDialogue = new FullPartialPaymentDialogue(customFormattedPaymentTransaction.id, maxReversalAmount);
                        fullPartialPaymentDialogue.Show();
                        fullPartialPaymentDialogue.Closed += new EventHandler(fullPartialPaymentDialogue_Closed);
                    }
                }
                else
                {
                    customFormattedPatientAccountActivity = (CustomFormattedPatientAccountActivity)btn.DataContext;
                    InvokeOperation invokedDueReversalOp = paymentTransactionDomainContext.ReverseDueAmount(App.global_user.user_id, customFormattedPatientAccountActivity.id);
                    invokedDueReversalOp.Completed += new EventHandler(invokedDueReversalOp_Completed);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        void invokedDueReversalOp_Completed(object sender, EventArgs e)
        {
            try
            {
                InvokeOperation invokePTReversalOp = (InvokeOperation)sender;
                if (!invokePTReversalOp.HasError)
                {
                    if (invokePTReversalOp.Value != null)
                    {
                        if ((bool)invokePTReversalOp.Value)
                        {
                            SuccessWindow reversalWin = new SuccessWindow("Payment reversal successful.");
                            reversalWin.Show();
                            if (patientObj != null)
                                UpdateTopUnallocatedAmtAndBalanceDue(patientObj.patientId);
                            BtnSearchPayments_Click(null, null);
                        }
                    }
                }
                else
                {
                    invokePTReversalOp.MarkErrorAsHandled();
                    MessageBox.Show(invokePTReversalOp.Error.Message);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        void fullPartialPaymentDialogue_Closed(object sender, EventArgs e)
        {
            try
            {
                FullPartialPaymentDialogue fullPartialPaymentDialogue = ((FullPartialPaymentDialogue)sender);
                if (fullPartialPaymentDialogue.DialogResult == true)
                {
                    if (fullPartialPaymentDialogue.isPartialReversal)
                    {
                        InvokeOperation invokeReversalOp = paymentTransactionDomainContext.ReversePayment(fullPartialPaymentDialogue.paymentTransactionId, App.global_user.user_id, decimal.Parse(fullPartialPaymentDialogue.TxtReversalAmount.Value.ToString()), true, fullPartialPaymentDialogue.TxtReversalReason.Text.Trim());
                        invokeReversalOp.Completed += new EventHandler(invokeReversalOp_Completed);
                    }
                    else //Full Reversal
                    {
                        InvokeOperation invokeReversalOp = paymentTransactionDomainContext.ReversePayment(fullPartialPaymentDialogue.paymentTransactionId, App.global_user.user_id, 0, false, fullPartialPaymentDialogue.TxtReversalReason.Text.Trim());
                        invokeReversalOp.Completed += new EventHandler(invokeReversalOp_Completed);
                    }
                }
            }
            catch (Exception ex) { throw ex; }
        }

        void invokeReversalOp_Completed(object sender, EventArgs e)
        {
            try
            {
                InvokeOperation invokeReversalOp = (InvokeOperation)sender;
                if (!invokeReversalOp.HasError)
                {
                    if (invokeReversalOp.Value != null)
                    {
                        if ((bool)invokeReversalOp.Value)
                        {
                            SuccessWindow reversalWin = new SuccessWindow("Payment reversal successful.");
                            reversalWin.Show();
                            if (patientObj != null)
                                UpdateTopUnallocatedAmtAndBalanceDue(patientObj.patientId);
                            BtnSearchPayments_Click(null, null);
                        }
                    }
                }
                else
                {
                    invokeReversalOp.MarkErrorAsHandled();
                    MessageBox.Show(invokeReversalOp.Error.Message);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void CheckBox_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                CheckBox clickedCheckbox = (CheckBox)sender;
                CustomFormattedAdjWriteOffBillEdit customFormattedAdjWriteOffBillEdit = (CustomFormattedAdjWriteOffBillEdit)clickedCheckbox.DataContext;
                paymentTransactionDomainContext = new PaymentTransactionDomainContext();
                InvokeOperation invokeUpdateSuperbillFlagOp = paymentTransactionDomainContext.UpdateSuperbillPatientStmtFlag(customFormattedAdjWriteOffBillEdit.super_bill_id, clickedCheckbox.IsChecked.Value);
                invokeUpdateSuperbillFlagOp.Completed += new EventHandler(invokeUpdateSuperbillFlagOp_Completed);

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        void invokeUpdateSuperbillFlagOp_Completed(object sender, EventArgs e)
        {
            try
            {
                InvokeOperation invokeUpdateSuperbillFlagOp = (InvokeOperation)sender;
                if (invokeUpdateSuperbillFlagOp.HasError)
                {
                    InformationWindow infoWin = new InformationWindow();
                    infoWin.LblMessage.Text = "There was a problem in updating the patient statement flag [flag_do_not_send_patient_statement_for_this_bill].";
                    infoWin.Show();
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void HypLnkTopPatient_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                AccountSummary acctSummary = new AccountSummary(patientObj);
                acctSummary.Show();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void InsuranceProviderDataLoadComplete(DomainContextLoadBatch batch)
        {
            try
            {
                if (batch != null)
                {
                    if (batch.FailedOperationCount > 0)
                    {
                        MessageBox.Show("Load operation failed");
                        // Do Error handling
                    }
                    else
                    {
                        if (patientCurrentPrimaryInsuranceProviderObj != null)
                            this.DdlInsuranceProvider.SelectedValue = patientCurrentPrimaryInsuranceProviderObj.insurance_provider_Id;
                        else
                            this.DdlInsuranceProvider.SelectedIndex = -1;
                    }
                }
            }
            catch (Exception ex) { MessageBox.Show(ex.Message); }
        }

        private void ChkRequiredPatAmt_Checked(object sender, RoutedEventArgs e)
        {
            RadAll.IsEnabled = RadPatient.IsEnabled = RadInsurance.IsEnabled = RadAdjustmentWriteOff.IsEnabled = RadNonProceduralCharge.IsEnabled = false;
        }

        private void ChkRequiredPatAmt_Unchecked(object sender, RoutedEventArgs e)
        {   
            RadAll.IsEnabled = RadPatient.IsEnabled = RadInsurance.IsEnabled = RadAdjustmentWriteOff.IsEnabled = RadNonProceduralCharge.IsEnabled = true;
        }
    }
}
